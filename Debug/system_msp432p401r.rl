L 1 "../system_msp432p401r.c"
N/******************************************************************************
N* @file     system_msp432p401r.c
N* @brief    CMSIS Cortex-M4F Device Peripheral Access Layer Source File for
N*           MSP432P401R
N* @version  3.231
N* @date     01/26/18
N*
N* @note     View configuration instructions embedded in comments
N*
N******************************************************************************/
N//*****************************************************************************
N//
N// Copyright (C) 2015 - 2018 Texas Instruments Incorporated - http://www.ti.com/
N//
N// Redistribution and use in source and binary forms, with or without
N// modification, are permitted provided that the following conditions
N// are met:
N//
N//  Redistributions of source code must retain the above copyright
N//  notice, this list of conditions and the following disclaimer.
N//
N//  Redistributions in binary form must reproduce the above copyright
N//  notice, this list of conditions and the following disclaimer in the
N//  documentation and/or other materials provided with the
N//  distribution.
N//
N//  Neither the name of Texas Instruments Incorporated nor the names of
N//  its contributors may be used to endorse or promote products derived
N//  from this software without specific prior written permission.
N//
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N//
N//*****************************************************************************
N
N#include <stdint.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/stdint.h" 1
N/*****************************************************************************/
N/* STDINT.H                                                                  */
N/*                                                                           */
N/* Copyright (c) 2002 Texas Instruments Incorporated                         */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N#ifndef _STDINT_H_
N#define _STDINT_H_
N
N#include <_stdint40.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/_stdint40.h" 1
N/*****************************************************************************/
N/* _STDINT40.H                                                               */
N/*                                                                           */
N/* Copyright (c) 2018 Texas Instruments Incorporated                         */
N/* http://www.ti.com/                                                        */
N/*                                                                           */
N/*  Redistribution and  use in source  and binary forms, with  or without    */
N/*  modification,  are permitted provided  that the  following conditions    */
N/*  are met:                                                                 */
N/*                                                                           */
N/*     Redistributions  of source  code must  retain the  above copyright    */
N/*     notice, this list of conditions and the following disclaimer.         */
N/*                                                                           */
N/*     Redistributions in binary form  must reproduce the above copyright    */
N/*     notice, this  list of conditions  and the following  disclaimer in    */
N/*     the  documentation  and/or   other  materials  provided  with  the    */
N/*     distribution.                                                         */
N/*                                                                           */
N/*     Neither the  name of Texas Instruments Incorporated  nor the names    */
N/*     of its  contributors may  be used to  endorse or  promote products    */
N/*     derived  from   this  software  without   specific  prior  written    */
N/*     permission.                                                           */
N/*                                                                           */
N/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS    */
N/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT    */
N/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    */
N/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT    */
N/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
N/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT    */
N/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    */
N/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    */
N/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT    */
N/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    */
N/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     */
N/*                                                                           */
N/*****************************************************************************/
N#ifndef __STDINT40_H_
N#define __STDINT40_H_
N
N#if defined(_TMS320C6X) && !defined(__C6X_MIGRATION__)
X#if 0L && !0L
S    typedef          __int40_t  int40_t;
S    typedef unsigned __int40_t uint40_t;
S
S    typedef  int40_t  int_least40_t;
S    typedef uint40_t uint_least40_t;
S
S    typedef  int40_t  int_fast40_t;
S    typedef uint40_t uint_fast40_t;
N#endif
N
N/* 
N   According to footnotes in the 1999 C standard, "C++ implementations
N   should define these macros only when __STDC_LIMIT_MACROS is defined
N   before <stdint.h> is included." 
N*/
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N#if defined(_TMS320C6X) && !defined(__C6X_MIGRATION__)
X#if 0L && !0L
S    #define  INT40_MAX  0x7fffffffff
S    #define  INT40_MIN  (-INT40_MAX-1)
S    #define UINT40_MAX  0xffffffffff
S
S    #define  INT_LEAST40_MAX  (INT40_MAX)
S    #define  INT_LEAST40_MIN  (INT40_MIN)
S    #define UINT_LEAST40_MAX  (UINT40_MAX)
S
S    #define  INT_FAST40_MAX  (INT40_MAX)
S    #define  INT_FAST40_MIN  (INT40_MIN)
S    #define UINT_FAST40_MAX  (UINT40_MAX)
S
S    #define  INT40_C(value) ((int_least40_t)(value))
S    #define UINT40_C(value) ((uint_least40_t)(value))
N#endif
N
N#endif /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
N#endif /* __STDINT40_H_ */
L 41 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/stdint.h" 2
N#if __has_include(<sys/stdint.h>) 
X#if 1 
N#include <sys/stdint.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/stdint.h" 1
N/*-
N * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
N *
N * Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * $FreeBSD$
N */
N
N#ifndef _SYS_STDINT_H_
N#define _SYS_STDINT_H_
N
N#include <sys/cdefs.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/cdefs.h" 1
N/*-
N * SPDX-License-Identifier: BSD-3-Clause
N *
N * Copyright (c) 1991, 1993
N *	The Regents of the University of California.  All rights reserved.
N *
N * This code is derived from software contributed to Berkeley by
N * Berkeley Software Design, Inc.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the University nor the names of its contributors
N *    may be used to endorse or promote products derived from this software
N *    without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
N * $FreeBSD$
N */
N
N#ifndef	_SYS_CDEFS_H_
N#define	_SYS_CDEFS_H_
N
N#if defined(__TI_COMPILER_VERSION__)
X#if 1L
N#pragma diag_push
N#pragma CHECK_MISRA("none")
N#endif
N
N/*
N * Testing against Clang-specific extensions.
N */
N#ifndef	__has_attribute
S#define	__has_attribute(x)	0
N#endif
N#ifndef	__has_extension
S#define	__has_extension		__has_feature
N#endif
N#ifndef	__has_feature
S#define	__has_feature(x)	0
N#endif
N#ifndef	__has_include
S#define	__has_include(x)	0
N#endif
N#ifndef	__has_builtin
S#define	__has_builtin(x)	0
N#endif
N
N#if defined(__cplusplus)
X#if 0L
S#define	__BEGIN_DECLS	extern "C" {
S#define	__END_DECLS	}
N#else
N#define	__BEGIN_DECLS
N#define	__END_DECLS
N#endif
N
N/*
N * This code has been put in place to help reduce the addition of
N * compiler specific defines in FreeBSD code.  It helps to aid in
N * having a compiler-agnostic source tree.
N */
N
N#if defined(__GNUC__) || defined(__INTEL_COMPILER)
X#if 0L || 0L
S
S#if __GNUC__ >= 3 || defined(__INTEL_COMPILER)
S#define	__GNUCLIKE_ASM 3
S#define	__GNUCLIKE_MATH_BUILTIN_CONSTANTS
S#else
S#define	__GNUCLIKE_ASM 2
S#endif
S#define	__GNUCLIKE___TYPEOF 1
S#define	__GNUCLIKE___OFFSETOF 1
S#define	__GNUCLIKE___SECTION 1
S
S#ifndef __INTEL_COMPILER
S#define	__GNUCLIKE_CTOR_SECTION_HANDLING 1
S#endif
S
S#define	__GNUCLIKE_BUILTIN_CONSTANT_P 1
S#if defined(__INTEL_COMPILER) && defined(__cplusplus) && \
S   __INTEL_COMPILER < 800
X#if defined(__INTEL_COMPILER) && defined(__cplusplus) &&    __INTEL_COMPILER < 800
S#undef __GNUCLIKE_BUILTIN_CONSTANT_P
S#endif
S
S#if (__GNUC_MINOR__ > 95 || __GNUC__ >= 3)
S#define	__GNUCLIKE_BUILTIN_VARARGS 1
S#define	__GNUCLIKE_BUILTIN_STDARG 1
S#define	__GNUCLIKE_BUILTIN_VAALIST 1
S#endif
S
S#if defined(__GNUC__)
S#define	__GNUC_VA_LIST_COMPATIBILITY 1
S#endif
S
S/*
S * Compiler memory barriers, specific to gcc and clang.
S */
S#if defined(__GNUC__)
S#define	__compiler_membar()	__asm __volatile(" " : : : "memory")
S#endif
S
S#ifndef __INTEL_COMPILER
S#define	__GNUCLIKE_BUILTIN_NEXT_ARG 1
S#define	__GNUCLIKE_MATH_BUILTIN_RELOPS
S#endif
S
S#define	__GNUCLIKE_BUILTIN_MEMCPY 1
S
S/* XXX: if __GNUC__ >= 2: not tested everywhere originally, where replaced */
S#define	__CC_SUPPORTS_INLINE 1
S#define	__CC_SUPPORTS___INLINE 1
S#define	__CC_SUPPORTS___INLINE__ 1
S
S#define	__CC_SUPPORTS___FUNC__ 1
S#define	__CC_SUPPORTS_WARNING 1
S
S#define	__CC_SUPPORTS_VARADIC_XXX 1 /* see varargs.h */
S
S#define	__CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
S
N#endif /* __GNUC__ || __INTEL_COMPILER */
N
N#ifdef __TI_COMPILER_VERSION__
N#define	__GNUCLIKE___TYPEOF 1
N#define	__GNUCLIKE___OFFSETOF 1
N#define	__GNUCLIKE___SECTION 1
N
N#define	__CC_SUPPORTS_INLINE 1
N#define	__CC_SUPPORTS___INLINE 1
N#define	__CC_SUPPORTS___INLINE__ 1
N
N#define	__CC_SUPPORTS___FUNC__ 1
N#define	__CC_SUPPORTS_WARNING 1
N
N#define	__CC_SUPPORTS_VARADIC_XXX 1 /* see varargs.h */
N
N#define	__CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
N#endif /* __TI_COMPILER_VERSION__ */
N
N/*
N * Macro to test if we're using a specific version of gcc or later.
N */
N#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
X#if 0L && !0L
S#define	__GNUC_PREREQ__(ma, mi)	\
S	(__GNUC__ > (ma) || __GNUC__ == (ma) && __GNUC_MINOR__ >= (mi))
X#define	__GNUC_PREREQ__(ma, mi)		(__GNUC__ > (ma) || __GNUC__ == (ma) && __GNUC_MINOR__ >= (mi))
N#else
N#define	__GNUC_PREREQ__(ma, mi)	0
N#endif
N
N/*
N * The __CONCAT macro is used to concatenate parts of symbol names, e.g.
N * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.
N * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI
N * mode -- there must be no spaces between its arguments, and for nested
N * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also
N * concatenate double-quoted strings produced by the __STRING macro, but
N * this only works with ANSI C.
N *
N * __XSTRING is like __STRING, but it expands any macros in its argument
N * first.  It is only available with ANSI C.
N */
N#if defined(__STDC__) || defined(__cplusplus)
X#if 1L || 0L
N#define	__P(protos)	protos		/* full-blown ANSI C */
N#define	__CONCAT1(x,y)	x ## y
N#define	__CONCAT(x,y)	__CONCAT1(x,y)
N#define	__STRING(x)	#x		/* stringify without expanding x */
N#define	__XSTRING(x)	__STRING(x)	/* expand x, then stringify */
N
N#define	__const		const		/* define reserved names to standard */
N#define	__signed	signed
N#define	__volatile	volatile
N#if defined(__cplusplus)
X#if 0L
S#define	__inline	inline		/* convert to C++ keyword */
N#else
N#if !(defined(__CC_SUPPORTS___INLINE))
X#if !(1L)
S#define	__inline			/* delete GCC keyword */
N#endif /* ! __CC_SUPPORTS___INLINE */
N#endif /* !__cplusplus */
N
N#else	/* !(__STDC__ || __cplusplus) */
S#define	__P(protos)	()		/* traditional C preprocessor */
S#define	__CONCAT(x,y)	x/**/y
S#define	__STRING(x)	"x"
S
S#if !defined(__CC_SUPPORTS___INLINE)
S#define	__const				/* delete pseudo-ANSI C keywords */
S#define	__inline
S#define	__signed
S#define	__volatile
S/*
S * In non-ANSI C environments, new programs will want ANSI-only C keywords
S * deleted from the program and old programs will want them left alone.
S * When using a compiler other than gcc, programs using the ANSI C keywords
S * const, inline etc. as normal identifiers should define -DNO_ANSI_KEYWORDS.
S * When using "gcc -traditional", we assume that this is the intent; if
S * __GNUC__ is defined but __STDC__ is not, we leave the new keywords alone.
S */
S#ifndef	NO_ANSI_KEYWORDS
S#define	const				/* delete ANSI C keywords */
S#define	inline
S#define	signed
S#define	volatile
S#endif	/* !NO_ANSI_KEYWORDS */
S#endif	/* !__CC_SUPPORTS___INLINE */
N#endif	/* !(__STDC__ || __cplusplus) */
N
N/*
N * Compiler-dependent macros to help declare dead (non-returning) and
N * pure (no side effects) functions, and unused variables.  They are
N * null except for versions of gcc that are known to support the features
N * properly (old versions of gcc-2 supported the dead and pure features
N * in a different (wrong) way).  If we do not provide an implementation
N * for a given compiler, let the compile fail if it is told to use
N * a feature that we cannot live without.
N */
N#define	__weak_symbol	__attribute__((__weak__))
N#if !__GNUC_PREREQ__(2, 5) && !defined(__INTEL_COMPILER) && !defined(__TI_COMPILER_VERSION__)
X#if !0 && !0L && !1L
S#define	__dead2
S#define	__pure2
S#define	__unused
N#endif
N
N/*
N * TI ADD - check that __GNUC__ is defined before referencing it to avoid
N *          generating an error when __GNUC__ treated as zero warning is
N *          promoted to an error via -pdse195 option.
N */
N#if defined(__GNUC__) && __GNUC__ == 2 && __GNUC_MINOR__ >= 5 && __GNUC_MINOR__ < 7 && !defined(__INTEL_COMPILER)
X#if 0L && __GNUC__ == 2 && __GNUC_MINOR__ >= 5 && __GNUC_MINOR__ < 7 && !0L
S#define	__dead2		__attribute__((__noreturn__))
S#define	__pure2		__attribute__((__const__))
S#define	__unused
S/* XXX Find out what to do for __packed, __aligned and __section */
N#endif
N
N#if __GNUC_PREREQ__(2, 7) || defined(__INTEL_COMPILER) || defined(__TI_COMPILER_VERSION__)
X#if 0 || 0L || 1L
N#define	__dead2		__attribute__((__noreturn__))
N#define	__pure2		__attribute__((__const__))
N#define	__unused	__attribute__((__unused__))
N#define	__used		__attribute__((__used__))
N#define	__packed	__attribute__((__packed__))
N#define	__aligned(x)	__attribute__((__aligned__(x)))
N#define	__section(x)	__attribute__((__section__(x)))
N#endif
N#if __GNUC_PREREQ__(4, 3) || __has_attribute(__alloc_size__)
X#if 0 || 1
N#define	__alloc_size(x)	__attribute__((__alloc_size__(x)))
N#else
S#define	__alloc_size(x)
N#endif
N#if __GNUC_PREREQ__(4, 9) || __has_attribute(__alloc_align__)
X#if 0 || 0
S#define	__alloc_align(x)	__attribute__((__alloc_align__(x)))
N#else
N#define	__alloc_align(x)
N#endif
N
N#if defined(__TI_COMPILER_VERSION__)
X#if 1L
N#define __alignof(x)    __alignof__(x)
N#elif !__GNUC_PREREQ__(2, 95)
S#define	__alignof(x)	__offsetof(struct { char __a; x __b; }, __b)
N#endif
N
N/*
N * Keywords added in C11.
N */
N
N#if !defined(__STDC_VERSION__) || __STDC_VERSION__ < 201112L
X#if !1L || 199409L < 201112L
N
N#if !__has_extension(c_alignas)
X#if !1
S#if (defined(__cplusplus) && __cplusplus >= 201103L) || \
S    __has_extension(cxx_alignas)
X#if (defined(__cplusplus) && __cplusplus >= 201103L) ||     __has_extension(cxx_alignas)
S#define	_Alignas(x)		alignas(x)
S#else
S/* XXX: Only emulates _Alignas(constant-expression); not _Alignas(type-name). */
S#define	_Alignas(x)		__aligned(x)
S#endif
N#endif
N
N#if defined(__cplusplus) && __cplusplus >= 201103L
X#if 0L && __cplusplus >= 201103L
S#define	_Alignof(x)		alignof(x)
N#else
N#define	_Alignof(x)		__alignof(x)
N#endif
N
N#if !defined(__cplusplus) && !__has_extension(c_atomic) && \
N    !__has_extension(cxx_atomic)
X#if !0L && !1 &&     !1
S/*
S * No native support for _Atomic(). Place object in structure to prevent
S * most forms of direct non-atomic access.
S */
S#define	_Atomic(T)		struct { T volatile __val; }
N#endif
N
N#if defined(__cplusplus) && __cplusplus >= 201103L
X#if 0L && __cplusplus >= 201103L
S#define	_Noreturn		[[noreturn]]
N#else
N#define	_Noreturn		__dead2
N#endif
N
N#if !__has_extension(c_static_assert)
X#if !0
N#if (defined(__cplusplus) && __cplusplus >= 201103L) || \
N    __has_extension(cxx_static_assert)
X#if (0L && __cplusplus >= 201103L) ||     0
S#define	_Static_assert(x, y)	static_assert(x, y)
S#elif __GNUC_PREREQ__(4,6) && !defined(__cplusplus)
X#elif 0 && !0L
S/* Nothing, gcc 4.6 and higher has _Static_assert built-in */
N#elif defined(__COUNTER__)
X#elif 1L
N#define	_Static_assert(x, y)	__Static_assert(x, __COUNTER__)
N#define	__Static_assert(x, y)	___Static_assert(x, y)
N#define	___Static_assert(x, y)	typedef char __assert_ ## y[(x) ? 1 : -1] \
N				__unused
X#define	___Static_assert(x, y)	typedef char __assert_ ## y[(x) ? 1 : -1] 				__unused
N#else
S#define	_Static_assert(x, y)	struct __hack
N#endif
N#endif
N
N#if !__has_extension(c_thread_local)
X#if !0
N/*
N * XXX: Some compilers (Clang 3.3, GCC 4.7) falsely announce C++11 mode
N * without actually supporting the thread_local keyword. Don't check for
N * the presence of C++11 when defining _Thread_local.
N */
N#if /* (defined(__cplusplus) && __cplusplus >= 201103L) || */ \
N    __has_extension(cxx_thread_local)
X#if       0
S#define	_Thread_local		thread_local
N#else
N#define	_Thread_local		__thread
N#endif
N#endif
N
N#endif /* __STDC_VERSION__ || __STDC_VERSION__ < 201112L */
N
N/*
N * Emulation of C11 _Generic().  Unlike the previously defined C11
N * keywords, it is not possible to implement this using exactly the same
N * syntax.  Therefore implement something similar under the name
N * __generic().  Unlike _Generic(), this macro can only distinguish
N * between a single type, so it requires nested invocations to
N * distinguish multiple cases.
N */
N
N#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || \
N    __has_extension(c_generic_selections)
X#if (1L && 199409L >= 201112L) ||     0
S#define	__generic(expr, t, yes, no)					\
S	_Generic(expr, t: yes, default: no)
X#define	__generic(expr, t, yes, no)						_Generic(expr, t: yes, default: no)
S#elif __GNUC_PREREQ__(3, 1) && !defined(__cplusplus)
X#elif 0 && !0L
S#define	__generic(expr, t, yes, no)					\
S	__builtin_choose_expr(						\
S	    __builtin_types_compatible_p(__typeof(expr), t), yes, no)
X#define	__generic(expr, t, yes, no)						__builtin_choose_expr(							    __builtin_types_compatible_p(__typeof(expr), t), yes, no)
N#endif
N
N/*
N * C99 Static array indices in function parameter declarations.  Syntax such as:
N * void bar(int myArray[static 10]);
N * is allowed in C99 but not in C++.  Define __min_size appropriately so
N * headers using it can be compiled in either language.  Use like this:
N * void bar(int myArray[__min_size(10)]);
N */
N#if !defined(__cplusplus) && \
N    (defined(__clang__) || __GNUC_PREREQ__(4, 6)) && \
N    (!defined(__STDC_VERSION__) || (__STDC_VERSION__ >= 199901))
X#if !0L &&     (0L || 0) &&     (!1L || (199409L >= 199901))
S#define __min_size(x)	static (x)
N#else
N#define __min_size(x)	(x)
N#endif
N
N#if __GNUC_PREREQ__(2, 96)
X#if 0
S#define	__malloc_like	__attribute__((__malloc__))
S#define	__pure		__attribute__((__pure__))
N#else
N#define	__malloc_like
N#define	__pure
N#endif
N
N#if __GNUC_PREREQ__(3, 1) || (defined(__INTEL_COMPILER) && __INTEL_COMPILER >= 800) || defined(__TI_COMPILER_VERSION__)
X#if 0 || (0L && __INTEL_COMPILER >= 800) || 1L
N#define	__always_inline	__attribute__((__always_inline__))
N#else
S#define	__always_inline
N#endif
N
N#if __GNUC_PREREQ__(3, 1) || defined(__TI_COMPILER_VERSION__)
X#if 0 || 1L
N#define	__noinline	__attribute__ ((__noinline__))
N#else
S#define	__noinline
N#endif
N
N#if __GNUC_PREREQ__(3, 4)
X#if 0
S#define	__fastcall	__attribute__((__fastcall__))
S#define	__result_use_check	__attribute__((__warn_unused_result__))
N#else
N#define	__fastcall
N#define	__result_use_check
N#endif
N
N#if __GNUC_PREREQ__(4, 1)
X#if 0
S#define	__returns_twice	__attribute__((__returns_twice__))
N#else
N#define	__returns_twice
N#endif
N
N#if __GNUC_PREREQ__(4, 6) || __has_builtin(__builtin_unreachable)
X#if 0 || 0
S#define	__unreachable()	__builtin_unreachable()
N#else
N#define	__unreachable()	((void)0)
N#endif
N
N/* XXX: should use `#if __STDC_VERSION__ < 199901'. */
N#if !__GNUC_PREREQ__(2, 7) && !defined(__INTEL_COMPILER) && !defined(__TI_COMPILER_VERSION__)
X#if !0 && !0L && !1L
S#define	__func__	NULL
N#endif
N
N#if (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901)) || \
N    defined(__TI_COMPILER_VERSION__) || ((defined(__INTEL_COMPILER) || (defined(__GNUC__) && __GNUC__ >= 2)) && !defined(__STRICT_ANSI__))
X#if (1L && (199409L >= 199901)) ||     1L || ((0L || (0L && __GNUC__ >= 2)) && !0L)
N#define	__LONG_LONG_SUPPORTED
N#endif
N
N/* C++11 exposes a load of C99 stuff */
N#if defined(__cplusplus) && __cplusplus >= 201103L
X#if 0L && __cplusplus >= 201103L
S#define	__LONG_LONG_SUPPORTED
S#ifndef	__STDC_LIMIT_MACROS
S#define	__STDC_LIMIT_MACROS
S#endif
S#ifndef	__STDC_CONSTANT_MACROS
S#define	__STDC_CONSTANT_MACROS
S#endif
N#endif
N
N/*
N * GCC 2.95 provides `__restrict' as an extension to C90 to support the
N * C99-specific `restrict' type qualifier.  We happen to use `__restrict' as
N * a way to define the `restrict' type qualifier without disturbing older
N * software that is unaware of C99 keywords.
N * The TI compiler supports __restrict in all compilation modes.
N */
N#if !defined(__TI_COMPILER_VERSION__)
X#if !1L
S#if !(__GNUC__ == 2 && __GNUC_MINOR__ == 95)
S#if !defined(__STDC_VERSION__) || __STDC_VERSION__ < 199901
S#define	__restrict
S#else
S#define	__restrict	restrict
S#endif
S#endif
N#endif
N
N/*
N * GNU C version 2.96 adds explicit branch prediction so that
N * the CPU back-end can hint the processor and also so that
N * code blocks can be reordered such that the predicted path
N * sees a more linear flow, thus improving cache behavior, etc.
N *
N * The following two macros provide us with a way to utilize this
N * compiler feature.  Use __predict_true() if you expect the expression
N * to evaluate to true, and __predict_false() if you expect the
N * expression to evaluate to false.
N *
N * A few notes about usage:
N *
N *	* Generally, __predict_false() error condition checks (unless
N *	  you have some _strong_ reason to do otherwise, in which case
N *	  document it), and/or __predict_true() `no-error' condition
N *	  checks, assuming you want to optimize for the no-error case.
N *
N *	* Other than that, if you don't know the likelihood of a test
N *	  succeeding from empirical or other `hard' evidence, don't
N *	  make predictions.
N *
N *	* These are meant to be used in places that are run `a lot'.
N *	  It is wasteful to make predictions in code that is run
N *	  seldomly (e.g. at subsystem initialization time) as the
N *	  basic block reordering that this affects can often generate
N *	  larger code.
N */
N#if __GNUC_PREREQ__(2, 96)
X#if 0
S#define	__predict_true(exp)     __builtin_expect((exp), 1)
S#define	__predict_false(exp)    __builtin_expect((exp), 0)
N#else
N#define	__predict_true(exp)     (exp)
N#define	__predict_false(exp)    (exp)
N#endif
N
N#if __GNUC_PREREQ__(4, 0)
X#if 0
S#define	__null_sentinel	__attribute__((__sentinel__))
S#define	__exported	__attribute__((__visibility__("default")))
S#define	__hidden	__attribute__((__visibility__("hidden")))
N#else
N#define	__null_sentinel
N#define	__exported
N#define	__hidden
N#endif
N
N/*
N * We define this here since <stddef.h>, <sys/queue.h>, and <sys/types.h>
N * require it.
N */
N#if __GNUC_PREREQ__(4, 1)
X#if 0
S#define	__offsetof(type, field)	 __builtin_offsetof(type, field)
N#else
N#ifndef __cplusplus
N#define	__offsetof(type, field) \
N	((__size_t)(__uintptr_t)((const volatile void *)&((type *)0)->field))
X#define	__offsetof(type, field) 	((__size_t)(__uintptr_t)((const volatile void *)&((type *)0)->field))
N#else
S#define	__offsetof(type, field)					\
S  (__offsetof__ (reinterpret_cast <__size_t>			\
S                 (&reinterpret_cast <const volatile char &>	\
S                  (static_cast<type *> (0)->field))))
X#define	__offsetof(type, field)					  (__offsetof__ (reinterpret_cast <__size_t>			                 (&reinterpret_cast <const volatile char &>	                  (static_cast<type *> (0)->field))))
N#endif
N#endif
N#define	__rangeof(type, start, end) \
N	(__offsetof(type, end) - __offsetof(type, start))
X#define	__rangeof(type, start, end) 	(__offsetof(type, end) - __offsetof(type, start))
N
N/*
N * Given the pointer x to the member m of the struct s, return
N * a pointer to the containing structure.  When using GCC, we first
N * assign pointer x to a local variable, to check that its type is
N * compatible with member m.
N */
N#if __GNUC_PREREQ__(3, 1)
X#if 0
S#define	__containerof(x, s, m) ({					\
S	const volatile __typeof(((s *)0)->m) *__x = (x);		\
S	__DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));\
S})
X#define	__containerof(x, s, m) ({						const volatile __typeof(((s *)0)->m) *__x = (x);			__DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
N#else
N#define	__containerof(x, s, m)						\
N	__DEQUALIFY(s *, (const volatile char *)(x) - __offsetof(s, m))
X#define	__containerof(x, s, m)							__DEQUALIFY(s *, (const volatile char *)(x) - __offsetof(s, m))
N#endif
N
N/*
N * Compiler-dependent macros to declare that functions take printf-like
N * or scanf-like arguments.  They are null except for versions of gcc
N * that are known to support the features properly (old versions of gcc-2
N * didn't permit keeping the keywords out of the application namespace).
N */
N#if !__GNUC_PREREQ__(2, 7) && !defined(__INTEL_COMPILER)
X#if !0 && !0L
N#define	__printflike(fmtarg, firstvararg)
N#define	__scanflike(fmtarg, firstvararg)
N#define	__format_arg(fmtarg)
N#define	__strfmonlike(fmtarg, firstvararg)
N#define	__strftimelike(fmtarg, firstvararg)
N#else
S#define	__printflike(fmtarg, firstvararg) \
S	    __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
X#define	__printflike(fmtarg, firstvararg) 	    __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
S#define	__scanflike(fmtarg, firstvararg) \
S	    __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
X#define	__scanflike(fmtarg, firstvararg) 	    __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
S#define	__format_arg(fmtarg)	__attribute__((__format_arg__ (fmtarg)))
S#define	__strfmonlike(fmtarg, firstvararg) \
S	    __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))
X#define	__strfmonlike(fmtarg, firstvararg) 	    __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))
S#define	__strftimelike(fmtarg, firstvararg) \
S	    __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
X#define	__strftimelike(fmtarg, firstvararg) 	    __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
N#endif
N
N/* Compiler-dependent macros that rely on FreeBSD-specific extensions. */
N#if defined(__FreeBSD_cc_version) && __FreeBSD_cc_version >= 300001 && \
N    defined(__GNUC__) && !defined(__INTEL_COMPILER)
X#if 0L && __FreeBSD_cc_version >= 300001 &&     0L && !0L
S#define	__printf0like(fmtarg, firstvararg) \
S	    __attribute__((__format__ (__printf0__, fmtarg, firstvararg)))
X#define	__printf0like(fmtarg, firstvararg) 	    __attribute__((__format__ (__printf0__, fmtarg, firstvararg)))
N#else
N#define	__printf0like(fmtarg, firstvararg)
N#endif
N
N#if defined(__GNUC__) || defined(__INTEL_COMPILER)
X#if 0L || 0L
S#ifndef __INTEL_COMPILER
S#define	__strong_reference(sym,aliassym)	\
S	extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))
X#define	__strong_reference(sym,aliassym)		extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))
S#endif
S#ifdef __STDC__
S#define	__weak_reference(sym,alias)	\
S	__asm__(".weak " #alias);	\
S	__asm__(".equ "  #alias ", " #sym)
X#define	__weak_reference(sym,alias)		__asm__(".weak " #alias);		__asm__(".equ "  #alias ", " #sym)
S#define	__warn_references(sym,msg)	\
S	__asm__(".section .gnu.warning." #sym);	\
S	__asm__(".asciz \"" msg "\"");	\
S	__asm__(".previous")
X#define	__warn_references(sym,msg)		__asm__(".section .gnu.warning." #sym);		__asm__(".asciz \"" msg "\"");		__asm__(".previous")
S#define	__sym_compat(sym,impl,verid)	\
S	__asm__(".symver " #impl ", " #sym "@" #verid)
X#define	__sym_compat(sym,impl,verid)		__asm__(".symver " #impl ", " #sym "@" #verid)
S#define	__sym_default(sym,impl,verid)	\
S	__asm__(".symver " #impl ", " #sym "@@@" #verid)
X#define	__sym_default(sym,impl,verid)		__asm__(".symver " #impl ", " #sym "@@@" #verid)
S#else
S#define	__weak_reference(sym,alias)	\
S	__asm__(".weak alias");		\
S	__asm__(".equ alias, sym")
X#define	__weak_reference(sym,alias)		__asm__(".weak alias");			__asm__(".equ alias, sym")
S#define	__warn_references(sym,msg)	\
S	__asm__(".section .gnu.warning.sym"); \
S	__asm__(".asciz \"msg\"");	\
S	__asm__(".previous")
X#define	__warn_references(sym,msg)		__asm__(".section .gnu.warning.sym"); 	__asm__(".asciz \"msg\"");		__asm__(".previous")
S#define	__sym_compat(sym,impl,verid)	\
S	__asm__(".symver impl, sym@verid")
X#define	__sym_compat(sym,impl,verid)		__asm__(".symver impl, sym@verid")
S#define	__sym_default(impl,sym,verid)	\
S	__asm__(".symver impl, sym@@@verid")
X#define	__sym_default(impl,sym,verid)		__asm__(".symver impl, sym@@@verid")
S#endif	/* __STDC__ */
N#endif	/* __GNUC__ || __INTEL_COMPILER */
N
N#define	__GLOBL1(sym)	__asm__(".globl " #sym)
N#define	__GLOBL(sym)	__GLOBL1(sym)
N
N#if defined(__GNUC__) || defined(__INTEL_COMPILER)
X#if 0L || 0L
S#define	__IDSTRING(name,string)	__asm__(".ident\t\"" string "\"")
N#else
N/*
N * The following definition might not work well if used in header files,
N * but it should be better than nothing.  If you want a "do nothing"
N * version, then it should generate some harmless declaration, such as:
N *    #define	__IDSTRING(name,string)	struct __hack
N */
N#define	__IDSTRING(name,string)	static const char name[] __unused = string
N#endif
N
N#if defined(__TI_COMPILER_VERSION__) && defined(__TI_STRICT_ANSI_MODE__)
X#if 1L && 1L
N#define __extension__
N#endif
N
N/*
N * Embed the rcs id of a source file in the resulting library.  Note that in
N * more recent ELF binutils, we use .ident allowing the ID to be stripped.
N * Usage:
N *	__FBSDID("$FreeBSD$");
N */
N#ifndef	__FBSDID
N#if !defined(lint) && !defined(STRIP_FBSDID)
X#if !0L && !0L
N#define	__FBSDID(s)	__IDSTRING(__CONCAT(__rcsid_,__LINE__),s)
N#else
S#define	__FBSDID(s)	struct __hack
N#endif
N#endif
N
N#ifndef	__RCSID
N#ifndef	NO__RCSID
N#define	__RCSID(s)	__IDSTRING(__CONCAT(__rcsid_,__LINE__),s)
N#else
S#define	__RCSID(s)	struct __hack
N#endif
N#endif
N
N#ifndef	__RCSID_SOURCE
N#ifndef	NO__RCSID_SOURCE
N#define	__RCSID_SOURCE(s)	__IDSTRING(__CONCAT(__rcsid_source_,__LINE__),s)
N#else
S#define	__RCSID_SOURCE(s)	struct __hack
N#endif
N#endif
N
N#ifndef	__SCCSID
N#ifndef	NO__SCCSID
N#define	__SCCSID(s)	__IDSTRING(__CONCAT(__sccsid_,__LINE__),s)
N#else
S#define	__SCCSID(s)	struct __hack
N#endif
N#endif
N
N#ifndef	__COPYRIGHT
N#ifndef	NO__COPYRIGHT
N#define	__COPYRIGHT(s)	__IDSTRING(__CONCAT(__copyright_,__LINE__),s)
N#else
S#define	__COPYRIGHT(s)	struct __hack
N#endif
N#endif
N
N#ifndef	__DECONST
N#define	__DECONST(type, var)	((type)(__uintptr_t)(const void *)(var))
N#endif
N
N#ifndef	__DEVOLATILE
N#define	__DEVOLATILE(type, var)	((type)(__uintptr_t)(volatile void *)(var))
N#endif
N
N#ifndef	__DEQUALIFY
N#define	__DEQUALIFY(type, var)	((type)(__uintptr_t)(const volatile void *)(var))
N#endif
N
N/*-
N * The following definitions are an extension of the behavior originally
N * implemented in <sys/_posix.h>, but with a different level of granularity.
N * POSIX.1 requires that the macros we test be defined before any standard
N * header file is included.
N *
N * Here's a quick run-down of the versions:
N *  defined(_POSIX_SOURCE)		1003.1-1988
N *  _POSIX_C_SOURCE == 1		1003.1-1990
N *  _POSIX_C_SOURCE == 2		1003.2-1992 C Language Binding Option
N *  _POSIX_C_SOURCE == 199309		1003.1b-1993
N *  _POSIX_C_SOURCE == 199506		1003.1c-1995, 1003.1i-1995,
N *					and the omnibus ISO/IEC 9945-1: 1996
N *  _POSIX_C_SOURCE == 200112		1003.1-2001
N *  _POSIX_C_SOURCE == 200809		1003.1-2008
N *
N * In addition, the X/Open Portability Guide, which is now the Single UNIX
N * Specification, defines a feature-test macro which indicates the version of
N * that specification, and which subsumes _POSIX_C_SOURCE.
N *
N * Our macros begin with two underscores to avoid namespace screwage.
N */
N
N/* Deal with IEEE Std. 1003.1-1990, in which _POSIX_C_SOURCE == 1. */
N#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 1
X#if 0L && _POSIX_C_SOURCE == 1
S#undef _POSIX_C_SOURCE		/* Probably illegal, but beyond caring now. */
S#define	_POSIX_C_SOURCE		199009
N#endif
N
N/* Deal with IEEE Std. 1003.2-1992, in which _POSIX_C_SOURCE == 2. */
N#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE == 2
X#if 0L && _POSIX_C_SOURCE == 2
S#undef _POSIX_C_SOURCE
S#define	_POSIX_C_SOURCE		199209
N#endif
N
N/* Deal with various X/Open Portability Guides and Single UNIX Spec. */
N#ifdef _XOPEN_SOURCE
S#if _XOPEN_SOURCE - 0 >= 700
S#define	__XSI_VISIBLE		700
S#undef _POSIX_C_SOURCE
S#define	_POSIX_C_SOURCE		200809
S#elif _XOPEN_SOURCE - 0 >= 600
S#define	__XSI_VISIBLE		600
S#undef _POSIX_C_SOURCE
S#define	_POSIX_C_SOURCE		200112
S#elif _XOPEN_SOURCE - 0 >= 500
S#define	__XSI_VISIBLE		500
S#undef _POSIX_C_SOURCE
S#define	_POSIX_C_SOURCE		199506
S#endif
N#endif
N
N/*
N * Deal with all versions of POSIX.  The ordering relative to the tests above is
N * important.
N */
N#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)
X#if 0L && !0L
S#define	_POSIX_C_SOURCE		198808
N#endif
N#ifdef _POSIX_C_SOURCE
S#if _POSIX_C_SOURCE >= 200809
S#define	__POSIX_VISIBLE		200809
S#define	__ISO_C_VISIBLE		1999
S#elif _POSIX_C_SOURCE >= 200112
S#define	__POSIX_VISIBLE		200112
S#define	__ISO_C_VISIBLE		1999
S#elif _POSIX_C_SOURCE >= 199506
S#define	__POSIX_VISIBLE		199506
S#define	__ISO_C_VISIBLE		1990
S#elif _POSIX_C_SOURCE >= 199309
S#define	__POSIX_VISIBLE		199309
S#define	__ISO_C_VISIBLE		1990
S#elif _POSIX_C_SOURCE >= 199209
S#define	__POSIX_VISIBLE		199209
S#define	__ISO_C_VISIBLE		1990
S#elif _POSIX_C_SOURCE >= 199009
S#define	__POSIX_VISIBLE		199009
S#define	__ISO_C_VISIBLE		1990
S#else
S#define	__POSIX_VISIBLE		198808
S#define	__ISO_C_VISIBLE		0
S#endif /* _POSIX_C_SOURCE */
N#else
N/*-
N * Deal with _ANSI_SOURCE:
N * If it is defined, and no other compilation environment is explicitly
N * requested, then define our internal feature-test macros to zero.  This
N * makes no difference to the preprocessor (undefined symbols in preprocessing
N * expressions are defined to have value zero), but makes it more convenient for
N * a test program to print out the values.
N *
N * If a program mistakenly defines _ANSI_SOURCE and some other macro such as
N * _POSIX_C_SOURCE, we will assume that it wants the broader compilation
N * environment (and in fact we will never get here).
N */
N#if defined(_ANSI_SOURCE)	/* Hide almost everything. */
X#if 0L	 
S#define	__POSIX_VISIBLE		0
S#define	__XSI_VISIBLE		0
S#define	__BSD_VISIBLE		0
S#define	__ISO_C_VISIBLE		1990
S#define	__EXT1_VISIBLE		0
S#elif defined(_C99_SOURCE)	/* Localism to specify strict C99 env. */
X#elif 0L	 
S#define	__POSIX_VISIBLE		0
S#define	__XSI_VISIBLE		0
S#define	__BSD_VISIBLE		0
S#define	__ISO_C_VISIBLE		1999
S#define	__EXT1_VISIBLE		0
S#elif defined(_C11_SOURCE)	/* Localism to specify strict C11 env. */
X#elif 0L	 
S#define	__POSIX_VISIBLE		0
S#define	__XSI_VISIBLE		0
S#define	__BSD_VISIBLE		0
S#define	__ISO_C_VISIBLE		2011
S#define	__EXT1_VISIBLE		0
N#else				/* Default environment: show everything. */
N#define	__POSIX_VISIBLE		200809
N#define	__XSI_VISIBLE		700
N#define	__BSD_VISIBLE		1
N#define	__ISO_C_VISIBLE		2011
N#define	__EXT1_VISIBLE		1
N#endif
N#endif
N
N/* User override __EXT1_VISIBLE */
N#if defined(__STDC_WANT_LIB_EXT1__)
X#if 0L
S#undef	__EXT1_VISIBLE
S#if __STDC_WANT_LIB_EXT1__
S#define	__EXT1_VISIBLE		1
S#else
S#define	__EXT1_VISIBLE		0
S#endif
N#endif /* __STDC_WANT_LIB_EXT1__ */
N
N#if defined(__mips) || defined(__powerpc64__) || defined(__riscv)
X#if 0L || 0L || 0L
S#define	__NO_TLS 1
N#endif
N
N/*
N * Old versions of GCC use non-standard ARM arch symbols; acle-compat.h
N * translates them to __ARM_ARCH and the modern feature symbols defined by ARM.
N */
N#if defined(__arm__) && !defined(__ARM_ARCH)
X#if 0L && !1L
S#include <machine/acle-compat.h>
N#endif
N
N/*
N * Nullability qualifiers: currently only supported by Clang.
N */
N#if !(defined(__clang__) && __has_feature(nullability))
X#if !(0L && 0)
N#define	_Nonnull
N#define	_Nullable
N#define	_Null_unspecified
N#define	__NULLABILITY_PRAGMA_PUSH
N#define	__NULLABILITY_PRAGMA_POP
N#else
S#define	__NULLABILITY_PRAGMA_PUSH _Pragma("clang diagnostic push")	\
S	_Pragma("clang diagnostic ignored \"-Wnullability-completeness\"")
X#define	__NULLABILITY_PRAGMA_PUSH _Pragma("clang diagnostic push")		_Pragma("clang diagnostic ignored \"-Wnullability-completeness\"")
S#define	__NULLABILITY_PRAGMA_POP _Pragma("clang diagnostic pop")
N#endif
N
N/*
N * Type Safety Checking
N *
N * Clang provides additional attributes to enable checking type safety
N * properties that cannot be enforced by the C type system. 
N */
N
N#if __has_attribute(__argument_with_type_tag__) && \
N    __has_attribute(__type_tag_for_datatype__)
X#if 0 &&     0
S#define	__arg_type_tag(arg_kind, arg_idx, type_tag_idx) \
S	    __attribute__((__argument_with_type_tag__(arg_kind, arg_idx, type_tag_idx)))
X#define	__arg_type_tag(arg_kind, arg_idx, type_tag_idx) 	    __attribute__((__argument_with_type_tag__(arg_kind, arg_idx, type_tag_idx)))
S#define	__datatype_type_tag(kind, type) \
S	    __attribute__((__type_tag_for_datatype__(kind, type)))
X#define	__datatype_type_tag(kind, type) 	    __attribute__((__type_tag_for_datatype__(kind, type)))
N#else
N#define	__arg_type_tag(arg_kind, arg_idx, type_tag_idx)
N#define	__datatype_type_tag(kind, type)
N#endif
N
N/*
N * Lock annotations.
N *
N * Clang provides support for doing basic thread-safety tests at
N * compile-time, by marking which locks will/should be held when
N * entering/leaving a functions.
N *
N * Furthermore, it is also possible to annotate variables and structure
N * members to enforce that they are only accessed when certain locks are
N * held.
N */
N
N#if __has_extension(c_thread_safety_attributes)
X#if 0
S#define	__lock_annotate(x)	__attribute__((x))
N#else
N#define	__lock_annotate(x)
N#endif
N
N/* Structure implements a lock. */
N#define	__lockable		__lock_annotate(lockable)
N
N/* Function acquires an exclusive or shared lock. */
N#define	__locks_exclusive(...) \
N	__lock_annotate(exclusive_lock_function(__VA_ARGS__))
X#define	__locks_exclusive(...) 	__lock_annotate(exclusive_lock_function(__VA_ARGS__))
N#define	__locks_shared(...) \
N	__lock_annotate(shared_lock_function(__VA_ARGS__))
X#define	__locks_shared(...) 	__lock_annotate(shared_lock_function(__VA_ARGS__))
N
N/* Function attempts to acquire an exclusive or shared lock. */
N#define	__trylocks_exclusive(...) \
N	__lock_annotate(exclusive_trylock_function(__VA_ARGS__))
X#define	__trylocks_exclusive(...) 	__lock_annotate(exclusive_trylock_function(__VA_ARGS__))
N#define	__trylocks_shared(...) \
N	__lock_annotate(shared_trylock_function(__VA_ARGS__))
X#define	__trylocks_shared(...) 	__lock_annotate(shared_trylock_function(__VA_ARGS__))
N
N/* Function releases a lock. */
N#define	__unlocks(...)		__lock_annotate(unlock_function(__VA_ARGS__))
N
N/* Function asserts that an exclusive or shared lock is held. */
N#define	__asserts_exclusive(...) \
N	__lock_annotate(assert_exclusive_lock(__VA_ARGS__))
X#define	__asserts_exclusive(...) 	__lock_annotate(assert_exclusive_lock(__VA_ARGS__))
N#define	__asserts_shared(...) \
N	__lock_annotate(assert_shared_lock(__VA_ARGS__))
X#define	__asserts_shared(...) 	__lock_annotate(assert_shared_lock(__VA_ARGS__))
N
N/* Function requires that an exclusive or shared lock is or is not held. */
N#define	__requires_exclusive(...) \
N	__lock_annotate(exclusive_locks_required(__VA_ARGS__))
X#define	__requires_exclusive(...) 	__lock_annotate(exclusive_locks_required(__VA_ARGS__))
N#define	__requires_shared(...) \
N	__lock_annotate(shared_locks_required(__VA_ARGS__))
X#define	__requires_shared(...) 	__lock_annotate(shared_locks_required(__VA_ARGS__))
N#define	__requires_unlocked(...) \
N	__lock_annotate(locks_excluded(__VA_ARGS__))
X#define	__requires_unlocked(...) 	__lock_annotate(locks_excluded(__VA_ARGS__))
N
N/* Function should not be analyzed. */
N#define	__no_lock_analysis	__lock_annotate(no_thread_safety_analysis)
N
N/* Guard variables and structure members by lock. */
N#define	__guarded_by(x)		__lock_annotate(guarded_by(x))
N#define	__pt_guarded_by(x)	__lock_annotate(pt_guarded_by(x))
N
N#ifdef __TI_COMPILER_VERSION__
N#pragma diag_pop
N#endif
N
N#endif /* !_SYS_CDEFS_H_ */
L 35 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/stdint.h" 2
N#include <sys/_types.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/_types.h" 1
N/*-
N * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
N *
N * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * $FreeBSD$
N */
N
N#ifndef _SYS__TYPES_H_
N#define _SYS__TYPES_H_
N
N#include <sys/cdefs.h>
N#include <machine/_types.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/machine/_types.h" 1
N/*-
N * SPDX-License-Identifier: BSD-4-Clause
N *
N * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>
N * Copyright (c) 1990, 1993
N *	The Regents of the University of California.  All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. All advertising materials mentioning features or use of this software
N *    must display the following acknowledgement:
N *	This product includes software developed by the University of
N *	California, Berkeley and its contributors.
N * 4. Neither the name of the University nor the names of its contributors
N *    may be used to endorse or promote products derived from this software
N *    without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N *	From: @(#)ansi.h	8.2 (Berkeley) 1/4/94
N *	From: @(#)types.h	8.3 (Berkeley) 1/5/94
N * $FreeBSD$
N */
N
N#ifndef _MACHINE__TYPES_H_
N#define	_MACHINE__TYPES_H_
N
N#ifndef _SYS_CDEFS_H_
S#error this file needs sys/cdefs.h as a prerequisite
N#endif
N
N#ifdef __TI_COMPILER_VERSION__
N#pragma diag_push
N/* This file is required to use base types */
N#pragma CHECK_MISRA("-6.3")
N#endif
N
N/*
N * Basic types upon which most other types are built.
N */
Ntypedef	signed char		__int8_t;
Ntypedef	unsigned char		__uint8_t;
Ntypedef	short			__int16_t;
Ntypedef	unsigned short		__uint16_t;
Ntypedef	int			__int32_t;
Ntypedef	unsigned int		__uint32_t;
N#ifndef lint
N__extension__
X
N#endif
N/* LONGLONG */
Ntypedef	long long		__int64_t;
N#ifndef lint
N__extension__
X
N#endif
N/* LONGLONG */
Ntypedef	unsigned long long	__uint64_t;
N
N/*
N * Standard type definitions.
N */
Ntypedef	__uint32_t	__clock_t;		/* clock()... */
Ntypedef	__int32_t	__critical_t;
Ntypedef	double		__double_t;
Ntypedef	float		__float_t;
Ntypedef	__int32_t	__intfptr_t;
Ntypedef	__int64_t	__intmax_t;
Ntypedef	__int32_t	__intptr_t;
Ntypedef	__int32_t	__int_fast8_t;
Ntypedef	__int32_t	__int_fast16_t;
Ntypedef	__int32_t	__int_fast32_t;
Ntypedef	__int64_t	__int_fast64_t;
Ntypedef	__int8_t	__int_least8_t;
Ntypedef	__int16_t	__int_least16_t;
Ntypedef	__int32_t	__int_least32_t;
Ntypedef	__int64_t	__int_least64_t;
Ntypedef	__int32_t	__ptrdiff_t;		/* ptr1 - ptr2 */
Ntypedef	__int32_t	__register_t;
Ntypedef	__int32_t	__segsz_t;		/* segment size (in pages) */
Ntypedef	__uint32_t	__size_t;		/* sizeof() */
Ntypedef	__int32_t	__ssize_t;		/* byte count or error */
N#if (defined(__TI_TIME_USES_64) && __TI_TIME_USES_64)
X#if (0L && __TI_TIME_USES_64)
Stypedef	__int64_t	__time_t;		/* time()... */
N#else
Ntypedef __uint32_t      __time_t;
N#endif
Ntypedef	__uint32_t	__uintfptr_t;
Ntypedef	__uint64_t	__uintmax_t;
Ntypedef	__uint32_t	__uintptr_t;
Ntypedef	__uint32_t	__uint_fast8_t;
Ntypedef	__uint32_t	__uint_fast16_t;
Ntypedef	__uint32_t	__uint_fast32_t;
Ntypedef	__uint64_t	__uint_fast64_t;
Ntypedef	__uint8_t	__uint_least8_t;
Ntypedef	__uint16_t	__uint_least16_t;
Ntypedef	__uint32_t	__uint_least32_t;
Ntypedef	__uint64_t	__uint_least64_t;
Ntypedef	__uint32_t	__u_register_t;
Ntypedef	__uint32_t	__vm_offset_t;
Ntypedef	__uint32_t	__vm_paddr_t;
Ntypedef	__uint32_t	__vm_size_t;
N
N# ifdef __clang__
Stypedef __WCHAR_TYPE__ __WCHAR_T_TYPE__;
N# endif
Ntypedef	__WCHAR_T_TYPE__ ___wchar_t;
Xtypedef	unsigned short ___wchar_t;
N
N#define	__WCHAR_MIN	0		/* min value for a wchar_t */
N
N#ifdef __TI_COMPILER_VERSION__
N#if !defined(__TI_WCHAR_T_BITS__) || __TI_WCHAR_T_BITS__ == 16
X#if !1L || 16 == 16
N#    define __WCHAR_MAX 0xffffu
N#else
S#    define __WCHAR_MAX 0xffffffffu
N#endif
N#else
S#define	__WCHAR_MAX	__UINT_MAX	/* max value for a wchar_t */
N#endif
N
N/*
N * Unusual type definitions.
N */
N#ifdef __TI_COMPILER_VERSION__
Ntypedef struct __va_list_t {
N    void * __ap;
N} __va_list;
N#elif defined(__GNUCLIKE_BUILTIN_VARARGS)
Stypedef __builtin_va_list	__va_list;	/* internally known to gcc */
S#else
Stypedef	char *			__va_list;
N#endif /* __GNUCLIKE_BUILTIN_VARARGS */
N#if defined(__GNUCLIKE_BUILTIN_VAALIST) \
N    && !defined(__NO_GNUC_VA_LIST) && !defined(__GNUC_VA_LIST)
X#if 0L     && !0L && !0L
S#define __GNUC_VA_LIST	1
Stypedef __va_list		__gnuc_va_list;	/* compatibility w/GNU headers*/
N#endif
N
N#if defined(__TI_COMPILER_VERSION__)
X#if 1L
N#pragma diag_pop
N#endif
N
N#endif /* !_MACHINE__TYPES_H_ */
L 36 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/_types.h" 2
N
N#if defined(__TI_COMPILER_VERSION__)
X#if 1L
N#pragma diag_push
N/* This file is required to use types without size and signedness */
N#pragma CHECK_MISRA("-6.3")
N#endif
N
N/*
N * Standard type definitions.
N */
Ntypedef	__int32_t	__blksize_t;	/* file block size */
Ntypedef	__int64_t	__blkcnt_t;	/* file block count */
Ntypedef	__int32_t	__clockid_t;	/* clock_gettime()... */
Ntypedef	__uint32_t	__fflags_t;	/* file flags */
Ntypedef	__uint64_t	__fsblkcnt_t;
Ntypedef	__uint64_t	__fsfilcnt_t;
Ntypedef	__uint32_t	__gid_t;
Ntypedef	__int64_t	__id_t;		/* can hold a gid_t, pid_t, or uid_t */
Ntypedef	__uint64_t	__ino_t;	/* inode number */
Ntypedef	long		__key_t;	/* IPC key (for Sys V IPC) */
Ntypedef	__int32_t	__lwpid_t;	/* Thread ID (a.k.a. LWP) */
Ntypedef	__uint16_t	__mode_t;	/* permissions */
Ntypedef	int		__accmode_t;	/* access permissions */
Ntypedef	int		__nl_item;
Ntypedef	__uint64_t	__nlink_t;	/* link count */
Ntypedef	__int64_t	__off_t;	/* file offset */
Ntypedef	__int64_t	__off64_t;	/* file offset (alias) */
Ntypedef	__int32_t	__pid_t;	/* process [group] */
Ntypedef	__int64_t	__rlim_t;	/* resource limit - intentionally */
N					/* signed, because of legacy code */
N					/* that uses -1 for RLIM_INFINITY */
N#if defined(__TI_COMPILER_VERSION__) &&  defined(__TMS320C2000__)
X#if 1L &&  0L
Stypedef	__uint16_t	__sa_family_t;
N#else
Ntypedef	__uint8_t	__sa_family_t;
N#endif
Ntypedef	__uint32_t	__socklen_t;
Ntypedef	long		__suseconds_t;	/* microseconds (signed) */
Ntypedef	struct __timer	*__timer_t;	/* timer_gettime()... */
Ntypedef	struct __mq	*__mqd_t;	/* mq_open()... */
Ntypedef	__uint32_t	__uid_t;
Ntypedef	unsigned int	__useconds_t;	/* microseconds (unsigned) */
Ntypedef	int		__cpuwhich_t;	/* which parameter for cpuset. */
Ntypedef	int		__cpulevel_t;	/* level parameter for cpuset. */
Ntypedef int		__cpusetid_t;	/* cpuset identifier. */
N
N/*
N * Unusual type definitions.
N */
N/*
N * rune_t is declared to be an ``int'' instead of the more natural
N * ``unsigned long'' or ``long''.  Two things are happening here.  It is not
N * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,
N * it looks like 10646 will be a 31 bit standard.  This means that if your
N * ints cannot hold 32 bits, you will be in trouble.  The reason an int was
N * chosen over a long is that the is*() and to*() routines take ints (says
N * ANSI C), but they use __ct_rune_t instead of int.
N *
N * NOTE: rune_t is not covered by ANSI nor other standards, and should not
N * be instantiated outside of lib/libc/locale.  Use wchar_t.  wint_t and
N * rune_t must be the same type.  Also, wint_t should be able to hold all
N * members of the largest character set plus one extra value (WEOF), and
N * must be at least 16 bits.
N */
N#if defined(__TI_COMPILER_VERSION__) && \
N    defined(__TMS320C2000__) && defined(__TI_EABI__)
X#if 1L &&     0L && 1L
Stypedef	unsigned long	__ct_rune_t;	/* arg type for ctype funcs */
N#else
Ntypedef	int		__ct_rune_t;	/* arg type for ctype funcs */
N#endif
N
Ntypedef	__ct_rune_t	__rune_t;	/* rune_t (see above) */
Ntypedef	__ct_rune_t	__wint_t;	/* wint_t (see above) */
N
N/* Clang already provides these types as built-ins, but only in C++ mode. */
N#if !defined(__clang__) || !defined(__cplusplus)
X#if !0L || !0L
Ntypedef	__uint_least16_t __char16_t;
Ntypedef	__uint_least32_t __char32_t;
N#endif
N/* In C++11, char16_t and char32_t are built-in types. */
N#if defined(__cplusplus) && __cplusplus >= 201103L
X#if 0L && __cplusplus >= 201103L
S#define	_CHAR16_T_DECLARED
S#define	_CHAR32_T_DECLARED
N#endif
N
Ntypedef struct {
N	long long __max_align1 __attribute__((aligned(_Alignof(long long))));
X	long long __max_align1 __attribute__((aligned(__alignof__(long long))));
N	long double __max_align2 __attribute__((aligned(_Alignof(long double))));
X	long double __max_align2 __attribute__((aligned(__alignof__(long double))));
N} __max_align_t;
N
Ntypedef	__uint64_t	__dev_t;	/* device number */
N
Ntypedef	__uint32_t	__fixpt_t;	/* fixed point number */
N
N/*
N * mbstate_t is an opaque object to keep conversion state during multibyte
N * stream conversions.
N */
N
N#ifdef __TI_COMPILER_VERSION__
N#if defined(_AEABI_PORTABILITY_LEVEL) && _AEABI_PORTABILITY_LEVEL != 0
X#if 0L && _AEABI_PORTABILITY_LEVEL != 0
Stypedef struct _Mbstatet
S{
S    unsigned int __state, __state2;
S} _Mbstatet;
N#else
Ntypedef int _Mbstatet;
N#endif /* _AEABI_PORTABILITY_LEVEL */
N
Ntypedef _Mbstatet __mbstate_t;
N#else
Stypedef union {
S	char		__mbstate8[128];
S	__int64_t	_mbstateL;	/* for alignment */
S} __mbstate_t;
N#endif
N
Ntypedef __uintmax_t     __rman_res_t;
N
N/*
N * When the following macro is defined, the system uses 64-bit inode numbers.
N * Programs can use this to avoid including <sys/param.h>, with its associated
N * namespace pollution.
N */
N#define	__INO64
N
N#if defined(__TI_COMPILER_VERSION__)
X#if 1L
N#pragma diag_pop
N#endif
N
N#endif /* !_SYS__TYPES_H_ */
L 36 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/stdint.h" 2
N
N#include <machine/_stdint.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/machine/_stdint.h" 1
N/*-
N * SPDX-License-Identifier: BSD-2-Clause-NetBSD
N *
N * Copyright (c) 2001, 2002 Mike Barcroft <mike@FreeBSD.org>
N * Copyright (c) 2001 The NetBSD Foundation, Inc.
N * All rights reserved.
N *
N * This code is derived from software contributed to The NetBSD Foundation
N * by Klaus Klein.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
N * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
N * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N * POSSIBILITY OF SUCH DAMAGE.
N *
N * $FreeBSD$
N */
N
N#ifndef _MACHINE__STDINT_H_
N#define	_MACHINE__STDINT_H_
N
N#pragma diag_push
N/* 19.4 is issued for macros that are defined in terms of other macros. */
N#pragma CHECK_MISRA("-19.4")
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N#define	INT8_C(c)		(c)
N#define	INT16_C(c)		(c)
N#define	INT32_C(c)		(c)
N#define	INT64_C(c)		(c ## LL)
N
N#define	UINT8_C(c)		(c)
N#define	UINT16_C(c)		(c)
N#define	UINT32_C(c)		(c ## U)
N#define	UINT64_C(c)		(c ## ULL)
N
N#define	INTMAX_C(c)		INT64_C(c)
N#define	UINTMAX_C(c)		UINT64_C(c)
N
N#endif /* !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS) */
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N/*
N * ISO/IEC 9899:1999
N * 7.18.2.1 Limits of exact-width integer types
N */
N/* Minimum values of exact-width signed integer types. */
N#define	INT8_MIN	(-0x7f-1)
N#define	INT16_MIN	(-0x7fff-1)
N#define	INT32_MIN	(-0x7fffffff-1)
N#define	INT64_MIN	(-0x7fffffffffffffffLL-1)
N
N/* Maximum values of exact-width signed integer types. */
N#define	INT8_MAX	0x7f
N#define	INT16_MAX	0x7fff
N#define	INT32_MAX	0x7fffffff
N#define	INT64_MAX	0x7fffffffffffffffLL
N
N/* Maximum values of exact-width unsigned integer types. */
N#define	UINT8_MAX	0xff
N#define	UINT16_MAX	0xffff
N#define	UINT32_MAX	0xffffffffU
N#define	UINT64_MAX	0xffffffffffffffffULL
N
N/*
N * ISO/IEC 9899:1999
N * 7.18.2.2  Limits of minimum-width integer types
N */
N/* Minimum values of minimum-width signed integer types. */
N#define	INT_LEAST8_MIN	INT8_MIN
N#define	INT_LEAST16_MIN	INT16_MIN
N#define	INT_LEAST32_MIN	INT32_MIN
N#define	INT_LEAST64_MIN	INT64_MIN
N
N/* Maximum values of minimum-width signed integer types. */
N#define	INT_LEAST8_MAX	INT8_MAX
N#define	INT_LEAST16_MAX	INT16_MAX
N#define	INT_LEAST32_MAX	INT32_MAX
N#define	INT_LEAST64_MAX	INT64_MAX
N
N/* Maximum values of minimum-width unsigned integer types. */
N#define	UINT_LEAST8_MAX	 UINT8_MAX
N#define	UINT_LEAST16_MAX UINT16_MAX
N#define	UINT_LEAST32_MAX UINT32_MAX
N#define	UINT_LEAST64_MAX UINT64_MAX
N
N/*
N * ISO/IEC 9899:1999
N * 7.18.2.3  Limits of fastest minimum-width integer types
N */
N/* Minimum values of fastest minimum-width signed integer types. */
N#define	INT_FAST8_MIN	INT32_MIN
N#define	INT_FAST16_MIN	INT32_MIN
N#define	INT_FAST32_MIN	INT32_MIN
N#define	INT_FAST64_MIN	INT64_MIN
N
N/* Maximum values of fastest minimum-width signed integer types. */
N#define	INT_FAST8_MAX	INT32_MAX
N#define	INT_FAST16_MAX	INT32_MAX
N#define	INT_FAST32_MAX	INT32_MAX
N#define	INT_FAST64_MAX	INT64_MAX
N
N/* Maximum values of fastest minimum-width unsigned integer types. */
N#define	UINT_FAST8_MAX	UINT32_MAX
N#define	UINT_FAST16_MAX	UINT32_MAX
N#define	UINT_FAST32_MAX	UINT32_MAX
N#define	UINT_FAST64_MAX	UINT64_MAX
N
N/*
N * ISO/IEC 9899:1999
N * 7.18.2.4  Limits of integer types capable of holding object pointers
N */
N#define	INTPTR_MIN	INT32_MIN
N#define	INTPTR_MAX	INT32_MAX
N#define	UINTPTR_MAX	UINT32_MAX
N
N/*
N * ISO/IEC 9899:1999
N * 7.18.2.5  Limits of greatest-width integer types
N */
N#define	INTMAX_MIN	INT64_MIN
N#define	INTMAX_MAX	INT64_MAX
N#define	UINTMAX_MAX	UINT64_MAX
N
N/*
N * ISO/IEC 9899:1999
N * 7.18.3  Limits of other integer types
N */
N/* Limits of ptrdiff_t. */
N#define	PTRDIFF_MIN	INT32_MIN
N#define	PTRDIFF_MAX	INT32_MAX
N
N/* Limits of sig_atomic_t. */
N#define	SIG_ATOMIC_MIN	INT32_MIN
N#define	SIG_ATOMIC_MAX	INT32_MAX
N
N/* Limit of size_t. */
N#define	SIZE_MAX	UINT32_MAX
N
N/* Limits of wint_t. */
N#define	WINT_MIN	INT32_MIN
N#define	WINT_MAX	INT32_MAX
N
N#endif /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
N
N#pragma diag_pop
N
N#endif /* !_MACHINE__STDINT_H_ */
L 38 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/stdint.h" 2
N#include <sys/_stdint.h>
L 1 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/_stdint.h" 1
N/*-
N * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
N *
N * Copyright (c) 2011 David E. O'Brien <obrien@FreeBSD.org>
N * Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * $FreeBSD$
N */
N
N#ifndef _SYS__STDINT_H_
N#define _SYS__STDINT_H_
N
N#if !defined(__TI_COMPILER_VERSION__) ||  !defined(__TMS320C2000__)
X#if !1L ||  !0L
N#ifndef _INT8_T_DECLARED
Ntypedef	__int8_t		int8_t;
N#define	_INT8_T_DECLARED
N#endif
N#endif
N
N#ifndef _INT16_T_DECLARED
Ntypedef	__int16_t		int16_t;
N#define	_INT16_T_DECLARED
N#endif
N
N#ifndef _INT32_T_DECLARED
Ntypedef	__int32_t		int32_t;
N#define	_INT32_T_DECLARED
N#endif
N
N#ifndef _INT64_T_DECLARED
Ntypedef	__int64_t		int64_t;
N#define	_INT64_T_DECLARED
N#endif
N
N#if !defined(__TI_COMPILER_VERSION__) ||  !defined(__TMS320C2000__)
X#if !1L ||  !0L
N#ifndef _UINT8_T_DECLARED
Ntypedef	__uint8_t		uint8_t;
N#define	_UINT8_T_DECLARED
N#endif
N#endif
N
N#ifndef _UINT16_T_DECLARED
Ntypedef	__uint16_t		uint16_t;
N#define	_UINT16_T_DECLARED
N#endif
N
N#ifndef _UINT32_T_DECLARED
Ntypedef	__uint32_t		uint32_t;
N#define	_UINT32_T_DECLARED
N#endif
N
N#ifndef _UINT64_T_DECLARED
Ntypedef	__uint64_t		uint64_t;
N#define	_UINT64_T_DECLARED
N#endif
N
N#ifndef _INTPTR_T_DECLARED
Ntypedef	__intptr_t		intptr_t;
N#define	_INTPTR_T_DECLARED
N#endif
N#ifndef _UINTPTR_T_DECLARED
Ntypedef	__uintptr_t		uintptr_t;
N#define	_UINTPTR_T_DECLARED
N#endif
N#ifndef _INTMAX_T_DECLARED
Ntypedef	__intmax_t		intmax_t;
N#define	_INTMAX_T_DECLARED
N#endif
N#ifndef _UINTMAX_T_DECLARED
Ntypedef	__uintmax_t		uintmax_t;
N#define	_UINTMAX_T_DECLARED
N#endif
N
N#endif /* !_SYS__STDINT_H_ */
L 39 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/sys/stdint.h" 2
N
Ntypedef	__int_least8_t		int_least8_t;
Ntypedef	__int_least16_t		int_least16_t;
Ntypedef	__int_least32_t		int_least32_t;
Ntypedef	__int_least64_t		int_least64_t;
N
Ntypedef	__uint_least8_t		uint_least8_t;
Ntypedef	__uint_least16_t	uint_least16_t;
Ntypedef	__uint_least32_t	uint_least32_t;
Ntypedef	__uint_least64_t	uint_least64_t;
N
Ntypedef	__int_fast8_t		int_fast8_t;
Ntypedef	__int_fast16_t		int_fast16_t;
Ntypedef	__int_fast32_t		int_fast32_t;
Ntypedef	__int_fast64_t		int_fast64_t;
N
Ntypedef	__uint_fast8_t		uint_fast8_t;
Ntypedef	__uint_fast16_t		uint_fast16_t;
Ntypedef	__uint_fast32_t		uint_fast32_t;
Ntypedef	__uint_fast64_t		uint_fast64_t;
N
N/* GNU and Darwin define this and people seem to think it's portable */
N#if defined(UINTPTR_MAX) && defined(UINT64_MAX) && (UINTPTR_MAX == UINT64_MAX)
X#if 1L && 1L && (0xffffffffU == 0xffffffffffffffffULL)
S#define	__WORDSIZE		64
N#else
N#define	__WORDSIZE		32
N#endif
N
N#pragma diag_push
N#pragma CHECK_MISRA("-19.4")
N/* Limits of wchar_t. */
N#define	WCHAR_MIN	__WCHAR_MIN
N#define	WCHAR_MAX	__WCHAR_MAX
N#pragma diag_pop
N
N#if __EXT1_VISIBLE
X#if 1
N/* ISO/IEC 9899:2011 K.3.4.4 */
N#ifndef RSIZE_MAX
N#define RSIZE_MAX (SIZE_MAX >> 1)
N#endif
N#endif /* __EXT1_VISIBLE */
N
N#endif /* !_SYS_STDINT_H_ */
L 43 "C:/ti/ccs930/ccs/tools/compiler/ti-cgt-arm_18.12.5.LTS/include/stdint.h" 2
N#else
S/* 7.18.1.1 Exact-width integer types */
S
S#if defined(__MSP430__) || defined(__TMS320C55X_PLUS_BYTE__)
S    typedef   signed char    int8_t;
S    typedef unsigned char   uint8_t;
S    typedef          int    int16_t;
S    typedef unsigned int   uint16_t;
S    typedef          long   int32_t;
S    typedef unsigned long  uint32_t;
S#elif defined(_TMS320C5XX) || defined(__TMS320C55X__)
S    typedef          int    int16_t;
S    typedef unsigned int   uint16_t;
S    typedef          long   int32_t;
S    typedef unsigned long  uint32_t;
S#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__ARP32__) || \
S      defined(__PRU__)    || defined(__C7000__)
X#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__ARP32__) ||       defined(__PRU__)    || defined(__C7000__)
S    typedef   signed char   int8_t;
S    typedef unsigned char  uint8_t;
S    typedef          short  int16_t;
S    typedef unsigned short uint16_t;
S    typedef          int    int32_t;
S    typedef unsigned int   uint32_t;
S#elif defined (__TMS320C2000__)
S#if defined(__TMS320C28XX_CLA__)
S    typedef          short  int16_t;
S    typedef unsigned short uint16_t;
S    typedef          int    int32_t;
S    typedef unsigned int   uint32_t;
S#else
S    typedef          int    int16_t;
S    typedef unsigned int   uint16_t;
S    typedef          long   int32_t;
S    typedef unsigned long  uint32_t;
S#endif
S#endif
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__ARP32__) || \
S    defined(__MSP430__) || defined(__PRU__)    || defined(__C7000__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__ARP32__) ||     defined(__MSP430__) || defined(__PRU__)    || defined(__C7000__)
S    typedef          long long  int64_t;
S    typedef unsigned long long uint64_t;
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    typedef          long long  int64_t;
S    typedef unsigned long long uint64_t;
S#endif
S#endif
S
S/* 7.18.1.2 Minimum-width integer types */
S
S#if defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) || \
S    defined(__TMS320C55X_PLUS_BYTE__)          || defined(__ARP32__)  || \
S    defined(__PRU__)    || defined(__C7000__)
X#if defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) ||     defined(__TMS320C55X_PLUS_BYTE__)          || defined(__ARP32__)  ||     defined(__PRU__)    || defined(__C7000__)
S    typedef  int8_t   int_least8_t;
S    typedef uint8_t  uint_least8_t;
S#elif defined(__TMS320C2000__) || defined(_TMS320C5XX) || defined(__TMS320C55X__)
S    typedef  int16_t  int_least8_t;
S    typedef uint16_t uint_least8_t;
S#endif
S
S    typedef  int16_t  int_least16_t;
S    typedef uint16_t uint_least16_t;
S    typedef  int32_t  int_least32_t;
S    typedef uint32_t uint_least32_t;
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) || \
S    defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) ||     defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
S    typedef  int64_t  int_least64_t;
S    typedef uint64_t uint_least64_t;
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    typedef  int64_t  int_least64_t;
S    typedef uint64_t uint_least64_t;
S#else
S/* sorry, [u]int_least64_t not implemented for C27X, CLA */
S#endif
S#elif defined(_TMS320C5XX) || defined(__TMS320C55X__) 
S/* sorry, [u]int_least64_t not implemented for C54x, C55x */
S#endif
S
S/* 7.18.1.3 Fastest minimum-width integer types */
S
S#if defined(_TMS320C5XX) || defined(__TMS320C55X__)  || defined(__MSP430__)
S    typedef  int16_t  int_fast8_t;
S    typedef uint16_t uint_fast8_t;
S    typedef  int16_t  int_fast16_t;
S    typedef uint16_t uint_fast16_t;
S#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__ARP32__) || \
S      defined(__PRU__)    || defined(__C7000__)
X#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__ARP32__) ||       defined(__PRU__)    || defined(__C7000__)
S    typedef  int32_t  int_fast8_t;
S    typedef uint32_t uint_fast8_t;
S    typedef  int32_t  int_fast16_t;
S    typedef uint32_t uint_fast16_t;
S#elif defined (__TMS320C2000__)
S#if defined(__TMS320C28XX_CLA__)
S    typedef  int32_t  int_fast8_t;
S    typedef uint32_t uint_fast8_t;
S    typedef  int32_t  int_fast16_t;
S    typedef uint32_t uint_fast16_t;
S#else
S    typedef  int16_t  int_fast8_t;
S    typedef uint16_t uint_fast8_t;
S    typedef  int16_t  int_fast16_t;
S    typedef uint16_t uint_fast16_t;
S#endif
S#endif
S
S    typedef  int32_t  int_fast32_t;
S    typedef uint32_t uint_fast32_t;
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) || \
S    defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) ||     defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
S    typedef  int64_t  int_fast64_t;
S    typedef uint64_t uint_fast64_t;
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    typedef  int64_t  int_fast64_t;
S    typedef uint64_t uint_fast64_t;
S#else
S/* sorry, [u]int_fast64_t not implemented for C27X, CLA */
S#endif
S#elif defined(_TMS320C5XX) || defined(__TMS320C55X__) 
S/* sorry, [u]int_fast64_t not implemented for C54x, C55x */
S#endif
S
S/* 7.18.1.4 Integer types capable of holding object pointers */
S#if defined(_TMS320C5XX) || defined(__TMS320C55X__)        || \
S    (defined(__MSP430__) && defined(__LARGE_CODE_MODEL__)) || \
S    defined(__C7000__)
X#if defined(_TMS320C5XX) || defined(__TMS320C55X__)        ||     (defined(__MSP430__) && defined(__LARGE_CODE_MODEL__)) ||     defined(__C7000__)
S    typedef          long intptr_t;
S    typedef unsigned long uintptr_t;
S#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) || \
S      defined(__ARP32__)  || defined(__PRU__)
X#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) ||       defined(__ARP32__)  || defined(__PRU__)
S    typedef          int intptr_t;
S    typedef unsigned int uintptr_t;
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28XX_CLA__)
S    typedef          short intptr_t;
S    typedef unsigned short uintptr_t;
S#else
S    typedef          long intptr_t;
S    typedef unsigned long uintptr_t;
S#endif
S#endif
S
S/* 7.18.1.5 Greatest-width integer types */
S#if defined(__TMS320C55X__) || defined(__ARM_ARCH) || defined(_TMS320C6X) || \
S    defined(__ARP32__)      || defined(__MSP430__) || defined(__PRU__)    || \
S    defined(__C7000__)
X#if defined(__TMS320C55X__) || defined(__ARM_ARCH) || defined(_TMS320C6X) ||     defined(__ARP32__)      || defined(__MSP430__) || defined(__PRU__)    ||     defined(__C7000__)
S    typedef          long long intmax_t;
S    typedef unsigned long long uintmax_t;
S#elif defined(_TMS320C5XX)
S    typedef          long intmax_t;
S    typedef unsigned long uintmax_t;
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    typedef          long long intmax_t;
S    typedef unsigned long long uintmax_t;
S#else /* C27X or CLA */
S    typedef          long intmax_t;
S    typedef unsigned long uintmax_t;
S#endif
S#endif
S
S/* 
S   According to footnotes in the 1999 C standard, "C++ implementations
S   should define these macros only when __STDC_LIMIT_MACROS is defined
S   before <stdint.h> is included." 
S*/
S#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
S
S/* 7.18.2 Limits of specified width integer types */
S
S#if defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) || \
S    defined(__TMS320C55X_PLUS_BYTE__)          || defined(__ARP32__)  || \
S    defined(__PRU__)    || defined(__C7000__)
X#if defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) ||     defined(__TMS320C55X_PLUS_BYTE__)          || defined(__ARP32__)  ||     defined(__PRU__)    || defined(__C7000__)
S    #define  INT8_MAX   0x7f
S    #define  INT8_MIN   (-INT8_MAX-1)
S    #define UINT8_MAX   0xff
S#endif
S
S    #define  INT16_MAX  0x7fff
S    #define  INT16_MIN  (-INT16_MAX-1)
S    #define UINT16_MAX  0xffff
S
S    #define  INT32_MAX  0x7fffffff
S    #define  INT32_MIN  (-INT32_MAX-1)
S    #define UINT32_MAX  0xffffffff
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) || \
S    defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) ||     defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
S    #define  INT64_MAX  0x7fffffffffffffff
S    #define  INT64_MIN  (-INT64_MAX-1)
S    #define UINT64_MAX  0xffffffffffffffff
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    #define  INT64_MAX  0x7fffffffffffffff
S    #define  INT64_MIN  (-INT64_MAX-1)
S    #define UINT64_MAX  0xffffffffffffffff
S#endif
S#endif
S
S#if defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) || \
S    defined(__TMS320C55X_PLUS_BYTE__)          || defined(__ARP32__)  || \
S    defined(__PRU__)    || defined(__C7000__)
X#if defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__MSP430__) ||     defined(__TMS320C55X_PLUS_BYTE__)          || defined(__ARP32__)  ||     defined(__PRU__)    || defined(__C7000__)
S    #define  INT_LEAST8_MAX   (INT8_MAX)
S    #define  INT_LEAST8_MIN   (INT8_MIN)
S    #define UINT_LEAST8_MAX   (UINT8_MAX)
S#elif defined(__TMS320C2000__) || defined(_TMS320C5XX) || defined(__TMS320C55X__)
S    #define  INT_LEAST8_MAX   (INT16_MAX)
S    #define  INT_LEAST8_MIN   (INT16_MIN)
S    #define UINT_LEAST8_MAX   (UINT16_MAX)
S#endif
S
S    #define  INT_LEAST16_MAX  (INT16_MAX)
S    #define  INT_LEAST16_MIN  (INT16_MIN)
S    #define UINT_LEAST16_MAX  (UINT16_MAX)
S    #define  INT_LEAST32_MAX  (INT32_MAX)
S    #define  INT_LEAST32_MIN  (INT32_MIN)
S    #define UINT_LEAST32_MAX  (UINT32_MAX)
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) || \
S    defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) ||     defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
S    #define  INT_LEAST64_MAX  (INT64_MAX)
S    #define  INT_LEAST64_MIN  (INT64_MIN)
S    #define UINT_LEAST64_MAX  (UINT64_MAX)
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    #define  INT_LEAST64_MAX  (INT64_MAX)
S    #define  INT_LEAST64_MIN  (INT64_MIN)
S    #define UINT_LEAST64_MAX  (UINT64_MAX)
S#endif
S#endif
S
S#if defined(_TMS320C5XX) || defined(__TMS320C55X__)
S    #define  INT_FAST8_MAX   (INT16_MAX)
S    #define  INT_FAST8_MIN   (INT16_MIN)
S    #define UINT_FAST8_MAX   (UINT16_MAX)
S    #define  INT_FAST16_MAX  (INT16_MAX)
S    #define  INT_FAST16_MIN  (INT16_MIN)
S    #define UINT_FAST16_MAX  (UINT16_MAX)
S#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__ARP32__) || \
S      defined(__PRU__)    || defined(__C7000__)
X#elif defined(_TMS320C6X) || defined(__ARM_ARCH) || defined(__ARP32__) ||       defined(__PRU__)    || defined(__C7000__)
S    #define  INT_FAST8_MAX   (INT32_MAX)
S    #define  INT_FAST8_MIN   (INT32_MIN)
S    #define UINT_FAST8_MAX   (UINT32_MAX)
S    #define  INT_FAST16_MAX  (INT32_MAX)
S    #define  INT_FAST16_MIN  (INT32_MIN)
S    #define UINT_FAST16_MAX  (UINT32_MAX)
S#elif defined(__MSP430__)
S    #define  INT_FAST8_MAX    (INT16_MAX)
S    #define  INT_FAST8_MIN    (INT16_MIN)
S    #define  UINT_FAST8_MAX   (UINT16_MAX)
S    #define  INT_FAST16_MAX   (INT16_MAX)
S    #define  INT_FAST16_MIN   (INT16_MIN)
S    #define  UINT_FAST16_MAX  (UINT16_MAX)
S#elif defined (__TMS320C2000__)
S#if defined(__TMS320C28XX_CLA__)
S    #define  INT_FAST8_MAX   (INT32_MAX)
S    #define  INT_FAST8_MIN   (INT32_MIN)
S    #define UINT_FAST8_MAX   (UINT32_MAX)
S    #define  INT_FAST16_MAX  (INT32_MAX)
S    #define  INT_FAST16_MIN  (INT32_MIN)
S    #define UINT_FAST16_MAX  (UINT32_MAX)
S#else
S    #define  INT_FAST8_MAX   (INT16_MAX)
S    #define  INT_FAST8_MIN   (INT16_MIN)
S    #define UINT_FAST8_MAX   (UINT16_MAX)
S    #define  INT_FAST16_MAX  (INT16_MAX)
S    #define  INT_FAST16_MIN  (INT16_MIN)
S    #define UINT_FAST16_MAX  (UINT16_MAX)
S#endif
S#endif
S
S    #define  INT_FAST32_MAX  (INT32_MAX)
S    #define  INT_FAST32_MIN  (INT32_MIN)
S    #define UINT_FAST32_MAX  (UINT32_MAX)
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) || \
S    defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) ||     defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
S    #define  INT_FAST64_MAX  (INT64_MAX)
S    #define  INT_FAST64_MIN  (INT64_MIN)
S    #define UINT_FAST64_MAX  (UINT64_MAX)
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    #define  INT_FAST64_MAX  (INT64_MAX)
S    #define  INT_FAST64_MIN  (INT64_MIN)
S    #define UINT_FAST64_MAX  (UINT64_MAX)
S#endif
S#endif
S
S#if defined(__MSP430__) && !defined(__LARGE_CODE_MODEL__)
S    #define INTPTR_MAX   (INT16_MAX)
S    #define INTPTR_MIN   (INT16_MIN)
S    #define UINTPTR_MAX  (UINT16_MAX)
S#elif defined(__C7000__)
S    #define INTPTR_MAX   (INT64_MAX)
S    #define INTPTR_MIN   (INT64_MIN)
S    #define UINTPTR_MAX  (UINT64_MAX)
S#else
S    #define INTPTR_MAX   (INT32_MAX)
S    #define INTPTR_MIN   (INT32_MIN)
S    #define UINTPTR_MAX  (UINT32_MAX)
S#endif
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) || \
S    defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) ||     defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
S    #define INTMAX_MIN   (INT64_MIN)
S    #define INTMAX_MAX   (INT64_MAX)
S    #define UINTMAX_MAX  (UINT64_MAX)
S#elif defined(_TMS320C5XX)
S    #define INTMAX_MIN   (INT32_MIN)
S    #define INTMAX_MAX   (INT32_MAX)
S    #define UINTMAX_MAX  (UINT32_MAX)
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    #define INTMAX_MIN   (INT64_MIN)
S    #define INTMAX_MAX   (INT64_MAX)
S    #define UINTMAX_MAX  (UINT64_MAX)
S#else
S    #define INTMAX_MIN   (INT32_MIN)
S    #define INTMAX_MAX   (INT32_MAX)
S    #define UINTMAX_MAX  (UINT32_MAX)
S#endif
S#endif
S
S/* 7.18.3 Limits of other integer types */
S
S#if defined(_TMS320C5XX) || defined(__TMS320C55X__) || \
S    (defined(__MSP430__) && !defined(__LONG_PTRDIFF_T__))
X#if defined(_TMS320C5XX) || defined(__TMS320C55X__) ||     (defined(__MSP430__) && !defined(__LONG_PTRDIFF_T__))
S    #define PTRDIFF_MAX (INT16_MAX)
S    #define PTRDIFF_MIN (INT16_MIN)
S#elif defined(__TMS320C2000__) || defined(__MSP430__) || \
S      (defined(_TMS320C6X) && !defined(__C6X_MIGRATION__)) || \
S      defined(__ARM_ARCH)      || defined(__ARP32__) || defined(__PRU__)
X#elif defined(__TMS320C2000__) || defined(__MSP430__) ||       (defined(_TMS320C6X) && !defined(__C6X_MIGRATION__)) ||       defined(__ARM_ARCH)      || defined(__ARP32__) || defined(__PRU__)
S    #define PTRDIFF_MAX (INT32_MAX)
S    #define PTRDIFF_MIN (INT32_MIN)
S#elif defined(__C7000__)
S    #define PTRDIFF_MAX (INT64_MAX)
S    #define PTRDIFF_MIN (INT64_MIN)
S#endif
S
S#if defined(_TMS320C5XX) || defined(__TMS320C55X__) || defined(__MSP430__)
S    #define SIG_ATOMIC_MIN (INT16_MIN)
S    #define SIG_ATOMIC_MAX (INT16_MAX)
S#elif defined(__TMS320C2000__) || defined(_TMS320C6X) || defined(__C7000__) || \
S      defined(__ARM_ARCH)      || defined(__ARP32__)  || defined(__PRU__)
X#elif defined(__TMS320C2000__) || defined(_TMS320C6X) || defined(__C7000__) ||       defined(__ARM_ARCH)      || defined(__ARP32__)  || defined(__PRU__)
S    #define SIG_ATOMIC_MIN (INT32_MIN)
S    #define SIG_ATOMIC_MAX (INT32_MAX)
S#endif
S
S#if defined(_TMS320C5XX) || defined(__TMS320C55X__) || \
S    (defined(__MSP430__) && !defined(__LONG_PTRDIFF_T__))
X#if defined(_TMS320C5XX) || defined(__TMS320C55X__) ||     (defined(__MSP430__) && !defined(__LONG_PTRDIFF_T__))
S    #define SIZE_MAX (UINT16_MAX)
S#elif defined(__TMS320C2000__) || defined(__MSP430__) || \
S      (defined(_TMS320C6X) && !defined(__C6X_MIGRATION__)) || \
S      defined(__ARM_ARCH)      || defined(__ARP32__)  || defined(__PRU__)
X#elif defined(__TMS320C2000__) || defined(__MSP430__) ||       (defined(_TMS320C6X) && !defined(__C6X_MIGRATION__)) ||       defined(__ARM_ARCH)      || defined(__ARP32__)  || defined(__PRU__)
S    #define SIZE_MAX (UINT32_MAX)
S#elif defined(__C7000__)
S    #define SIZE_MAX (UINT64_MAX)
S#endif
S
S#ifndef WCHAR_MAX
S#if !defined(__TI_WCHAR_T_BITS__) || __TI_WCHAR_T_BITS__ == 16
S#define WCHAR_MAX 0xffffu
S#else 
S#define WCHAR_MAX 0xffffffffu
S#endif
S#endif
S
S#ifndef WCHAR_MIN
S#define WCHAR_MIN 0
S#endif
S
S#if defined(_TMS320C5XX) || defined(__TMS320C55X__) || defined(__MSP430__)
S    #define WINT_MIN (INT16_MIN)
S    #define WINT_MAX (INT16_MAX)
S#elif defined(__TMS320C2000__) || defined(_TMS320C6X) || defined(__C7000__) || \
S      defined(__ARM_ARCH)      || defined(__ARP32__)  || defined(__PRU__)
X#elif defined(__TMS320C2000__) || defined(_TMS320C6X) || defined(__C7000__) ||       defined(__ARM_ARCH)      || defined(__ARP32__)  || defined(__PRU__)
S    #define WINT_MIN (INT32_MIN)
S    #define WINT_MAX (INT32_MAX)
S#endif
S
S/* 7.18.4.1 Macros for minimum-width integer constants */
S
S/*
S   There is a defect report filed against the C99 standard concerning how 
S   the (U)INTN_C macros should be implemented.  Please refer to --
S   http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_209.htm 
S   for more information.  These macros are implemented according to the
S   suggestion given at this web site.
S*/
S
S    #define  INT8_C(value)  ((int_least8_t)(value))
S    #define UINT8_C(value)  ((uint_least8_t)(value))
S    #define  INT16_C(value) ((int_least16_t)(value))
S    #define UINT16_C(value) ((uint_least16_t)(value))
S    #define  INT32_C(value) ((int_least32_t)(value))
S    #define UINT32_C(value) ((uint_least32_t)(value))
S
S#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) || \
S    defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
X#if defined(__ARM_ARCH) || defined(_TMS320C6X) || defined(__C7000__) ||     defined(__ARP32__)  || defined(__MSP430__) || defined(__PRU__)
S    #define  INT64_C(value) ((int_least64_t)(value))
S    #define UINT64_C(value) ((uint_least64_t)(value))
S#elif defined(__TMS320C2000__)
S#if defined(__TMS320C28X__) || \
S    (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
X#if defined(__TMS320C28X__) ||     (defined(__TMS320C28XX_CLA__) && defined(__TI_EABI__))
S    #define  INT64_C(value) ((int_least64_t)(value))
S    #define UINT64_C(value) ((uint_least64_t)(value))
S#endif
S#endif
S
S/* 7.18.4.2 Macros for greatest-width integer constants */
S
S    #define  INTMAX_C(value) ((intmax_t)(value))
S    #define UINTMAX_C(value) ((uintmax_t)(value))
S
S#endif /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
N#endif
N#endif /* _STDINT_H_ */
L 46 "../system_msp432p401r.c" 2
N#include "msp.h"
L 1 "C:/ti/ccs930/ccs/ccs_base/arm/include/msp.h" 1
N/******************************************************************************
N*
N* Copyright (C) 2012 - 2017 Texas Instruments Incorporated - http://www.ti.com/ 
N*
N* Redistribution and use in source and binary forms, with or without 
N* modification, are permitted provided that the following conditions 
N* are met:
N*
N*  Redistributions of source code must retain the above copyright 
N*  notice, this list of conditions and the following disclaimer.
N*
N*  Redistributions in binary form must reproduce the above copyright
N*  notice, this list of conditions and the following disclaimer in the 
N*  documentation and/or other materials provided with the   
N*  distribution.
N*
N*  Neither the name of Texas Instruments Incorporated nor the names of
N*  its contributors may be used to endorse or promote products derived
N*  from this software without specific prior written permission.
N*
N* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
N* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
N* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
N* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
N* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
N* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
N* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
N* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N*
N* MSP432 Family Generic Include File
N*
N* File creation date: 12/06/17
N*
N******************************************************************************/
N
N#ifndef __MSP432_H__
N#define __MSP432_H__
N
N/******************************************************************************
N* MSP432 devices                                                              *
N******************************************************************************/
N#if defined (__MSP432P401R__)
X#if 1L
N#include "msp432p401r.h"
L 1 "C:\ti\ccs930\ccs\ccs_base\arm\include\msp432p401r.h" 1
N/******************************************************************************
N*
N* Copyright (C) 2012 - 2017 Texas Instruments Incorporated - http://www.ti.com/
N*
N* Redistribution and use in source and binary forms, with or without
N* modification, are permitted provided that the following conditions
N* are met:
N*
N*  Redistributions of source code must retain the above copyright
N*  notice, this list of conditions and the following disclaimer.
N*
N*  Redistributions in binary form must reproduce the above copyright
N*  notice, this list of conditions and the following disclaimer in the
N*  documentation and/or other materials provided with the
N*  distribution.
N*
N*  Neither the name of Texas Instruments Incorporated nor the names of
N*  its contributors may be used to endorse or promote products derived
N*  from this software without specific prior written permission.
N*
N* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N*
N* MSP432P401R Register Definitions
N*
N* This file includes CMSIS compliant component and register definitions
N*
N* For legacy components the definitions that are compatible with MSP430 code,
N* are included with msp432p401r_classic.h
N* 
N* With CMSIS definitions, the register defines have been reformatted:
N*     ModuleName[ModuleInstance]->RegisterName
N*
N* Writing to CMSIS bit fields can be done through register level
N* or via bitband area access:
N*  - ADC14->CTL0 |= ADC14_CTL0_ENC;
N*  - BITBAND_PERI(ADC14->CTL0, ADC14_CTL0_ENC_OFS) = 1;
N*
N* File creation date: 2017-12-06
N*
N******************************************************************************/
N
N#ifndef __MSP432P401R_H__
N#define __MSP432P401R_H__
N
N/* Use standard integer types with explicit width */
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N#define __MSP432_HEADER_VERSION__ 3230
N
N/* Remap MSP432 intrinsics to ARM equivalents */
N#include "msp_compatibility.h"
L 1 "C:\ti\ccs930\ccs\ccs_base\arm\include\msp_compatibility.h" 1
N//*****************************************************************************
N//
N// Copyright (C) 2013 - 2015 Texas Instruments Incorporated - http://www.ti.com/
N//
N// Redistribution and use in source and binary forms, with or without
N// modification, are permitted provided that the following conditions
N// are met:
N//
N//  Redistributions of source code must retain the above copyright
N//  notice, this list of conditions and the following disclaimer.
N//
N//  Redistributions in binary form must reproduce the above copyright
N//  notice, this list of conditions and the following disclaimer in the
N//  documentation and/or other materials provided with the
N//  distribution.
N//
N//  Neither the name of Texas Instruments Incorporated nor the names of
N//  its contributors may be used to endorse or promote products derived
N//  from this software without specific prior written permission.
N//
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N//
N// MSP430 intrinsic redefinitions for use with MSP432 Family Devices
N//
N//****************************************************************************
N
N/******************************************************************************
N* Definitions for 8/16/32-bit wide memory access                              *
N******************************************************************************/
N#define HWREG8(x)         (*((volatile uint8_t *)(x)))
N#define HWREG16(x)        (*((volatile uint16_t *)(x)))
N#define HWREG32(x)        (*((volatile uint32_t *)(x)))
N#define HWREG(x)          (HWREG16(x))
N#define HWREG8_L(x)       (*((volatile uint8_t *)((uint8_t *)&x)))
N#define HWREG8_H(x)       (*((volatile uint8_t *)(((uint8_t *)&x)+1)))
N#define HWREG16_L(x)      (*((volatile uint16_t *)((uint16_t *)&x)))
N#define HWREG16_H(x)      (*((volatile uint16_t *)(((uint16_t *)&x)+1)))
N
N/******************************************************************************
N* Definitions for 8/16/32-bit wide bit band access                            *
N******************************************************************************/
N#define HWREGBIT8(x, b)   (HWREG8(((uint32_t)(x) & 0xF0000000) | 0x02000000 | (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2)))
N#define HWREGBIT16(x, b)  (HWREG16(((uint32_t)(x) & 0xF0000000) | 0x02000000 | (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2)))
N#define HWREGBIT32(x, b)  (HWREG32(((uint32_t)(x) & 0xF0000000) | 0x02000000 | (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2)))
N
N// Intrinsics with ARM equivalents
N#if defined ( __TI_ARM__ ) /* TI CGT Compiler */
X#if 1L  
N
N#define __sleep()                       __wfi()
N#define __deep_sleep()                  { (*((volatile uint32_t *)(0xE000ED10))) |= 0x00000004; __wfi(); (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000004; }
N#define __low_power_mode_off_on_exit()  { (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000002; }
N#define __get_SP_register()             __get_MSP()
N#define __set_SP_register(x)            __set_MSP(x)
N#define __get_interrupt_state()         __get_PRIMASK()
N#define __set_interrupt_state(x)        __set_PRIMASK(x)
N#define __enable_interrupt()            _enable_IRQ()
N#define __enable_interrupts()           _enable_IRQ()
N#define __disable_interrupt()           _disable_IRQ()
N#define __disable_interrupts()          _disable_IRQ()
N#define __no_operation()                __asm("  nop")
N
N#elif defined ( __ICCARM__ )  /* IAR Compiler */
S
S#include <stdint.h>
S
S#define __INLINE                        inline
S#define __sleep()                       __WFI()
S#define __deep_sleep()                  { (*((volatile uint32_t *)(0xE000ED10))) |= 0x00000004; __WFI(); (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000004; }
S#define __low_power_mode_off_on_exit()  { (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000002; }
S
S#if (__VER__ < 8020002)
S#define __get_SP_register()             __get_MSP()
S#define __set_SP_register()             __set_MSP()
S#define __get_interrupt_state()         __get_PRIMASK()
S#define __set_interrupt_state(x)        __set_PRIMASK(x)
S#define __enable_interrupt()            __asm("  cpsie i")
S#define __enable_interrupts()           __asm("  cpsie i")
S#define __disable_interrupt()           __asm("  cpsid i")
S#define __disable_interrupts()          __asm("  cpsid i")
S#define __no_operation()                __asm("  nop")
S#endif
S
S// Intrinsics without ARM equivalents
S#define __bcd_add_short(x,y)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bcd_add_long(x,y)             { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bcd_add_long_long(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __even_in_range(x,y)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_char(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_short(x,y)       { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_long(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __never_executed()              { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __op_code()                     { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __code_distance()               { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bic_SR_register(x)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bis_SR_register(x)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bis_SR_register_on_exit(x)    { while(1); /* Using not-supported MSP430 intrinsic. Recommended to write to SCS_SCR register. */ }
S#define __bic_SR_register_on_exit(x)    { while(1); /* Using not-supported MSP430 intrinsic. Recommended to write to SCS_SCR register. */ }
S#define __delay_cycles(x)               { while(1); /* Using not-supported MSP430 intrinsic. Recommended to use a timer or a custom for loop. */ }
S
S#elif defined ( __CC_ARM ) /* ARM Compiler */
S
S#define __sleep()                       __wfi()
S#define __deep_sleep()                  { (*((volatile uint32_t *)(0xE000ED10))) |= 0x00000004; __wfi(); (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000004; }
S#define __low_power_mode_off_on_exit()  { (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000002; }
S#define __get_SP_register()             __get_MSP()
S#define __set_SP_register(x)            __set_MSP(x)
S#define __get_interrupt_state()         __get_PRIMASK()
S#define __set_interrupt_state(x)        __set_PRIMASK(x)
S#define __enable_interrupt()            __asm("  cpsie i")
S#define __enable_interrupts()           __asm("  cpsie i")
S#define __disable_interrupt()           __asm("  cpsid i")
S#define __disable_interrupts()          __asm("  cpsid i")
S#define __no_operation()                __asm("  nop")
S
S// Intrinsics without ARM equivalents
S#define __bcd_add_short(x,y)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bcd_add_long(x,y)             { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bcd_add_long_long(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __even_in_range(x,y)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_char(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_short(x,y)       { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_long(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __never_executed()              { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __op_code()                     { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __code_distance()               { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bic_SR_register(x)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bis_SR_register(x)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bis_SR_register_on_exit(x)    { while(1); /* Using not-supported MSP430 intrinsic. Recommended to write to SCS_SCR register. */ }
S#define __bic_SR_register_on_exit(x)    { while(1); /* Using not-supported MSP430 intrinsic. Recommended to write to SCS_SCR register. */ }
S#define __delay_cycles(x)               { while(1); /* Using not-supported MSP430 intrinsic. Recommended to use a timer or a custom for loop. */ }
S
S#elif defined ( __GNUC__ ) /* GCC Compiler */
S#undef __wfi
S#define __wfi()                         __asm("  wfi")
S#define __sleep()                       __wfi()
S#define __deep_sleep()                  { (*((volatile uint32_t *)(0xE000ED10))) |= 0x00000004; __wfi(); (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000004; }
S#define __low_power_mode_off_on_exit()  { (*((volatile uint32_t *)(0xE000ED10))) &= ~0x00000002; }
S#define __get_SP_register()             __get_MSP()
S#define __set_SP_register(x)            __set_MSP(x)
S#define __get_interrupt_state()         __get_PRIMASK()
S#define __set_interrupt_state(x)        __set_PRIMASK(x)
S#define __enable_interrupt()            __asm("  cpsie i")
S#define __enable_interrupts()           __asm("  cpsie i")
S#define __disable_interrupt()           __asm("  cpsid i")
S#define __disable_interrupts()          __asm("  cpsid i")
S#define __no_operation()                __asm("  nop")
S
S// Intrinsics without ARM equivalents
S#define __bcd_add_short(x,y)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bcd_add_long(x,y)             { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bcd_add_long_long(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __even_in_range(x,y)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_char(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_short(x,y)       { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __data20_write_long(x,y)        { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __never_executed()              { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __op_code()                     { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __code_distance()               { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bic_SR_register(x)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bis_SR_register(x)            { while(1); /* Using not-supported MSP430 intrinsic. No replacement available. */ }
S#define __bis_SR_register_on_exit(x)    { while(1); /* Using not-supported MSP430 intrinsic. Recommended to write to SCS_SCR register. */ }
S#define __bic_SR_register_on_exit(x)    { while(1); /* Using not-supported MSP430 intrinsic. Recommended to write to SCS_SCR register. */ }
S#define __delay_cycles(x)               { while(1); /* Using not-supported MSP430 intrinsic. Recommended to use a timer or a custom for loop. */ }
S
N#endif
N
N// Intrinsics without ARM equivalents
N#define __low_power_mode_0()            { __sleep(); }
N#define __low_power_mode_1()            { __sleep(); }
N#define __low_power_mode_2()            { __sleep(); }
N#define __low_power_mode_3()            { __deep_sleep(); }
N#define __low_power_mode_4()            { __deep_sleep(); }
N#define __data16_read_addr(x)           (*((volatile uint32_t *)(x)))
N#define __data20_read_char(x)           (*((volatile uint8_t *)(x)))
N#define __data20_read_short(x)          (*((volatile uint16_t *)(x)))
N#define __data20_read_long(x)           (*((volatile uint32_t *)(x)))
N#define __data16_write_addr(x,y)        { (*((volatile uint32_t *)(x))) }
N#define __get_SR_register()             0
N#define __get_SR_register_on_exit()     0
N
N// the following defines are deprecated and will be removed in future releases
N#define ATLBASE                                  ALTBASE
N#define CS_CTL1_SELM_7                           ((uint32_t)0x00000007)          /*!< for future use. Defaults to DCOCLK. Not recommended for use to ensure future  */
N                                                                                 /* compatibilities. */
N#define CS_CTL1_SELS_7                           ((uint32_t)0x00000070)          /*!< for furture use. Defaults to DCOCLK. Do not use to ensure future  */
N                                                                                 /* compatibilities. */
N#define CS_CTL1_SELA_3                           ((uint32_t)0x00000300)          /*!< for future use. Defaults to REFOCLK. Not recommended for use to ensure future  */
N                                                                                 /* compatibilities. */
N#define CS_CTL1_SELA_4                           ((uint32_t)0x00000400)          /*!< for future use. Defaults to REFOCLK. Not recommended for use to ensure future  */
N                                                                                 /* compatibilities. */
N#define CS_CTL1_SELA_5                           ((uint32_t)0x00000500)          /*!< for future use. Defaults to REFOCLK. Not recommended for use to ensure future  */
N                                                                                 /* compatibilities. */
N#define CS_CTL1_SELA_6                           ((uint32_t)0x00000600)          /*!< for future use. Defaults to REFOCLK. Not recommended for use to ensure future  */
N                                                                                 /* compatibilities. */
N#define CS_CTL1_SELA_7                           ((uint32_t)0x00000700)          /*!< for future use. Defaults to REFOCLK. Not recommended for use to ensure future  */
N                                                                                 /* compatibilities. */
N                                                                                 /* CS_CTL2[LFXTAGCOFF] Bits */
N#define CS_CTL2_LFXTAGCOFF_OFS                   ( 7)                            /*!< LFXTAGCOFF Bit Offset */
N#define CS_CTL2_LFXTAGCOFF                       ((uint32_t)0x00000080)          /*!< Disables the automatic gain control of the LFXT crystal */
N
N/* CS_CTL3[FCNTHF2] Bits */
N#define CS_CTL3_FCNTHF2_OFS                      ( 8)                            /*!< FCNTHF2 Bit Offset */
N#define CS_CTL3_FCNTHF2_MASK                     ((uint32_t)0x00000300)          /*!< FCNTHF2 Bit Mask */
N#define CS_CTL3_FCNTHF20                         ((uint32_t)0x00000100)          /*!< FCNTHF2 Bit 0 */
N#define CS_CTL3_FCNTHF21                         ((uint32_t)0x00000200)          /*!< FCNTHF2 Bit 1 */
N#define CS_CTL3_FCNTHF2_0                        ((uint32_t)0x00000000)          /*!< 2048 cycles */
N#define CS_CTL3_FCNTHF2_1                        ((uint32_t)0x00000100)          /*!< 4096 cycles */
N#define CS_CTL3_FCNTHF2_2                        ((uint32_t)0x00000200)          /*!< 8192 cycles */
N#define CS_CTL3_FCNTHF2_3                        ((uint32_t)0x00000300)          /*!< 16384 cycles */
N#define CS_CTL3_FCNTHF2__2048                    ((uint32_t)0x00000000)          /*!< 2048 cycles */
N#define CS_CTL3_FCNTHF2__4096                    ((uint32_t)0x00000100)          /*!< 4096 cycles */
N#define CS_CTL3_FCNTHF2__8192                    ((uint32_t)0x00000200)          /*!< 8192 cycles */
N#define CS_CTL3_FCNTHF2__16384                   ((uint32_t)0x00000300)          /*!< 16384 cycles */
N/* CS_CTL3[RFCNTHF2] Bits */
N#define CS_CTL3_RFCNTHF2_OFS                     (10)                            /*!< RFCNTHF2 Bit Offset */
N#define CS_CTL3_RFCNTHF2                         ((uint32_t)0x00000400)          /*!< Reset start fault counter for HFXT2 */
N/* CS_CTL3[FCNTHF2_EN] Bits */
N#define CS_CTL3_FCNTHF2_EN_OFS                   (11)                            /*!< FCNTHF2_EN Bit Offset */
N#define CS_CTL3_FCNTHF2_EN                       ((uint32_t)0x00000800)          /*!< Enable start fault counter for HFXT2 */
N/* CS_STAT[HFXT2_ON] Bits */
N#define CS_STAT_HFXT2_ON_OFS                     ( 3)                            /*!< HFXT2_ON Bit Offset */
N#define CS_STAT_HFXT2_ON                         ((uint32_t)0x00000008)          /*!< HFXT2 status */
N/* CS_IE[HFXT2IE] Bits */
N#define CS_IE_HFXT2IE_OFS                        ( 2)                            /*!< HFXT2IE Bit Offset */
N#define CS_IE_HFXT2IE                            ((uint32_t)0x00000004)          /*!< HFXT2 oscillator fault flag interrupt enable */
N/* CS_IE[FCNTHF2IE] Bits */
N#define CS_IE_FCNTHF2IE_OFS                      (10)                            /*!< FCNTHF2IE Bit Offset */
N#define CS_IE_FCNTHF2IE                          ((uint32_t)0x00000400)          /*!< Start fault counter interrupt enable HFXT2 */
N/* CS_IE[PLLOOLIE] Bits */
N#define CS_IE_PLLOOLIE_OFS                       (12)                            /*!< PLLOOLIE Bit Offset */
N#define CS_IE_PLLOOLIE                           ((uint32_t)0x00001000)          /*!< PLL out-of-lock interrupt enable */
N/* CS_IE[PLLLOSIE] Bits */
N#define CS_IE_PLLLOSIE_OFS                       (13)                            /*!< PLLLOSIE Bit Offset */
N#define CS_IE_PLLLOSIE                           ((uint32_t)0x00002000)          /*!< PLL loss-of-signal interrupt enable */
N/* CS_IE[PLLOORIE] Bits */
N#define CS_IE_PLLOORIE_OFS                       (14)                            /*!< PLLOORIE Bit Offset */
N#define CS_IE_PLLOORIE                           ((uint32_t)0x00004000)          /*!< PLL out-of-range interrupt enable */
N/* CS_IE[CALIE] Bits */
N#define CS_IE_CALIE_OFS                          (15)                            /*!< CALIE Bit Offset */
N#define CS_IE_CALIE                              ((uint32_t)0x00008000)          /*!< REFCNT period counter interrupt enable */
N/* CS_IFG[HFXT2IFG] Bits */
N#define CS_IFG_HFXT2IFG_OFS                      ( 2)                            /*!< HFXT2IFG Bit Offset */
N#define CS_IFG_HFXT2IFG                          ((uint32_t)0x00000004)          /*!< HFXT2 oscillator fault flag */
N/* CS_IFG[FCNTHF2IFG] Bits */
N#define CS_IFG_FCNTHF2IFG_OFS                    (11)                            /*!< FCNTHF2IFG Bit Offset */
N#define CS_IFG_FCNTHF2IFG                        ((uint32_t)0x00000800)          /*!< Start fault counter interrupt flag HFXT2 */
N/* CS_IFG[PLLOOLIFG] Bits */
N#define CS_IFG_PLLOOLIFG_OFS                     (12)                            /*!< PLLOOLIFG Bit Offset */
N#define CS_IFG_PLLOOLIFG                         ((uint32_t)0x00001000)          /*!< PLL out-of-lock interrupt flag */
N/* CS_IFG[PLLLOSIFG] Bits */
N#define CS_IFG_PLLLOSIFG_OFS                     (13)                            /*!< PLLLOSIFG Bit Offset */
N#define CS_IFG_PLLLOSIFG                         ((uint32_t)0x00002000)          /*!< PLL loss-of-signal interrupt flag */
N/* CS_IFG[PLLOORIFG] Bits */
N#define CS_IFG_PLLOORIFG_OFS                     (14)                            /*!< PLLOORIFG Bit Offset */
N#define CS_IFG_PLLOORIFG                         ((uint32_t)0x00004000)          /*!< PLL out-of-range interrupt flag */
N/* CS_IFG[CALIFG] Bits */
N#define CS_IFG_CALIFG_OFS                        (15)                            /*!< CALIFG Bit Offset */
N#define CS_IFG_CALIFG                            ((uint32_t)0x00008000)          /*!< REFCNT period counter expired */
N/* CS_CLRIFG[CLR_HFXT2IFG] Bits */
N#define CS_CLRIFG_CLR_HFXT2IFG_OFS               ( 2)                            /*!< CLR_HFXT2IFG Bit Offset */
N#define CS_CLRIFG_CLR_HFXT2IFG                   ((uint32_t)0x00000004)          /*!< Clear HFXT2 oscillator fault interrupt flag */
N/* CS_CLRIFG[CLR_CALIFG] Bits */
N#define CS_CLRIFG_CLR_CALIFG_OFS                 (15)                            /*!< CLR_CALIFG Bit Offset */
N#define CS_CLRIFG_CLR_CALIFG                     ((uint32_t)0x00008000)          /*!< REFCNT period counter clear interrupt flag */
N/* CS_CLRIFG[CLR_FCNTHF2IFG] Bits */
N#define CS_CLRIFG_CLR_FCNTHF2IFG_OFS             (10)                            /*!< CLR_FCNTHF2IFG Bit Offset */
N#define CS_CLRIFG_CLR_FCNTHF2IFG                 ((uint32_t)0x00000400)          /*!< Start fault counter clear interrupt flag HFXT2 */
N/* CS_CLRIFG[CLR_PLLOOLIFG] Bits */
N#define CS_CLRIFG_CLR_PLLOOLIFG_OFS              (12)                            /*!< CLR_PLLOOLIFG Bit Offset */
N#define CS_CLRIFG_CLR_PLLOOLIFG                  ((uint32_t)0x00001000)          /*!< PLL out-of-lock clear interrupt flag */
N/* CS_CLRIFG[CLR_PLLLOSIFG] Bits */
N#define CS_CLRIFG_CLR_PLLLOSIFG_OFS              (13)                            /*!< CLR_PLLLOSIFG Bit Offset */
N#define CS_CLRIFG_CLR_PLLLOSIFG                  ((uint32_t)0x00002000)          /*!< PLL loss-of-signal clear interrupt flag */
N/* CS_CLRIFG[CLR_PLLOORIFG] Bits */
N#define CS_CLRIFG_CLR_PLLOORIFG_OFS              (14)                            /*!< CLR_PLLOORIFG Bit Offset */
N#define CS_CLRIFG_CLR_PLLOORIFG                  ((uint32_t)0x00004000)          /*!< PLL out-of-range clear interrupt flag */
N/* CS_SETIFG[SET_HFXT2IFG] Bits */
N#define CS_SETIFG_SET_HFXT2IFG_OFS               ( 2)                            /*!< SET_HFXT2IFG Bit Offset */
N#define CS_SETIFG_SET_HFXT2IFG                   ((uint32_t)0x00000004)          /*!< Set HFXT2 oscillator fault interrupt flag */
N/* CS_SETIFG[SET_CALIFG] Bits */
N#define CS_SETIFG_SET_CALIFG_OFS                 (15)                            /*!< SET_CALIFG Bit Offset */
N#define CS_SETIFG_SET_CALIFG                     ((uint32_t)0x00008000)          /*!< REFCNT period counter set interrupt flag */
N/* CS_SETIFG[SET_FCNTHF2IFG] Bits */
N#define CS_SETIFG_SET_FCNTHF2IFG_OFS             (10)                            /*!< SET_FCNTHF2IFG Bit Offset */
N#define CS_SETIFG_SET_FCNTHF2IFG                 ((uint32_t)0x00000400)          /*!< Start fault counter set interrupt flag HFXT2 */
N/* CS_SETIFG[SET_PLLOOLIFG] Bits */
N#define CS_SETIFG_SET_PLLOOLIFG_OFS              (12)                            /*!< SET_PLLOOLIFG Bit Offset */
N#define CS_SETIFG_SET_PLLOOLIFG                  ((uint32_t)0x00001000)          /*!< PLL out-of-lock set interrupt flag */
N/* CS_SETIFG[SET_PLLLOSIFG] Bits */
N#define CS_SETIFG_SET_PLLLOSIFG_OFS              (13)                            /*!< SET_PLLLOSIFG Bit Offset */
N#define CS_SETIFG_SET_PLLLOSIFG                  ((uint32_t)0x00002000)          /*!< PLL loss-of-signal set interrupt flag */
N/* CS_SETIFG[SET_PLLOORIFG] Bits */
N#define CS_SETIFG_SET_PLLOORIFG_OFS              (14)                            /*!< SET_PLLOORIFG Bit Offset */
N#define CS_SETIFG_SET_PLLOORIFG                  ((uint32_t)0x00004000)          /*!< PLL out-of-range set interrupt flag */
N
N/* EUSCI_x_CTLW0[SSEL] Bits */
N#define EUSCI_A_CTLW0_SSEL_0                     ((uint16_t)0x0000)              /*!< Reserved */
N#define EUSCI_B_CTLW0_SSEL_0                     ((uint16_t)0x0000)              /*!< Reserved */
N#define EUSCI_B_CTLW0_SSEL_3                     ((uint16_t)0x00C0)              /*!< SMCLK */
N
N/* RSTCTL_PSSRESET_STAT[SVSL] Bits */
N#define RSTCTL_PSSRESET_STAT_SVSL_OFS            ( 0)                            /*!< SVSL Bit Offset */
N#define RSTCTL_PSSRESET_STAT_SVSL                ((uint32_t)0x00000001)          /*!< Indicates if POR was caused by an SVSL trip condition in the PSS */
N
N/* SYSCTL_SYSTEM_STAT[DBG_SEC_ACT] Bits */
N#define SYSCTL_SYSTEM_STAT_DBG_SEC_ACT_OFS       ( 3)                            /*!< DBG_SEC_ACT Bit Offset */
N#define SYSCTL_SYSTEM_STAT_DBG_SEC_ACT           ((uint32_t)0x00000008)          /*!< Debug Security active */
N/* SYSCTL_SYSTEM_STAT[JTAG_SWD_LOCK_ACT] Bits */
N#define SYSCTL_SYSTEM_STAT_JTAG_SWD_LOCK_ACT_OFS ( 4)                            /*!< JTAG_SWD_LOCK_ACT Bit Offset */
N#define SYSCTL_SYSTEM_STAT_JTAG_SWD_LOCK_ACT     ((uint32_t)0x00000010)          /*!< Indicates if JTAG and SWD Lock is active */
N/* SYSCTL_SYSTEM_STAT[IP_PROT_ACT] Bits */
N#define SYSCTL_SYSTEM_STAT_IP_PROT_ACT_OFS       ( 5)                            /*!< IP_PROT_ACT Bit Offset */
N#define SYSCTL_SYSTEM_STAT_IP_PROT_ACT           ((uint32_t)0x00000020)          /*!< Indicates if IP protection is active */
N
L 66 "C:\ti\ccs930\ccs\ccs_base\arm\include\msp432p401r.h" 2
N
N/******************************************************************************
N* include MSP430 legacy definitions to make porting of code from MSP430       *
N* code base easier                                                            *
N* With fully CMSIS compliant code, NO_MSP_CLASSIC_DEFINES may be defined in   *
N* your project to omit including the classic defines                          *
N******************************************************************************/
N#ifndef NO_MSP_CLASSIC_DEFINES
N#include "msp432p401r_classic.h"
L 1 "C:\ti\ccs930\ccs\ccs_base\arm\include\msp432p401r_classic.h" 1
N/******************************************************************************
N*
N* Copyright (C) 2012 - 2017 Texas Instruments Incorporated - http://www.ti.com/
N*
N* Redistribution and use in source and binary forms, with or without
N* modification, are permitted provided that the following conditions
N* are met:
N*
N*  Redistributions of source code must retain the above copyright
N*  notice, this list of conditions and the following disclaimer.
N*
N*  Redistributions in binary form must reproduce the above copyright
N*  notice, this list of conditions and the following disclaimer in the
N*  documentation and/or other materials provided with the
N*  distribution.
N*
N*  Neither the name of Texas Instruments Incorporated nor the names of
N*  its contributors may be used to endorse or promote products derived
N*  from this software without specific prior written permission.
N*
N* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N*
N* MSP432P401R Register Definitions
N*
N* This file includes MSP430 style component and register definitions
N* for legacy components re-used in MSP432
N*
N* File creation date: 2017-12-06
N*
N******************************************************************************/
N
N#ifndef __MSP432P401R_CLASSIC_H__
N#define __MSP432P401R_CLASSIC_H__
N
N/* Use standard integer types with explicit width */
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/******************************************************************************
N* Device memory map                                                           *
N******************************************************************************/
N#define __MAIN_MEMORY_START__                              (0x00000000)          /*!< Main Flash memory start address */
N#define __MAIN_MEMORY_END__                                (0x0003FFFF)          /*!< Main Flash memory end address */
N#define __BSL_MEMORY_START__                               (0x00202000)          /*!< BSL memory start address */
N#define __BSL_MEMORY_END__                                 (0x00203FFF)          /*!< BSL memory end address */
N#define __SRAM_START__                                     (0x20000000)          /*!< SRAM memory start address */
N#define __SRAM_END__                                       (0x2000FFFF)          /*!< SRAM memory end address */
N
N/******************************************************************************
N* MSP-format peripheral registers                                             *
N******************************************************************************/
N
N/******************************************************************************
N* AES256 Registers
N******************************************************************************/
N#define AESACTL0                                 (HWREG16(0x40003C00))           /*!< AES Accelerator Control Register 0 */
N#define AESACTL1                                 (HWREG16(0x40003C02))           /*!< AES Accelerator Control Register 1 */
N#define AESASTAT                                 (HWREG16(0x40003C04))           /*!< AES Accelerator Status Register */
N#define AESAKEY                                  (HWREG16(0x40003C06))           /*!< AES Accelerator Key Register */
N#define AESADIN                                  (HWREG16(0x40003C08))           /*!< AES Accelerator Data In Register */
N#define AESADOUT                                 (HWREG16(0x40003C0A))           /*!< AES Accelerator Data Out Register */
N#define AESAXDIN                                 (HWREG16(0x40003C0C))           /*!< AES Accelerator XORed Data In Register */
N#define AESAXIN                                  (HWREG16(0x40003C0E))           /*!< AES Accelerator XORed Data In Register */
N
N/* Register offsets from AES256_BASE address */
N#define OFS_AESACTL0                                       (0x0000)              /*!< AES Accelerator Control Register 0 */
N#define OFS_AESACTL1                                       (0x0002)              /*!< AES Accelerator Control Register 1 */
N#define OFS_AESASTAT                                       (0x0004)              /*!< AES Accelerator Status Register */
N#define OFS_AESAKEY                                        (0x0006)              /*!< AES Accelerator Key Register */
N#define OFS_AESADIN                                        (0x0008)              /*!< AES Accelerator Data In Register */
N#define OFS_AESADOUT                                       (0x000A)              /*!< AES Accelerator Data Out Register */
N#define OFS_AESAXDIN                                       (0x000C)              /*!< AES Accelerator XORed Data In Register */
N#define OFS_AESAXIN                                        (0x000E)              /*!< AES Accelerator XORed Data In Register */
N
N
N/******************************************************************************
N* CAPTIO0 Registers
N******************************************************************************/
N#define CAPTIO0CTL                               (HWREG16(0x4000540E))           /*!< Capacitive Touch IO x Control Register */
N
N/* Register offsets from CAPTIO0_BASE address */
N#define OFS_CAPTIO0CTL                                     (0x000E)              /*!< Capacitive Touch IO x Control Register */
N
N#define CAPTIO0CTL_L                                       (HWREG8_L(CAPTIO0CTL))/* Capacitive Touch IO x Control Register */
N#define CAPTIO0CTL_H                                       (HWREG8_H(CAPTIO0CTL))/* Capacitive Touch IO x Control Register */
N
N/******************************************************************************
N* CAPTIO1 Registers
N******************************************************************************/
N#define CAPTIO1CTL                               (HWREG16(0x4000580E))           /*!< Capacitive Touch IO x Control Register */
N
N/* Register offsets from CAPTIO1_BASE address */
N#define OFS_CAPTIO1CTL                                     (0x000E)              /*!< Capacitive Touch IO x Control Register */
N
N#define CAPTIO1CTL_L                                       (HWREG8_L(CAPTIO1CTL))/* Capacitive Touch IO x Control Register */
N#define CAPTIO1CTL_H                                       (HWREG8_H(CAPTIO1CTL))/* Capacitive Touch IO x Control Register */
N
N/******************************************************************************
N* COMP_E0 Registers
N******************************************************************************/
N#define CE0CTL0                                  (HWREG16(0x40003400))           /*!< Comparator Control Register 0 */
N#define CE0CTL1                                  (HWREG16(0x40003402))           /*!< Comparator Control Register 1 */
N#define CE0CTL2                                  (HWREG16(0x40003404))           /*!< Comparator Control Register 2 */
N#define CE0CTL3                                  (HWREG16(0x40003406))           /*!< Comparator Control Register 3 */
N#define CE0INT                                   (HWREG16(0x4000340C))           /*!< Comparator Interrupt Control Register */
N#define CE0IV                                    (HWREG16(0x4000340E))           /*!< Comparator Interrupt Vector Word Register */
N
N/* Register offsets from COMP_E0_BASE address */
N#define OFS_CE0CTL0                                        (0x0000)              /*!< Comparator Control Register 0 */
N#define OFS_CE0CTL1                                        (0x0002)              /*!< Comparator Control Register 1 */
N#define OFS_CE0CTL2                                        (0x0004)              /*!< Comparator Control Register 2 */
N#define OFS_CE0CTL3                                        (0x0006)              /*!< Comparator Control Register 3 */
N#define OFS_CE0INT                                         (0x000C)              /*!< Comparator Interrupt Control Register */
N#define OFS_CE0IV                                          (0x000E)              /*!< Comparator Interrupt Vector Word Register */
N
N
N/******************************************************************************
N* COMP_E1 Registers
N******************************************************************************/
N#define CE1CTL0                                  (HWREG16(0x40003800))           /*!< Comparator Control Register 0 */
N#define CE1CTL1                                  (HWREG16(0x40003802))           /*!< Comparator Control Register 1 */
N#define CE1CTL2                                  (HWREG16(0x40003804))           /*!< Comparator Control Register 2 */
N#define CE1CTL3                                  (HWREG16(0x40003806))           /*!< Comparator Control Register 3 */
N#define CE1INT                                   (HWREG16(0x4000380C))           /*!< Comparator Interrupt Control Register */
N#define CE1IV                                    (HWREG16(0x4000380E))           /*!< Comparator Interrupt Vector Word Register */
N
N/* Register offsets from COMP_E1_BASE address */
N#define OFS_CE1CTL0                                        (0x0000)              /*!< Comparator Control Register 0 */
N#define OFS_CE1CTL1                                        (0x0002)              /*!< Comparator Control Register 1 */
N#define OFS_CE1CTL2                                        (0x0004)              /*!< Comparator Control Register 2 */
N#define OFS_CE1CTL3                                        (0x0006)              /*!< Comparator Control Register 3 */
N#define OFS_CE1INT                                         (0x000C)              /*!< Comparator Interrupt Control Register */
N#define OFS_CE1IV                                          (0x000E)              /*!< Comparator Interrupt Vector Word Register */
N
N
N/******************************************************************************
N* CRC32 Registers
N******************************************************************************/
N#define CRC32DI                                  (HWREG16(0x40004000))           /*!< Data Input for CRC32 Signature Computation */
N#define CRC32DIRB                                (HWREG16(0x40004004))           /*!< Data In Reverse for CRC32 Computation */
N#define CRC32INIRES_LO                           (HWREG16(0x40004008))           /*!< CRC32 Initialization and Result, lower 16 bits */
N#define CRC32INIRES_HI                           (HWREG16(0x4000400A))           /*!< CRC32 Initialization and Result, upper 16 bits */
N#define CRC32RESR_LO                             (HWREG16(0x4000400C))           /*!< CRC32 Result Reverse, lower 16 bits */
N#define CRC32RESR_HI                             (HWREG16(0x4000400E))           /*!< CRC32 Result Reverse, Upper 16 bits */
N#define CRC16DI                                  (HWREG16(0x40004010))           /*!< Data Input for CRC16 computation */
N#define CRC16DIRB                                (HWREG16(0x40004014))           /*!< CRC16 Data In Reverse */
N#define CRC16INIRES                              (HWREG16(0x40004018))           /*!< CRC16 Initialization and Result register */
N#define CRC16RESR                                (HWREG16(0x4000401E))           /*!< CRC16 Result Reverse */
N
N/* Register offsets from CRC32_BASE address */
N#define OFS_CRC32DI                                        (0x0000)              /*!< Data Input for CRC32 Signature Computation */
N#define OFS_CRC32DIRB                                      (0x0004)              /*!< Data In Reverse for CRC32 Computation */
N#define OFS_CRC32INIRES_LO                                 (0x0008)              /*!< CRC32 Initialization and Result, lower 16 bits */
N#define OFS_CRC32INIRES_HI                                 (0x000A)              /*!< CRC32 Initialization and Result, upper 16 bits */
N#define OFS_CRC32RESR_LO                                   (0x000C)              /*!< CRC32 Result Reverse, lower 16 bits */
N#define OFS_CRC32RESR_HI                                   (0x000E)              /*!< CRC32 Result Reverse, Upper 16 bits */
N#define OFS_CRC16DI                                        (0x0010)              /*!< Data Input for CRC16 computation */
N#define OFS_CRC16DIRB                                      (0x0014)              /*!< CRC16 Data In Reverse */
N#define OFS_CRC16INIRES                                    (0x0018)              /*!< CRC16 Initialization and Result register */
N#define OFS_CRC16RESR                                      (0x001E)              /*!< CRC16 Result Reverse */
N
N
N/******************************************************************************
N* DIO Registers
N******************************************************************************/
N#define PAIN                                     (HWREG16(0x40004C00))           /*!< Port A Input */
N#define PAOUT                                    (HWREG16(0x40004C02))           /*!< Port A Output */
N#define PADIR                                    (HWREG16(0x40004C04))           /*!< Port A Direction */
N#define PAREN                                    (HWREG16(0x40004C06))           /*!< Port A Resistor Enable */
N#define PADS                                     (HWREG16(0x40004C08))           /*!< Port A Drive Strength */
N#define PASEL0                                   (HWREG16(0x40004C0A))           /*!< Port A Select 0 */
N#define PASEL1                                   (HWREG16(0x40004C0C))           /*!< Port A Select 1 */
N#define P1IV                                     (HWREG16(0x40004C0E))           /*!< Port 1 Interrupt Vector Register */
N#define PASELC                                   (HWREG16(0x40004C16))           /*!< Port A Complement Select */
N#define PAIES                                    (HWREG16(0x40004C18))           /*!< Port A Interrupt Edge Select */
N#define PAIE                                     (HWREG16(0x40004C1A))           /*!< Port A Interrupt Enable */
N#define PAIFG                                    (HWREG16(0x40004C1C))           /*!< Port A Interrupt Flag */
N#define P2IV                                     (HWREG16(0x40004C1E))           /*!< Port 2 Interrupt Vector Register */
N#define PBIN                                     (HWREG16(0x40004C20))           /*!< Port B Input */
N#define PBOUT                                    (HWREG16(0x40004C22))           /*!< Port B Output */
N#define PBDIR                                    (HWREG16(0x40004C24))           /*!< Port B Direction */
N#define PBREN                                    (HWREG16(0x40004C26))           /*!< Port B Resistor Enable */
N#define PBDS                                     (HWREG16(0x40004C28))           /*!< Port B Drive Strength */
N#define PBSEL0                                   (HWREG16(0x40004C2A))           /*!< Port B Select 0 */
N#define PBSEL1                                   (HWREG16(0x40004C2C))           /*!< Port B Select 1 */
N#define P3IV                                     (HWREG16(0x40004C2E))           /*!< Port 3 Interrupt Vector Register */
N#define PBSELC                                   (HWREG16(0x40004C36))           /*!< Port B Complement Select */
N#define PBIES                                    (HWREG16(0x40004C38))           /*!< Port B Interrupt Edge Select */
N#define PBIE                                     (HWREG16(0x40004C3A))           /*!< Port B Interrupt Enable */
N#define PBIFG                                    (HWREG16(0x40004C3C))           /*!< Port B Interrupt Flag */
N#define P4IV                                     (HWREG16(0x40004C3E))           /*!< Port 4 Interrupt Vector Register */
N#define PCIN                                     (HWREG16(0x40004C40))           /*!< Port C Input */
N#define PCOUT                                    (HWREG16(0x40004C42))           /*!< Port C Output */
N#define PCDIR                                    (HWREG16(0x40004C44))           /*!< Port C Direction */
N#define PCREN                                    (HWREG16(0x40004C46))           /*!< Port C Resistor Enable */
N#define PCDS                                     (HWREG16(0x40004C48))           /*!< Port C Drive Strength */
N#define PCSEL0                                   (HWREG16(0x40004C4A))           /*!< Port C Select 0 */
N#define PCSEL1                                   (HWREG16(0x40004C4C))           /*!< Port C Select 1 */
N#define P5IV                                     (HWREG16(0x40004C4E))           /*!< Port 5 Interrupt Vector Register */
N#define PCSELC                                   (HWREG16(0x40004C56))           /*!< Port C Complement Select */
N#define PCIES                                    (HWREG16(0x40004C58))           /*!< Port C Interrupt Edge Select */
N#define PCIE                                     (HWREG16(0x40004C5A))           /*!< Port C Interrupt Enable */
N#define PCIFG                                    (HWREG16(0x40004C5C))           /*!< Port C Interrupt Flag */
N#define P6IV                                     (HWREG16(0x40004C5E))           /*!< Port 6 Interrupt Vector Register */
N#define PDIN                                     (HWREG16(0x40004C60))           /*!< Port D Input */
N#define PDOUT                                    (HWREG16(0x40004C62))           /*!< Port D Output */
N#define PDDIR                                    (HWREG16(0x40004C64))           /*!< Port D Direction */
N#define PDREN                                    (HWREG16(0x40004C66))           /*!< Port D Resistor Enable */
N#define PDDS                                     (HWREG16(0x40004C68))           /*!< Port D Drive Strength */
N#define PDSEL0                                   (HWREG16(0x40004C6A))           /*!< Port D Select 0 */
N#define PDSEL1                                   (HWREG16(0x40004C6C))           /*!< Port D Select 1 */
N#define P7IV                                     (HWREG16(0x40004C6E))           /*!< Port 7 Interrupt Vector Register */
N#define PDSELC                                   (HWREG16(0x40004C76))           /*!< Port D Complement Select */
N#define PDIES                                    (HWREG16(0x40004C78))           /*!< Port D Interrupt Edge Select */
N#define PDIE                                     (HWREG16(0x40004C7A))           /*!< Port D Interrupt Enable */
N#define PDIFG                                    (HWREG16(0x40004C7C))           /*!< Port D Interrupt Flag */
N#define P8IV                                     (HWREG16(0x40004C7E))           /*!< Port 8 Interrupt Vector Register */
N#define PEIN                                     (HWREG16(0x40004C80))           /*!< Port E Input */
N#define PEOUT                                    (HWREG16(0x40004C82))           /*!< Port E Output */
N#define PEDIR                                    (HWREG16(0x40004C84))           /*!< Port E Direction */
N#define PEREN                                    (HWREG16(0x40004C86))           /*!< Port E Resistor Enable */
N#define PEDS                                     (HWREG16(0x40004C88))           /*!< Port E Drive Strength */
N#define PESEL0                                   (HWREG16(0x40004C8A))           /*!< Port E Select 0 */
N#define PESEL1                                   (HWREG16(0x40004C8C))           /*!< Port E Select 1 */
N#define P9IV                                     (HWREG16(0x40004C8E))           /*!< Port 9 Interrupt Vector Register */
N#define PESELC                                   (HWREG16(0x40004C96))           /*!< Port E Complement Select */
N#define PEIES                                    (HWREG16(0x40004C98))           /*!< Port E Interrupt Edge Select */
N#define PEIE                                     (HWREG16(0x40004C9A))           /*!< Port E Interrupt Enable */
N#define PEIFG                                    (HWREG16(0x40004C9C))           /*!< Port E Interrupt Flag */
N#define P10IV                                    (HWREG16(0x40004C9E))           /*!< Port 10 Interrupt Vector Register */
N#define PJIN                                     (HWREG16(0x40004D20))           /*!< Port J Input */
N#define PJOUT                                    (HWREG16(0x40004D22))           /*!< Port J Output */
N#define PJDIR                                    (HWREG16(0x40004D24))           /*!< Port J Direction */
N#define PJREN                                    (HWREG16(0x40004D26))           /*!< Port J Resistor Enable */
N#define PJDS                                     (HWREG16(0x40004D28))           /*!< Port J Drive Strength */
N#define PJSEL0                                   (HWREG16(0x40004D2A))           /*!< Port J Select 0 */
N#define PJSEL1                                   (HWREG16(0x40004D2C))           /*!< Port J Select 1 */
N#define PJSELC                                   (HWREG16(0x40004D36))           /*!< Port J Complement Select */
N#define P1IN                                     (HWREG8(0x40004C00))            /*!< Port 1 Input */
N#define P2IN                                     (HWREG8(0x40004C01))            /*!< Port 2 Input */
N#define P2OUT                                    (HWREG8(0x40004C03))            /*!< Port 2 Output */
N#define P1OUT                                    (HWREG8(0x40004C02))            /*!< Port 1 Output */
N#define P1DIR                                    (HWREG8(0x40004C04))            /*!< Port 1 Direction */
N#define P2DIR                                    (HWREG8(0x40004C05))            /*!< Port 2 Direction */
N#define P1REN                                    (HWREG8(0x40004C06))            /*!< Port 1 Resistor Enable */
N#define P2REN                                    (HWREG8(0x40004C07))            /*!< Port 2 Resistor Enable */
N#define P1DS                                     (HWREG8(0x40004C08))            /*!< Port 1 Drive Strength */
N#define P2DS                                     (HWREG8(0x40004C09))            /*!< Port 2 Drive Strength */
N#define P1SEL0                                   (HWREG8(0x40004C0A))            /*!< Port 1 Select 0 */
N#define P2SEL0                                   (HWREG8(0x40004C0B))            /*!< Port 2 Select 0 */
N#define P1SEL1                                   (HWREG8(0x40004C0C))            /*!< Port 1 Select 1 */
N#define P2SEL1                                   (HWREG8(0x40004C0D))            /*!< Port 2 Select 1 */
N#define P1SELC                                   (HWREG8(0x40004C16))            /*!< Port 1 Complement Select */
N#define P2SELC                                   (HWREG8(0x40004C17))            /*!< Port 2 Complement Select */
N#define P1IES                                    (HWREG8(0x40004C18))            /*!< Port 1 Interrupt Edge Select */
N#define P2IES                                    (HWREG8(0x40004C19))            /*!< Port 2 Interrupt Edge Select */
N#define P1IE                                     (HWREG8(0x40004C1A))            /*!< Port 1 Interrupt Enable */
N#define P2IE                                     (HWREG8(0x40004C1B))            /*!< Port 2 Interrupt Enable */
N#define P1IFG                                    (HWREG8(0x40004C1C))            /*!< Port 1 Interrupt Flag */
N#define P2IFG                                    (HWREG8(0x40004C1D))            /*!< Port 2 Interrupt Flag */
N#define P3IN                                     (HWREG8(0x40004C20))            /*!< Port 3 Input */
N#define P4IN                                     (HWREG8(0x40004C21))            /*!< Port 4 Input */
N#define P3OUT                                    (HWREG8(0x40004C22))            /*!< Port 3 Output */
N#define P4OUT                                    (HWREG8(0x40004C23))            /*!< Port 4 Output */
N#define P3DIR                                    (HWREG8(0x40004C24))            /*!< Port 3 Direction */
N#define P4DIR                                    (HWREG8(0x40004C25))            /*!< Port 4 Direction */
N#define P3REN                                    (HWREG8(0x40004C26))            /*!< Port 3 Resistor Enable */
N#define P4REN                                    (HWREG8(0x40004C27))            /*!< Port 4 Resistor Enable */
N#define P3DS                                     (HWREG8(0x40004C28))            /*!< Port 3 Drive Strength */
N#define P4DS                                     (HWREG8(0x40004C29))            /*!< Port 4 Drive Strength */
N#define P4SEL0                                   (HWREG8(0x40004C2B))            /*!< Port 4 Select 0 */
N#define P3SEL0                                   (HWREG8(0x40004C2A))            /*!< Port 3 Select 0 */
N#define P3SEL1                                   (HWREG8(0x40004C2C))            /*!< Port 3 Select 1 */
N#define P4SEL1                                   (HWREG8(0x40004C2D))            /*!< Port 4 Select 1 */
N#define P3SELC                                   (HWREG8(0x40004C36))            /*!< Port 3 Complement Select */
N#define P4SELC                                   (HWREG8(0x40004C37))            /*!< Port 4 Complement Select */
N#define P3IES                                    (HWREG8(0x40004C38))            /*!< Port 3 Interrupt Edge Select */
N#define P4IES                                    (HWREG8(0x40004C39))            /*!< Port 4 Interrupt Edge Select */
N#define P3IE                                     (HWREG8(0x40004C3A))            /*!< Port 3 Interrupt Enable */
N#define P4IE                                     (HWREG8(0x40004C3B))            /*!< Port 4 Interrupt Enable */
N#define P3IFG                                    (HWREG8(0x40004C3C))            /*!< Port 3 Interrupt Flag */
N#define P4IFG                                    (HWREG8(0x40004C3D))            /*!< Port 4 Interrupt Flag */
N#define P5IN                                     (HWREG8(0x40004C40))            /*!< Port 5 Input */
N#define P6IN                                     (HWREG8(0x40004C41))            /*!< Port 6 Input */
N#define P5OUT                                    (HWREG8(0x40004C42))            /*!< Port 5 Output */
N#define P6OUT                                    (HWREG8(0x40004C43))            /*!< Port 6 Output */
N#define P5DIR                                    (HWREG8(0x40004C44))            /*!< Port 5 Direction */
N#define P6DIR                                    (HWREG8(0x40004C45))            /*!< Port 6 Direction */
N#define P5REN                                    (HWREG8(0x40004C46))            /*!< Port 5 Resistor Enable */
N#define P6REN                                    (HWREG8(0x40004C47))            /*!< Port 6 Resistor Enable */
N#define P5DS                                     (HWREG8(0x40004C48))            /*!< Port 5 Drive Strength */
N#define P6DS                                     (HWREG8(0x40004C49))            /*!< Port 6 Drive Strength */
N#define P5SEL0                                   (HWREG8(0x40004C4A))            /*!< Port 5 Select 0 */
N#define P6SEL0                                   (HWREG8(0x40004C4B))            /*!< Port 6 Select 0 */
N#define P5SEL1                                   (HWREG8(0x40004C4C))            /*!< Port 5 Select 1 */
N#define P6SEL1                                   (HWREG8(0x40004C4D))            /*!< Port 6 Select 1 */
N#define P5SELC                                   (HWREG8(0x40004C56))            /*!< Port 5 Complement Select */
N#define P6SELC                                   (HWREG8(0x40004C57))            /*!< Port 6 Complement Select */
N#define P5IES                                    (HWREG8(0x40004C58))            /*!< Port 5 Interrupt Edge Select */
N#define P6IES                                    (HWREG8(0x40004C59))            /*!< Port 6 Interrupt Edge Select */
N#define P5IE                                     (HWREG8(0x40004C5A))            /*!< Port 5 Interrupt Enable */
N#define P6IE                                     (HWREG8(0x40004C5B))            /*!< Port 6 Interrupt Enable */
N#define P5IFG                                    (HWREG8(0x40004C5C))            /*!< Port 5 Interrupt Flag */
N#define P6IFG                                    (HWREG8(0x40004C5D))            /*!< Port 6 Interrupt Flag */
N#define P7IN                                     (HWREG8(0x40004C60))            /*!< Port 7 Input */
N#define P8IN                                     (HWREG8(0x40004C61))            /*!< Port 8 Input */
N#define P7OUT                                    (HWREG8(0x40004C62))            /*!< Port 7 Output */
N#define P8OUT                                    (HWREG8(0x40004C63))            /*!< Port 8 Output */
N#define P7DIR                                    (HWREG8(0x40004C64))            /*!< Port 7 Direction */
N#define P8DIR                                    (HWREG8(0x40004C65))            /*!< Port 8 Direction */
N#define P7REN                                    (HWREG8(0x40004C66))            /*!< Port 7 Resistor Enable */
N#define P8REN                                    (HWREG8(0x40004C67))            /*!< Port 8 Resistor Enable */
N#define P7DS                                     (HWREG8(0x40004C68))            /*!< Port 7 Drive Strength */
N#define P8DS                                     (HWREG8(0x40004C69))            /*!< Port 8 Drive Strength */
N#define P7SEL0                                   (HWREG8(0x40004C6A))            /*!< Port 7 Select 0 */
N#define P8SEL0                                   (HWREG8(0x40004C6B))            /*!< Port 8 Select 0 */
N#define P7SEL1                                   (HWREG8(0x40004C6C))            /*!< Port 7 Select 1 */
N#define P8SEL1                                   (HWREG8(0x40004C6D))            /*!< Port 8 Select 1 */
N#define P7SELC                                   (HWREG8(0x40004C76))            /*!< Port 7 Complement Select */
N#define P8SELC                                   (HWREG8(0x40004C77))            /*!< Port 8 Complement Select */
N#define P7IES                                    (HWREG8(0x40004C78))            /*!< Port 7 Interrupt Edge Select */
N#define P8IES                                    (HWREG8(0x40004C79))            /*!< Port 8 Interrupt Edge Select */
N#define P7IE                                     (HWREG8(0x40004C7A))            /*!< Port 7 Interrupt Enable */
N#define P8IE                                     (HWREG8(0x40004C7B))            /*!< Port 8 Interrupt Enable */
N#define P7IFG                                    (HWREG8(0x40004C7C))            /*!< Port 7 Interrupt Flag */
N#define P8IFG                                    (HWREG8(0x40004C7D))            /*!< Port 8 Interrupt Flag */
N#define P9IN                                     (HWREG8(0x40004C80))            /*!< Port 9 Input */
N#define P10IN                                    (HWREG8(0x40004C81))            /*!< Port 10 Input */
N#define P9OUT                                    (HWREG8(0x40004C82))            /*!< Port 9 Output */
N#define P10OUT                                   (HWREG8(0x40004C83))            /*!< Port 10 Output */
N#define P9DIR                                    (HWREG8(0x40004C84))            /*!< Port 9 Direction */
N#define P10DIR                                   (HWREG8(0x40004C85))            /*!< Port 10 Direction */
N#define P9REN                                    (HWREG8(0x40004C86))            /*!< Port 9 Resistor Enable */
N#define P10REN                                   (HWREG8(0x40004C87))            /*!< Port 10 Resistor Enable */
N#define P9DS                                     (HWREG8(0x40004C88))            /*!< Port 9 Drive Strength */
N#define P10DS                                    (HWREG8(0x40004C89))            /*!< Port 10 Drive Strength */
N#define P9SEL0                                   (HWREG8(0x40004C8A))            /*!< Port 9 Select 0 */
N#define P10SEL0                                  (HWREG8(0x40004C8B))            /*!< Port 10 Select 0 */
N#define P9SEL1                                   (HWREG8(0x40004C8C))            /*!< Port 9 Select 1 */
N#define P10SEL1                                  (HWREG8(0x40004C8D))            /*!< Port 10 Select 1 */
N#define P9SELC                                   (HWREG8(0x40004C96))            /*!< Port 9 Complement Select */
N#define P10SELC                                  (HWREG8(0x40004C97))            /*!< Port 10 Complement Select */
N#define P9IES                                    (HWREG8(0x40004C98))            /*!< Port 9 Interrupt Edge Select */
N#define P10IES                                   (HWREG8(0x40004C99))            /*!< Port 10 Interrupt Edge Select */
N#define P9IE                                     (HWREG8(0x40004C9A))            /*!< Port 9 Interrupt Enable */
N#define P10IE                                    (HWREG8(0x40004C9B))            /*!< Port 10 Interrupt Enable */
N#define P9IFG                                    (HWREG8(0x40004C9C))            /*!< Port 9 Interrupt Flag */
N#define P10IFG                                   (HWREG8(0x40004C9D))            /*!< Port 10 Interrupt Flag */
N
N/* Register offsets from DIO_BASE address */
N#define OFS_PAIN                                           (0x0000)              /*!< Port A Input */
N#define OFS_PAOUT                                          (0x0002)              /*!< Port A Output */
N#define OFS_PADIR                                          (0x0004)              /*!< Port A Direction */
N#define OFS_PAREN                                          (0x0006)              /*!< Port A Resistor Enable */
N#define OFS_PADS                                           (0x0008)              /*!< Port A Drive Strength */
N#define OFS_PASEL0                                         (0x000A)              /*!< Port A Select 0 */
N#define OFS_PASEL1                                         (0x000C)              /*!< Port A Select 1 */
N#define OFS_P1IV                                           (0x000E)              /*!< Port 1 Interrupt Vector Register */
N#define OFS_PASELC                                         (0x0016)              /*!< Port A Complement Select */
N#define OFS_PAIES                                          (0x0018)              /*!< Port A Interrupt Edge Select */
N#define OFS_PAIE                                           (0x001A)              /*!< Port A Interrupt Enable */
N#define OFS_PAIFG                                          (0x001C)              /*!< Port A Interrupt Flag */
N#define OFS_P2IV                                           (0x001E)              /*!< Port 2 Interrupt Vector Register */
N#define OFS_PBIN                                           (0x0020)              /*!< Port B Input */
N#define OFS_PBOUT                                          (0x0022)              /*!< Port B Output */
N#define OFS_PBDIR                                          (0x0024)              /*!< Port B Direction */
N#define OFS_PBREN                                          (0x0026)              /*!< Port B Resistor Enable */
N#define OFS_PBDS                                           (0x0028)              /*!< Port B Drive Strength */
N#define OFS_PBSEL0                                         (0x002A)              /*!< Port B Select 0 */
N#define OFS_PBSEL1                                         (0x002C)              /*!< Port B Select 1 */
N#define OFS_P3IV                                           (0x002E)              /*!< Port 3 Interrupt Vector Register */
N#define OFS_PBSELC                                         (0x0036)              /*!< Port B Complement Select */
N#define OFS_PBIES                                          (0x0038)              /*!< Port B Interrupt Edge Select */
N#define OFS_PBIE                                           (0x003A)              /*!< Port B Interrupt Enable */
N#define OFS_PBIFG                                          (0x003C)              /*!< Port B Interrupt Flag */
N#define OFS_P4IV                                           (0x003E)              /*!< Port 4 Interrupt Vector Register */
N#define OFS_PCIN                                           (0x0040)              /*!< Port C Input */
N#define OFS_PCOUT                                          (0x0042)              /*!< Port C Output */
N#define OFS_PCDIR                                          (0x0044)              /*!< Port C Direction */
N#define OFS_PCREN                                          (0x0046)              /*!< Port C Resistor Enable */
N#define OFS_PCDS                                           (0x0048)              /*!< Port C Drive Strength */
N#define OFS_PCSEL0                                         (0x004A)              /*!< Port C Select 0 */
N#define OFS_PCSEL1                                         (0x004C)              /*!< Port C Select 1 */
N#define OFS_P5IV                                           (0x004E)              /*!< Port 5 Interrupt Vector Register */
N#define OFS_PCSELC                                         (0x0056)              /*!< Port C Complement Select */
N#define OFS_PCIES                                          (0x0058)              /*!< Port C Interrupt Edge Select */
N#define OFS_PCIE                                           (0x005A)              /*!< Port C Interrupt Enable */
N#define OFS_PCIFG                                          (0x005C)              /*!< Port C Interrupt Flag */
N#define OFS_P6IV                                           (0x005E)              /*!< Port 6 Interrupt Vector Register */
N#define OFS_PDIN                                           (0x0060)              /*!< Port D Input */
N#define OFS_PDOUT                                          (0x0062)              /*!< Port D Output */
N#define OFS_PDDIR                                          (0x0064)              /*!< Port D Direction */
N#define OFS_PDREN                                          (0x0066)              /*!< Port D Resistor Enable */
N#define OFS_PDDS                                           (0x0068)              /*!< Port D Drive Strength */
N#define OFS_PDSEL0                                         (0x006A)              /*!< Port D Select 0 */
N#define OFS_PDSEL1                                         (0x006C)              /*!< Port D Select 1 */
N#define OFS_P7IV                                           (0x006E)              /*!< Port 7 Interrupt Vector Register */
N#define OFS_PDSELC                                         (0x0076)              /*!< Port D Complement Select */
N#define OFS_PDIES                                          (0x0078)              /*!< Port D Interrupt Edge Select */
N#define OFS_PDIE                                           (0x007A)              /*!< Port D Interrupt Enable */
N#define OFS_PDIFG                                          (0x007C)              /*!< Port D Interrupt Flag */
N#define OFS_P8IV                                           (0x007E)              /*!< Port 8 Interrupt Vector Register */
N#define OFS_PEIN                                           (0x0080)              /*!< Port E Input */
N#define OFS_PEOUT                                          (0x0082)              /*!< Port E Output */
N#define OFS_PEDIR                                          (0x0084)              /*!< Port E Direction */
N#define OFS_PEREN                                          (0x0086)              /*!< Port E Resistor Enable */
N#define OFS_PEDS                                           (0x0088)              /*!< Port E Drive Strength */
N#define OFS_PESEL0                                         (0x008A)              /*!< Port E Select 0 */
N#define OFS_PESEL1                                         (0x008C)              /*!< Port E Select 1 */
N#define OFS_P9IV                                           (0x008E)              /*!< Port 9 Interrupt Vector Register */
N#define OFS_PESELC                                         (0x0096)              /*!< Port E Complement Select */
N#define OFS_PEIES                                          (0x0098)              /*!< Port E Interrupt Edge Select */
N#define OFS_PEIE                                           (0x009A)              /*!< Port E Interrupt Enable */
N#define OFS_PEIFG                                          (0x009C)              /*!< Port E Interrupt Flag */
N#define OFS_P10IV                                          (0x009E)              /*!< Port 10 Interrupt Vector Register */
N#define OFS_PJIN                                           (0x0120)              /*!< Port J Input */
N#define OFS_PJOUT                                          (0x0122)              /*!< Port J Output */
N#define OFS_PJDIR                                          (0x0124)              /*!< Port J Direction */
N#define OFS_PJREN                                          (0x0126)              /*!< Port J Resistor Enable */
N#define OFS_PJDS                                           (0x0128)              /*!< Port J Drive Strength */
N#define OFS_PJSEL0                                         (0x012A)              /*!< Port J Select 0 */
N#define OFS_PJSEL1                                         (0x012C)              /*!< Port J Select 1 */
N#define OFS_PJSELC                                         (0x0136)              /*!< Port J Complement Select */
N#define OFS_P1IN                                           (0x0000)              /*!< Port 1 Input */
N#define OFS_P2IN                                           (0x0001)              /*!< Port 2 Input */
N#define OFS_P2OUT                                          (0x0003)              /*!< Port 2 Output */
N#define OFS_P1OUT                                          (0x0002)              /*!< Port 1 Output */
N#define OFS_P1DIR                                          (0x0004)              /*!< Port 1 Direction */
N#define OFS_P2DIR                                          (0x0005)              /*!< Port 2 Direction */
N#define OFS_P1REN                                          (0x0006)              /*!< Port 1 Resistor Enable */
N#define OFS_P2REN                                          (0x0007)              /*!< Port 2 Resistor Enable */
N#define OFS_P1DS                                           (0x0008)              /*!< Port 1 Drive Strength */
N#define OFS_P2DS                                           (0x0009)              /*!< Port 2 Drive Strength */
N#define OFS_P1SEL0                                         (0x000A)              /*!< Port 1 Select 0 */
N#define OFS_P2SEL0                                         (0x000B)              /*!< Port 2 Select 0 */
N#define OFS_P1SEL1                                         (0x000C)              /*!< Port 1 Select 1 */
N#define OFS_P2SEL1                                         (0x000D)              /*!< Port 2 Select 1 */
N#define OFS_P1SELC                                         (0x0016)              /*!< Port 1 Complement Select */
N#define OFS_P2SELC                                         (0x0017)              /*!< Port 2 Complement Select */
N#define OFS_P1IES                                          (0x0018)              /*!< Port 1 Interrupt Edge Select */
N#define OFS_P2IES                                          (0x0019)              /*!< Port 2 Interrupt Edge Select */
N#define OFS_P1IE                                           (0x001A)              /*!< Port 1 Interrupt Enable */
N#define OFS_P2IE                                           (0x001B)              /*!< Port 2 Interrupt Enable */
N#define OFS_P1IFG                                          (0x001C)              /*!< Port 1 Interrupt Flag */
N#define OFS_P2IFG                                          (0x001D)              /*!< Port 2 Interrupt Flag */
N#define OFS_P3IN                                           (0x0020)              /*!< Port 3 Input */
N#define OFS_P4IN                                           (0x0021)              /*!< Port 4 Input */
N#define OFS_P3OUT                                          (0x0022)              /*!< Port 3 Output */
N#define OFS_P4OUT                                          (0x0023)              /*!< Port 4 Output */
N#define OFS_P3DIR                                          (0x0024)              /*!< Port 3 Direction */
N#define OFS_P4DIR                                          (0x0025)              /*!< Port 4 Direction */
N#define OFS_P3REN                                          (0x0026)              /*!< Port 3 Resistor Enable */
N#define OFS_P4REN                                          (0x0027)              /*!< Port 4 Resistor Enable */
N#define OFS_P3DS                                           (0x0028)              /*!< Port 3 Drive Strength */
N#define OFS_P4DS                                           (0x0029)              /*!< Port 4 Drive Strength */
N#define OFS_P4SEL0                                         (0x002B)              /*!< Port 4 Select 0 */
N#define OFS_P3SEL0                                         (0x002A)              /*!< Port 3 Select 0 */
N#define OFS_P3SEL1                                         (0x002C)              /*!< Port 3 Select 1 */
N#define OFS_P4SEL1                                         (0x002D)              /*!< Port 4 Select 1 */
N#define OFS_P3SELC                                         (0x0036)              /*!< Port 3 Complement Select */
N#define OFS_P4SELC                                         (0x0037)              /*!< Port 4 Complement Select */
N#define OFS_P3IES                                          (0x0038)              /*!< Port 3 Interrupt Edge Select */
N#define OFS_P4IES                                          (0x0039)              /*!< Port 4 Interrupt Edge Select */
N#define OFS_P3IE                                           (0x003A)              /*!< Port 3 Interrupt Enable */
N#define OFS_P4IE                                           (0x003B)              /*!< Port 4 Interrupt Enable */
N#define OFS_P3IFG                                          (0x003C)              /*!< Port 3 Interrupt Flag */
N#define OFS_P4IFG                                          (0x003D)              /*!< Port 4 Interrupt Flag */
N#define OFS_P5IN                                           (0x0040)              /*!< Port 5 Input */
N#define OFS_P6IN                                           (0x0041)              /*!< Port 6 Input */
N#define OFS_P5OUT                                          (0x0042)              /*!< Port 5 Output */
N#define OFS_P6OUT                                          (0x0043)              /*!< Port 6 Output */
N#define OFS_P5DIR                                          (0x0044)              /*!< Port 5 Direction */
N#define OFS_P6DIR                                          (0x0045)              /*!< Port 6 Direction */
N#define OFS_P5REN                                          (0x0046)              /*!< Port 5 Resistor Enable */
N#define OFS_P6REN                                          (0x0047)              /*!< Port 6 Resistor Enable */
N#define OFS_P5DS                                           (0x0048)              /*!< Port 5 Drive Strength */
N#define OFS_P6DS                                           (0x0049)              /*!< Port 6 Drive Strength */
N#define OFS_P5SEL0                                         (0x004A)              /*!< Port 5 Select 0 */
N#define OFS_P6SEL0                                         (0x004B)              /*!< Port 6 Select 0 */
N#define OFS_P5SEL1                                         (0x004C)              /*!< Port 5 Select 1 */
N#define OFS_P6SEL1                                         (0x004D)              /*!< Port 6 Select 1 */
N#define OFS_P5SELC                                         (0x0056)              /*!< Port 5 Complement Select */
N#define OFS_P6SELC                                         (0x0057)              /*!< Port 6 Complement Select */
N#define OFS_P5IES                                          (0x0058)              /*!< Port 5 Interrupt Edge Select */
N#define OFS_P6IES                                          (0x0059)              /*!< Port 6 Interrupt Edge Select */
N#define OFS_P5IE                                           (0x005A)              /*!< Port 5 Interrupt Enable */
N#define OFS_P6IE                                           (0x005B)              /*!< Port 6 Interrupt Enable */
N#define OFS_P5IFG                                          (0x005C)              /*!< Port 5 Interrupt Flag */
N#define OFS_P6IFG                                          (0x005D)              /*!< Port 6 Interrupt Flag */
N#define OFS_P7IN                                           (0x0060)              /*!< Port 7 Input */
N#define OFS_P8IN                                           (0x0061)              /*!< Port 8 Input */
N#define OFS_P7OUT                                          (0x0062)              /*!< Port 7 Output */
N#define OFS_P8OUT                                          (0x0063)              /*!< Port 8 Output */
N#define OFS_P7DIR                                          (0x0064)              /*!< Port 7 Direction */
N#define OFS_P8DIR                                          (0x0065)              /*!< Port 8 Direction */
N#define OFS_P7REN                                          (0x0066)              /*!< Port 7 Resistor Enable */
N#define OFS_P8REN                                          (0x0067)              /*!< Port 8 Resistor Enable */
N#define OFS_P7DS                                           (0x0068)              /*!< Port 7 Drive Strength */
N#define OFS_P8DS                                           (0x0069)              /*!< Port 8 Drive Strength */
N#define OFS_P7SEL0                                         (0x006A)              /*!< Port 7 Select 0 */
N#define OFS_P8SEL0                                         (0x006B)              /*!< Port 8 Select 0 */
N#define OFS_P7SEL1                                         (0x006C)              /*!< Port 7 Select 1 */
N#define OFS_P8SEL1                                         (0x006D)              /*!< Port 8 Select 1 */
N#define OFS_P7SELC                                         (0x0076)              /*!< Port 7 Complement Select */
N#define OFS_P8SELC                                         (0x0077)              /*!< Port 8 Complement Select */
N#define OFS_P7IES                                          (0x0078)              /*!< Port 7 Interrupt Edge Select */
N#define OFS_P8IES                                          (0x0079)              /*!< Port 8 Interrupt Edge Select */
N#define OFS_P7IE                                           (0x007A)              /*!< Port 7 Interrupt Enable */
N#define OFS_P8IE                                           (0x007B)              /*!< Port 8 Interrupt Enable */
N#define OFS_P7IFG                                          (0x007C)              /*!< Port 7 Interrupt Flag */
N#define OFS_P8IFG                                          (0x007D)              /*!< Port 8 Interrupt Flag */
N#define OFS_P9IN                                           (0x0080)              /*!< Port 9 Input */
N#define OFS_P10IN                                          (0x0081)              /*!< Port 10 Input */
N#define OFS_P9OUT                                          (0x0082)              /*!< Port 9 Output */
N#define OFS_P10OUT                                         (0x0083)              /*!< Port 10 Output */
N#define OFS_P9DIR                                          (0x0084)              /*!< Port 9 Direction */
N#define OFS_P10DIR                                         (0x0085)              /*!< Port 10 Direction */
N#define OFS_P9REN                                          (0x0086)              /*!< Port 9 Resistor Enable */
N#define OFS_P10REN                                         (0x0087)              /*!< Port 10 Resistor Enable */
N#define OFS_P9DS                                           (0x0088)              /*!< Port 9 Drive Strength */
N#define OFS_P10DS                                          (0x0089)              /*!< Port 10 Drive Strength */
N#define OFS_P9SEL0                                         (0x008A)              /*!< Port 9 Select 0 */
N#define OFS_P10SEL0                                        (0x008B)              /*!< Port 10 Select 0 */
N#define OFS_P9SEL1                                         (0x008C)              /*!< Port 9 Select 1 */
N#define OFS_P10SEL1                                        (0x008D)              /*!< Port 10 Select 1 */
N#define OFS_P9SELC                                         (0x0096)              /*!< Port 9 Complement Select */
N#define OFS_P10SELC                                        (0x0097)              /*!< Port 10 Complement Select */
N#define OFS_P9IES                                          (0x0098)              /*!< Port 9 Interrupt Edge Select */
N#define OFS_P10IES                                         (0x0099)              /*!< Port 10 Interrupt Edge Select */
N#define OFS_P9IE                                           (0x009A)              /*!< Port 9 Interrupt Enable */
N#define OFS_P10IE                                          (0x009B)              /*!< Port 10 Interrupt Enable */
N#define OFS_P9IFG                                          (0x009C)              /*!< Port 9 Interrupt Flag */
N#define OFS_P10IFG                                         (0x009D)              /*!< Port 10 Interrupt Flag */
N
N
N/******************************************************************************
N* EUSCI_A0 Registers
N******************************************************************************/
N#define UCA0CTLW0                                (HWREG16(0x40001000))           /*!< eUSCI_Ax Control Word Register 0 */
N#define UCA0CTLW0_SPI                            (HWREG16(0x40001000))           
N#define UCA0CTLW1                                (HWREG16(0x40001002))           /*!< eUSCI_Ax Control Word Register 1 */
N#define UCA0BRW                                  (HWREG16(0x40001006))           /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define UCA0BRW_SPI                              (HWREG16(0x40001006))           
N#define UCA0MCTLW                                (HWREG16(0x40001008))           /*!< eUSCI_Ax Modulation Control Word Register */
N#define UCA0STATW                                (HWREG16(0x4000100A))           /*!< eUSCI_Ax Status Register */
N#define UCA0STATW_SPI                            (HWREG16(0x4000100A))           
N#define UCA0RXBUF                                (HWREG16(0x4000100C))           /*!< eUSCI_Ax Receive Buffer Register */
N#define UCA0RXBUF_SPI                            (HWREG16(0x4000100C))           
N#define UCA0TXBUF                                (HWREG16(0x4000100E))           /*!< eUSCI_Ax Transmit Buffer Register */
N#define UCA0TXBUF_SPI                            (HWREG16(0x4000100E))           
N#define UCA0ABCTL                                (HWREG16(0x40001010))           /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define UCA0IRCTL                                (HWREG16(0x40001012))           /*!< eUSCI_Ax IrDA Control Word Register */
N#define UCA0IE                                   (HWREG16(0x4000101A))           /*!< eUSCI_Ax Interrupt Enable Register */
N#define UCA0IE_SPI                               (HWREG16(0x4000101A))           
N#define UCA0IFG                                  (HWREG16(0x4000101C))           /*!< eUSCI_Ax Interrupt Flag Register */
N#define UCA0IFG_SPI                              (HWREG16(0x4000101C))           
N#define UCA0IV                                   (HWREG16(0x4000101E))           /*!< eUSCI_Ax Interrupt Vector Register */
N#define UCA0IV_SPI                               (HWREG16(0x4000101E))           
N
N/* Register offsets from EUSCI_A0_BASE address */
N#define OFS_UCA0CTLW0                                      (0x0000)              /*!< eUSCI_Ax Control Word Register 0 */
N#define OFS_UCA0CTLW0_SPI                                  (0x0000)              
N#define OFS_UCA0CTLW1                                      (0x0002)              /*!< eUSCI_Ax Control Word Register 1 */
N#define OFS_UCA0BRW                                        (0x0006)              /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define OFS_UCA0BRW_SPI                                    (0x0006)              
N#define OFS_UCA0MCTLW                                      (0x0008)              /*!< eUSCI_Ax Modulation Control Word Register */
N#define OFS_UCA0STATW                                      (0x000A)              /*!< eUSCI_Ax Status Register */
N#define OFS_UCA0STATW_SPI                                  (0x000A)              
N#define OFS_UCA0RXBUF                                      (0x000C)              /*!< eUSCI_Ax Receive Buffer Register */
N#define OFS_UCA0RXBUF_SPI                                  (0x000C)              
N#define OFS_UCA0TXBUF                                      (0x000E)              /*!< eUSCI_Ax Transmit Buffer Register */
N#define OFS_UCA0TXBUF_SPI                                  (0x000E)              
N#define OFS_UCA0ABCTL                                      (0x0010)              /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define OFS_UCA0IRCTL                                      (0x0012)              /*!< eUSCI_Ax IrDA Control Word Register */
N#define OFS_UCA0IE                                         (0x001A)              /*!< eUSCI_Ax Interrupt Enable Register */
N#define OFS_UCA0IE_SPI                                     (0x001A)              
N#define OFS_UCA0IFG                                        (0x001C)              /*!< eUSCI_Ax Interrupt Flag Register */
N#define OFS_UCA0IFG_SPI                                    (0x001C)              
N#define OFS_UCA0IV                                         (0x001E)              /*!< eUSCI_Ax Interrupt Vector Register */
N#define OFS_UCA0IV_SPI                                     (0x001E)              
N
N#define UCA0CTL0                                           (HWREG8_L(UCA0CTLW0)) /* eUSCI_Ax Control 0 */
N#define UCA0CTL1                                           (HWREG8_H(UCA0CTLW0)) /* eUSCI_Ax Control 1 */
N#define UCA0BR0                                            (HWREG8_L(UCA0BRW))   /* eUSCI_Ax Baud Rate Control 0 */
N#define UCA0BR1                                            (HWREG8_H(UCA0BRW))   /* eUSCI_Ax Baud Rate Control 1 */
N#define UCA0IRTCTL                                         (HWREG8_L(UCA0IRCTL)) /* eUSCI_Ax IrDA Transmit Control */
N#define UCA0IRRCTL                                         (HWREG8_H(UCA0IRCTL)) /* eUSCI_Ax IrDA Receive Control */
N
N/******************************************************************************
N* EUSCI_A1 Registers
N******************************************************************************/
N#define UCA1CTLW0                                (HWREG16(0x40001400))           /*!< eUSCI_Ax Control Word Register 0 */
N#define UCA1CTLW0_SPI                            (HWREG16(0x40001400))           
N#define UCA1CTLW1                                (HWREG16(0x40001402))           /*!< eUSCI_Ax Control Word Register 1 */
N#define UCA1BRW                                  (HWREG16(0x40001406))           /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define UCA1BRW_SPI                              (HWREG16(0x40001406))           
N#define UCA1MCTLW                                (HWREG16(0x40001408))           /*!< eUSCI_Ax Modulation Control Word Register */
N#define UCA1STATW                                (HWREG16(0x4000140A))           /*!< eUSCI_Ax Status Register */
N#define UCA1STATW_SPI                            (HWREG16(0x4000140A))           
N#define UCA1RXBUF                                (HWREG16(0x4000140C))           /*!< eUSCI_Ax Receive Buffer Register */
N#define UCA1RXBUF_SPI                            (HWREG16(0x4000140C))           
N#define UCA1TXBUF                                (HWREG16(0x4000140E))           /*!< eUSCI_Ax Transmit Buffer Register */
N#define UCA1TXBUF_SPI                            (HWREG16(0x4000140E))           
N#define UCA1ABCTL                                (HWREG16(0x40001410))           /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define UCA1IRCTL                                (HWREG16(0x40001412))           /*!< eUSCI_Ax IrDA Control Word Register */
N#define UCA1IE                                   (HWREG16(0x4000141A))           /*!< eUSCI_Ax Interrupt Enable Register */
N#define UCA1IE_SPI                               (HWREG16(0x4000141A))           
N#define UCA1IFG                                  (HWREG16(0x4000141C))           /*!< eUSCI_Ax Interrupt Flag Register */
N#define UCA1IFG_SPI                              (HWREG16(0x4000141C))           
N#define UCA1IV                                   (HWREG16(0x4000141E))           /*!< eUSCI_Ax Interrupt Vector Register */
N#define UCA1IV_SPI                               (HWREG16(0x4000141E))           
N
N/* Register offsets from EUSCI_A1_BASE address */
N#define OFS_UCA1CTLW0                                      (0x0000)              /*!< eUSCI_Ax Control Word Register 0 */
N#define OFS_UCA1CTLW0_SPI                                  (0x0000)              
N#define OFS_UCA1CTLW1                                      (0x0002)              /*!< eUSCI_Ax Control Word Register 1 */
N#define OFS_UCA1BRW                                        (0x0006)              /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define OFS_UCA1BRW_SPI                                    (0x0006)              
N#define OFS_UCA1MCTLW                                      (0x0008)              /*!< eUSCI_Ax Modulation Control Word Register */
N#define OFS_UCA1STATW                                      (0x000A)              /*!< eUSCI_Ax Status Register */
N#define OFS_UCA1STATW_SPI                                  (0x000A)              
N#define OFS_UCA1RXBUF                                      (0x000C)              /*!< eUSCI_Ax Receive Buffer Register */
N#define OFS_UCA1RXBUF_SPI                                  (0x000C)              
N#define OFS_UCA1TXBUF                                      (0x000E)              /*!< eUSCI_Ax Transmit Buffer Register */
N#define OFS_UCA1TXBUF_SPI                                  (0x000E)              
N#define OFS_UCA1ABCTL                                      (0x0010)              /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define OFS_UCA1IRCTL                                      (0x0012)              /*!< eUSCI_Ax IrDA Control Word Register */
N#define OFS_UCA1IE                                         (0x001A)              /*!< eUSCI_Ax Interrupt Enable Register */
N#define OFS_UCA1IE_SPI                                     (0x001A)              
N#define OFS_UCA1IFG                                        (0x001C)              /*!< eUSCI_Ax Interrupt Flag Register */
N#define OFS_UCA1IFG_SPI                                    (0x001C)              
N#define OFS_UCA1IV                                         (0x001E)              /*!< eUSCI_Ax Interrupt Vector Register */
N#define OFS_UCA1IV_SPI                                     (0x001E)              
N
N#define UCA1CTL0                                           (HWREG8_L(UCA1CTLW0)) /* eUSCI_Ax Control 0 */
N#define UCA1CTL1                                           (HWREG8_H(UCA1CTLW0)) /* eUSCI_Ax Control 1 */
N#define UCA1BR0                                            (HWREG8_L(UCA1BRW))   /* eUSCI_Ax Baud Rate Control 0 */
N#define UCA1BR1                                            (HWREG8_H(UCA1BRW))   /* eUSCI_Ax Baud Rate Control 1 */
N#define UCA1IRTCTL                                         (HWREG8_L(UCA1IRCTL)) /* eUSCI_Ax IrDA Transmit Control */
N#define UCA1IRRCTL                                         (HWREG8_H(UCA1IRCTL)) /* eUSCI_Ax IrDA Receive Control */
N
N/******************************************************************************
N* EUSCI_A2 Registers
N******************************************************************************/
N#define UCA2CTLW0                                (HWREG16(0x40001800))           /*!< eUSCI_Ax Control Word Register 0 */
N#define UCA2CTLW0_SPI                            (HWREG16(0x40001800))           
N#define UCA2CTLW1                                (HWREG16(0x40001802))           /*!< eUSCI_Ax Control Word Register 1 */
N#define UCA2BRW                                  (HWREG16(0x40001806))           /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define UCA2BRW_SPI                              (HWREG16(0x40001806))           
N#define UCA2MCTLW                                (HWREG16(0x40001808))           /*!< eUSCI_Ax Modulation Control Word Register */
N#define UCA2STATW                                (HWREG16(0x4000180A))           /*!< eUSCI_Ax Status Register */
N#define UCA2STATW_SPI                            (HWREG16(0x4000180A))           
N#define UCA2RXBUF                                (HWREG16(0x4000180C))           /*!< eUSCI_Ax Receive Buffer Register */
N#define UCA2RXBUF_SPI                            (HWREG16(0x4000180C))           
N#define UCA2TXBUF                                (HWREG16(0x4000180E))           /*!< eUSCI_Ax Transmit Buffer Register */
N#define UCA2TXBUF_SPI                            (HWREG16(0x4000180E))           
N#define UCA2ABCTL                                (HWREG16(0x40001810))           /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define UCA2IRCTL                                (HWREG16(0x40001812))           /*!< eUSCI_Ax IrDA Control Word Register */
N#define UCA2IE                                   (HWREG16(0x4000181A))           /*!< eUSCI_Ax Interrupt Enable Register */
N#define UCA2IE_SPI                               (HWREG16(0x4000181A))           
N#define UCA2IFG                                  (HWREG16(0x4000181C))           /*!< eUSCI_Ax Interrupt Flag Register */
N#define UCA2IFG_SPI                              (HWREG16(0x4000181C))           
N#define UCA2IV                                   (HWREG16(0x4000181E))           /*!< eUSCI_Ax Interrupt Vector Register */
N#define UCA2IV_SPI                               (HWREG16(0x4000181E))           
N
N/* Register offsets from EUSCI_A2_BASE address */
N#define OFS_UCA2CTLW0                                      (0x0000)              /*!< eUSCI_Ax Control Word Register 0 */
N#define OFS_UCA2CTLW0_SPI                                  (0x0000)              
N#define OFS_UCA2CTLW1                                      (0x0002)              /*!< eUSCI_Ax Control Word Register 1 */
N#define OFS_UCA2BRW                                        (0x0006)              /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define OFS_UCA2BRW_SPI                                    (0x0006)              
N#define OFS_UCA2MCTLW                                      (0x0008)              /*!< eUSCI_Ax Modulation Control Word Register */
N#define OFS_UCA2STATW                                      (0x000A)              /*!< eUSCI_Ax Status Register */
N#define OFS_UCA2STATW_SPI                                  (0x000A)              
N#define OFS_UCA2RXBUF                                      (0x000C)              /*!< eUSCI_Ax Receive Buffer Register */
N#define OFS_UCA2RXBUF_SPI                                  (0x000C)              
N#define OFS_UCA2TXBUF                                      (0x000E)              /*!< eUSCI_Ax Transmit Buffer Register */
N#define OFS_UCA2TXBUF_SPI                                  (0x000E)              
N#define OFS_UCA2ABCTL                                      (0x0010)              /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define OFS_UCA2IRCTL                                      (0x0012)              /*!< eUSCI_Ax IrDA Control Word Register */
N#define OFS_UCA2IE                                         (0x001A)              /*!< eUSCI_Ax Interrupt Enable Register */
N#define OFS_UCA2IE_SPI                                     (0x001A)              
N#define OFS_UCA2IFG                                        (0x001C)              /*!< eUSCI_Ax Interrupt Flag Register */
N#define OFS_UCA2IFG_SPI                                    (0x001C)              
N#define OFS_UCA2IV                                         (0x001E)              /*!< eUSCI_Ax Interrupt Vector Register */
N#define OFS_UCA2IV_SPI                                     (0x001E)              
N
N#define UCA2CTL0                                           (HWREG8_L(UCA2CTLW0)) /* eUSCI_Ax Control 0 */
N#define UCA2CTL1                                           (HWREG8_H(UCA2CTLW0)) /* eUSCI_Ax Control 1 */
N#define UCA2BR0                                            (HWREG8_L(UCA2BRW))   /* eUSCI_Ax Baud Rate Control 0 */
N#define UCA2BR1                                            (HWREG8_H(UCA2BRW))   /* eUSCI_Ax Baud Rate Control 1 */
N#define UCA2IRTCTL                                         (HWREG8_L(UCA2IRCTL)) /* eUSCI_Ax IrDA Transmit Control */
N#define UCA2IRRCTL                                         (HWREG8_H(UCA2IRCTL)) /* eUSCI_Ax IrDA Receive Control */
N
N/******************************************************************************
N* EUSCI_A3 Registers
N******************************************************************************/
N#define UCA3CTLW0                                (HWREG16(0x40001C00))           /*!< eUSCI_Ax Control Word Register 0 */
N#define UCA3CTLW0_SPI                            (HWREG16(0x40001C00))           
N#define UCA3CTLW1                                (HWREG16(0x40001C02))           /*!< eUSCI_Ax Control Word Register 1 */
N#define UCA3BRW                                  (HWREG16(0x40001C06))           /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define UCA3BRW_SPI                              (HWREG16(0x40001C06))           
N#define UCA3MCTLW                                (HWREG16(0x40001C08))           /*!< eUSCI_Ax Modulation Control Word Register */
N#define UCA3STATW                                (HWREG16(0x40001C0A))           /*!< eUSCI_Ax Status Register */
N#define UCA3STATW_SPI                            (HWREG16(0x40001C0A))           
N#define UCA3RXBUF                                (HWREG16(0x40001C0C))           /*!< eUSCI_Ax Receive Buffer Register */
N#define UCA3RXBUF_SPI                            (HWREG16(0x40001C0C))           
N#define UCA3TXBUF                                (HWREG16(0x40001C0E))           /*!< eUSCI_Ax Transmit Buffer Register */
N#define UCA3TXBUF_SPI                            (HWREG16(0x40001C0E))           
N#define UCA3ABCTL                                (HWREG16(0x40001C10))           /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define UCA3IRCTL                                (HWREG16(0x40001C12))           /*!< eUSCI_Ax IrDA Control Word Register */
N#define UCA3IE                                   (HWREG16(0x40001C1A))           /*!< eUSCI_Ax Interrupt Enable Register */
N#define UCA3IE_SPI                               (HWREG16(0x40001C1A))           
N#define UCA3IFG                                  (HWREG16(0x40001C1C))           /*!< eUSCI_Ax Interrupt Flag Register */
N#define UCA3IFG_SPI                              (HWREG16(0x40001C1C))           
N#define UCA3IV                                   (HWREG16(0x40001C1E))           /*!< eUSCI_Ax Interrupt Vector Register */
N#define UCA3IV_SPI                               (HWREG16(0x40001C1E))           
N
N/* Register offsets from EUSCI_A3_BASE address */
N#define OFS_UCA3CTLW0                                      (0x0000)              /*!< eUSCI_Ax Control Word Register 0 */
N#define OFS_UCA3CTLW0_SPI                                  (0x0000)              
N#define OFS_UCA3CTLW1                                      (0x0002)              /*!< eUSCI_Ax Control Word Register 1 */
N#define OFS_UCA3BRW                                        (0x0006)              /*!< eUSCI_Ax Baud Rate Control Word Register */
N#define OFS_UCA3BRW_SPI                                    (0x0006)              
N#define OFS_UCA3MCTLW                                      (0x0008)              /*!< eUSCI_Ax Modulation Control Word Register */
N#define OFS_UCA3STATW                                      (0x000A)              /*!< eUSCI_Ax Status Register */
N#define OFS_UCA3STATW_SPI                                  (0x000A)              
N#define OFS_UCA3RXBUF                                      (0x000C)              /*!< eUSCI_Ax Receive Buffer Register */
N#define OFS_UCA3RXBUF_SPI                                  (0x000C)              
N#define OFS_UCA3TXBUF                                      (0x000E)              /*!< eUSCI_Ax Transmit Buffer Register */
N#define OFS_UCA3TXBUF_SPI                                  (0x000E)              
N#define OFS_UCA3ABCTL                                      (0x0010)              /*!< eUSCI_Ax Auto Baud Rate Control Register */
N#define OFS_UCA3IRCTL                                      (0x0012)              /*!< eUSCI_Ax IrDA Control Word Register */
N#define OFS_UCA3IE                                         (0x001A)              /*!< eUSCI_Ax Interrupt Enable Register */
N#define OFS_UCA3IE_SPI                                     (0x001A)              
N#define OFS_UCA3IFG                                        (0x001C)              /*!< eUSCI_Ax Interrupt Flag Register */
N#define OFS_UCA3IFG_SPI                                    (0x001C)              
N#define OFS_UCA3IV                                         (0x001E)              /*!< eUSCI_Ax Interrupt Vector Register */
N#define OFS_UCA3IV_SPI                                     (0x001E)              
N
N#define UCA3CTL0                                           (HWREG8_L(UCA3CTLW0)) /* eUSCI_Ax Control 0 */
N#define UCA3CTL1                                           (HWREG8_H(UCA3CTLW0)) /* eUSCI_Ax Control 1 */
N#define UCA3BR0                                            (HWREG8_L(UCA3BRW))   /* eUSCI_Ax Baud Rate Control 0 */
N#define UCA3BR1                                            (HWREG8_H(UCA3BRW))   /* eUSCI_Ax Baud Rate Control 1 */
N#define UCA3IRTCTL                                         (HWREG8_L(UCA3IRCTL)) /* eUSCI_Ax IrDA Transmit Control */
N#define UCA3IRRCTL                                         (HWREG8_H(UCA3IRCTL)) /* eUSCI_Ax IrDA Receive Control */
N
N/******************************************************************************
N* EUSCI_B0 Registers
N******************************************************************************/
N#define UCB0CTLW0                                (HWREG16(0x40002000))           /*!< eUSCI_Bx Control Word Register 0 */
N#define UCB0CTLW0_SPI                            (HWREG16(0x40002000))           
N#define UCB0CTLW1                                (HWREG16(0x40002002))           /*!< eUSCI_Bx Control Word Register 1 */
N#define UCB0BRW                                  (HWREG16(0x40002006))           /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define UCB0BRW_SPI                              (HWREG16(0x40002006))           
N#define UCB0STATW                                (HWREG16(0x40002008))           /*!< eUSCI_Bx Status Register */
N#define UCB0STATW_SPI                            (HWREG16(0x40002008))           
N#define UCB0TBCNT                                (HWREG16(0x4000200A))           /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define UCB0RXBUF                                (HWREG16(0x4000200C))           /*!< eUSCI_Bx Receive Buffer Register */
N#define UCB0RXBUF_SPI                            (HWREG16(0x4000200C))           
N#define UCB0TXBUF                                (HWREG16(0x4000200E))           /*!< eUSCI_Bx Transmit Buffer Register */
N#define UCB0TXBUF_SPI                            (HWREG16(0x4000200E))           
N#define UCB0I2COA0                               (HWREG16(0x40002014))           /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define UCB0I2COA1                               (HWREG16(0x40002016))           /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define UCB0I2COA2                               (HWREG16(0x40002018))           /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define UCB0I2COA3                               (HWREG16(0x4000201A))           /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define UCB0ADDRX                                (HWREG16(0x4000201C))           /*!< eUSCI_Bx I2C Received Address Register */
N#define UCB0ADDMASK                              (HWREG16(0x4000201E))           /*!< eUSCI_Bx I2C Address Mask Register */
N#define UCB0I2CSA                                (HWREG16(0x40002020))           /*!< eUSCI_Bx I2C Slave Address Register */
N#define UCB0IE                                   (HWREG16(0x4000202A))           /*!< eUSCI_Bx Interrupt Enable Register */
N#define UCB0IE_SPI                               (HWREG16(0x4000202A))           
N#define UCB0IFG                                  (HWREG16(0x4000202C))           /*!< eUSCI_Bx Interrupt Flag Register */
N#define UCB0IFG_SPI                              (HWREG16(0x4000202C))           
N#define UCB0IV                                   (HWREG16(0x4000202E))           /*!< eUSCI_Bx Interrupt Vector Register */
N#define UCB0IV_SPI                               (HWREG16(0x4000202E))           
N
N/* Register offsets from EUSCI_B0_BASE address */
N#define OFS_UCB0CTLW0                                      (0x0000)              /*!< eUSCI_Bx Control Word Register 0 */
N#define OFS_UCB0CTLW0_SPI                                  (0x0000)              
N#define OFS_UCB0CTLW1                                      (0x0002)              /*!< eUSCI_Bx Control Word Register 1 */
N#define OFS_UCB0BRW                                        (0x0006)              /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define OFS_UCB0BRW_SPI                                    (0x0006)              
N#define OFS_UCB0STATW                                      (0x0008)              /*!< eUSCI_Bx Status Register */
N#define OFS_UCB0STATW_SPI                                  (0x0008)              
N#define OFS_UCB0TBCNT                                      (0x000A)              /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define OFS_UCB0RXBUF                                      (0x000C)              /*!< eUSCI_Bx Receive Buffer Register */
N#define OFS_UCB0RXBUF_SPI                                  (0x000C)              
N#define OFS_UCB0TXBUF                                      (0x000E)              /*!< eUSCI_Bx Transmit Buffer Register */
N#define OFS_UCB0TXBUF_SPI                                  (0x000E)              
N#define OFS_UCB0I2COA0                                     (0x0014)              /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define OFS_UCB0I2COA1                                     (0x0016)              /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define OFS_UCB0I2COA2                                     (0x0018)              /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define OFS_UCB0I2COA3                                     (0x001A)              /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define OFS_UCB0ADDRX                                      (0x001C)              /*!< eUSCI_Bx I2C Received Address Register */
N#define OFS_UCB0ADDMASK                                    (0x001E)              /*!< eUSCI_Bx I2C Address Mask Register */
N#define OFS_UCB0I2CSA                                      (0x0020)              /*!< eUSCI_Bx I2C Slave Address Register */
N#define OFS_UCB0IE                                         (0x002A)              /*!< eUSCI_Bx Interrupt Enable Register */
N#define OFS_UCB0IE_SPI                                     (0x002A)              
N#define OFS_UCB0IFG                                        (0x002C)              /*!< eUSCI_Bx Interrupt Flag Register */
N#define OFS_UCB0IFG_SPI                                    (0x002C)              
N#define OFS_UCB0IV                                         (0x002E)              /*!< eUSCI_Bx Interrupt Vector Register */
N#define OFS_UCB0IV_SPI                                     (0x002E)              
N
N#define UCB0CTL0                                           (HWREG8_L(UCB0CTLW0)) /* eUSCI_Bx Control 1 */
N#define UCB0CTL1                                           (HWREG8_H(UCB0CTLW0)) /* eUSCI_Bx Control 0 */
N#define UCB0BR0                                            (HWREG8_L(UCB0BRW))   /* eUSCI_Bx Bit Rate Control 0 */
N#define UCB0BR1                                            (HWREG8_H(UCB0BRW))   /* eUSCI_Bx Bit Rate Control 1 */
N#define UCB0STAT                                           (HWREG8_L(UCB0STATW)) /* eUSCI_Bx Status */
N#define UCB0BCNT                                           (HWREG8_H(UCB0STATW)) /* eUSCI_Bx Byte Counter Register */
N
N/******************************************************************************
N* EUSCI_B1 Registers
N******************************************************************************/
N#define UCB1CTLW0                                (HWREG16(0x40002400))           /*!< eUSCI_Bx Control Word Register 0 */
N#define UCB1CTLW0_SPI                            (HWREG16(0x40002400))           
N#define UCB1CTLW1                                (HWREG16(0x40002402))           /*!< eUSCI_Bx Control Word Register 1 */
N#define UCB1BRW                                  (HWREG16(0x40002406))           /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define UCB1BRW_SPI                              (HWREG16(0x40002406))           
N#define UCB1STATW                                (HWREG16(0x40002408))           /*!< eUSCI_Bx Status Register */
N#define UCB1STATW_SPI                            (HWREG16(0x40002408))           
N#define UCB1TBCNT                                (HWREG16(0x4000240A))           /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define UCB1RXBUF                                (HWREG16(0x4000240C))           /*!< eUSCI_Bx Receive Buffer Register */
N#define UCB1RXBUF_SPI                            (HWREG16(0x4000240C))           
N#define UCB1TXBUF                                (HWREG16(0x4000240E))           /*!< eUSCI_Bx Transmit Buffer Register */
N#define UCB1TXBUF_SPI                            (HWREG16(0x4000240E))           
N#define UCB1I2COA0                               (HWREG16(0x40002414))           /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define UCB1I2COA1                               (HWREG16(0x40002416))           /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define UCB1I2COA2                               (HWREG16(0x40002418))           /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define UCB1I2COA3                               (HWREG16(0x4000241A))           /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define UCB1ADDRX                                (HWREG16(0x4000241C))           /*!< eUSCI_Bx I2C Received Address Register */
N#define UCB1ADDMASK                              (HWREG16(0x4000241E))           /*!< eUSCI_Bx I2C Address Mask Register */
N#define UCB1I2CSA                                (HWREG16(0x40002420))           /*!< eUSCI_Bx I2C Slave Address Register */
N#define UCB1IE                                   (HWREG16(0x4000242A))           /*!< eUSCI_Bx Interrupt Enable Register */
N#define UCB1IE_SPI                               (HWREG16(0x4000242A))           
N#define UCB1IFG                                  (HWREG16(0x4000242C))           /*!< eUSCI_Bx Interrupt Flag Register */
N#define UCB1IFG_SPI                              (HWREG16(0x4000242C))           
N#define UCB1IV                                   (HWREG16(0x4000242E))           /*!< eUSCI_Bx Interrupt Vector Register */
N#define UCB1IV_SPI                               (HWREG16(0x4000242E))           
N
N/* Register offsets from EUSCI_B1_BASE address */
N#define OFS_UCB1CTLW0                                      (0x0000)              /*!< eUSCI_Bx Control Word Register 0 */
N#define OFS_UCB1CTLW0_SPI                                  (0x0000)              
N#define OFS_UCB1CTLW1                                      (0x0002)              /*!< eUSCI_Bx Control Word Register 1 */
N#define OFS_UCB1BRW                                        (0x0006)              /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define OFS_UCB1BRW_SPI                                    (0x0006)              
N#define OFS_UCB1STATW                                      (0x0008)              /*!< eUSCI_Bx Status Register */
N#define OFS_UCB1STATW_SPI                                  (0x0008)              
N#define OFS_UCB1TBCNT                                      (0x000A)              /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define OFS_UCB1RXBUF                                      (0x000C)              /*!< eUSCI_Bx Receive Buffer Register */
N#define OFS_UCB1RXBUF_SPI                                  (0x000C)              
N#define OFS_UCB1TXBUF                                      (0x000E)              /*!< eUSCI_Bx Transmit Buffer Register */
N#define OFS_UCB1TXBUF_SPI                                  (0x000E)              
N#define OFS_UCB1I2COA0                                     (0x0014)              /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define OFS_UCB1I2COA1                                     (0x0016)              /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define OFS_UCB1I2COA2                                     (0x0018)              /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define OFS_UCB1I2COA3                                     (0x001A)              /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define OFS_UCB1ADDRX                                      (0x001C)              /*!< eUSCI_Bx I2C Received Address Register */
N#define OFS_UCB1ADDMASK                                    (0x001E)              /*!< eUSCI_Bx I2C Address Mask Register */
N#define OFS_UCB1I2CSA                                      (0x0020)              /*!< eUSCI_Bx I2C Slave Address Register */
N#define OFS_UCB1IE                                         (0x002A)              /*!< eUSCI_Bx Interrupt Enable Register */
N#define OFS_UCB1IE_SPI                                     (0x002A)              
N#define OFS_UCB1IFG                                        (0x002C)              /*!< eUSCI_Bx Interrupt Flag Register */
N#define OFS_UCB1IFG_SPI                                    (0x002C)              
N#define OFS_UCB1IV                                         (0x002E)              /*!< eUSCI_Bx Interrupt Vector Register */
N#define OFS_UCB1IV_SPI                                     (0x002E)              
N
N#define UCB1CTL0                                           (HWREG8_L(UCB1CTLW0)) /* eUSCI_Bx Control 1 */
N#define UCB1CTL1                                           (HWREG8_H(UCB1CTLW0)) /* eUSCI_Bx Control 0 */
N#define UCB1BR0                                            (HWREG8_L(UCB1BRW))   /* eUSCI_Bx Bit Rate Control 0 */
N#define UCB1BR1                                            (HWREG8_H(UCB1BRW))   /* eUSCI_Bx Bit Rate Control 1 */
N#define UCB1STAT                                           (HWREG8_L(UCB1STATW)) /* eUSCI_Bx Status */
N#define UCB1BCNT                                           (HWREG8_H(UCB1STATW)) /* eUSCI_Bx Byte Counter Register */
N
N/******************************************************************************
N* EUSCI_B2 Registers
N******************************************************************************/
N#define UCB2CTLW0                                (HWREG16(0x40002800))           /*!< eUSCI_Bx Control Word Register 0 */
N#define UCB2CTLW0_SPI                            (HWREG16(0x40002800))           
N#define UCB2CTLW1                                (HWREG16(0x40002802))           /*!< eUSCI_Bx Control Word Register 1 */
N#define UCB2BRW                                  (HWREG16(0x40002806))           /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define UCB2BRW_SPI                              (HWREG16(0x40002806))           
N#define UCB2STATW                                (HWREG16(0x40002808))           /*!< eUSCI_Bx Status Register */
N#define UCB2STATW_SPI                            (HWREG16(0x40002808))           
N#define UCB2TBCNT                                (HWREG16(0x4000280A))           /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define UCB2RXBUF                                (HWREG16(0x4000280C))           /*!< eUSCI_Bx Receive Buffer Register */
N#define UCB2RXBUF_SPI                            (HWREG16(0x4000280C))           
N#define UCB2TXBUF                                (HWREG16(0x4000280E))           /*!< eUSCI_Bx Transmit Buffer Register */
N#define UCB2TXBUF_SPI                            (HWREG16(0x4000280E))           
N#define UCB2I2COA0                               (HWREG16(0x40002814))           /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define UCB2I2COA1                               (HWREG16(0x40002816))           /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define UCB2I2COA2                               (HWREG16(0x40002818))           /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define UCB2I2COA3                               (HWREG16(0x4000281A))           /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define UCB2ADDRX                                (HWREG16(0x4000281C))           /*!< eUSCI_Bx I2C Received Address Register */
N#define UCB2ADDMASK                              (HWREG16(0x4000281E))           /*!< eUSCI_Bx I2C Address Mask Register */
N#define UCB2I2CSA                                (HWREG16(0x40002820))           /*!< eUSCI_Bx I2C Slave Address Register */
N#define UCB2IE                                   (HWREG16(0x4000282A))           /*!< eUSCI_Bx Interrupt Enable Register */
N#define UCB2IE_SPI                               (HWREG16(0x4000282A))           
N#define UCB2IFG                                  (HWREG16(0x4000282C))           /*!< eUSCI_Bx Interrupt Flag Register */
N#define UCB2IFG_SPI                              (HWREG16(0x4000282C))           
N#define UCB2IV                                   (HWREG16(0x4000282E))           /*!< eUSCI_Bx Interrupt Vector Register */
N#define UCB2IV_SPI                               (HWREG16(0x4000282E))           
N
N/* Register offsets from EUSCI_B2_BASE address */
N#define OFS_UCB2CTLW0                                      (0x0000)              /*!< eUSCI_Bx Control Word Register 0 */
N#define OFS_UCB2CTLW0_SPI                                  (0x0000)              
N#define OFS_UCB2CTLW1                                      (0x0002)              /*!< eUSCI_Bx Control Word Register 1 */
N#define OFS_UCB2BRW                                        (0x0006)              /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define OFS_UCB2BRW_SPI                                    (0x0006)              
N#define OFS_UCB2STATW                                      (0x0008)              /*!< eUSCI_Bx Status Register */
N#define OFS_UCB2STATW_SPI                                  (0x0008)              
N#define OFS_UCB2TBCNT                                      (0x000A)              /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define OFS_UCB2RXBUF                                      (0x000C)              /*!< eUSCI_Bx Receive Buffer Register */
N#define OFS_UCB2RXBUF_SPI                                  (0x000C)              
N#define OFS_UCB2TXBUF                                      (0x000E)              /*!< eUSCI_Bx Transmit Buffer Register */
N#define OFS_UCB2TXBUF_SPI                                  (0x000E)              
N#define OFS_UCB2I2COA0                                     (0x0014)              /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define OFS_UCB2I2COA1                                     (0x0016)              /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define OFS_UCB2I2COA2                                     (0x0018)              /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define OFS_UCB2I2COA3                                     (0x001A)              /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define OFS_UCB2ADDRX                                      (0x001C)              /*!< eUSCI_Bx I2C Received Address Register */
N#define OFS_UCB2ADDMASK                                    (0x001E)              /*!< eUSCI_Bx I2C Address Mask Register */
N#define OFS_UCB2I2CSA                                      (0x0020)              /*!< eUSCI_Bx I2C Slave Address Register */
N#define OFS_UCB2IE                                         (0x002A)              /*!< eUSCI_Bx Interrupt Enable Register */
N#define OFS_UCB2IE_SPI                                     (0x002A)              
N#define OFS_UCB2IFG                                        (0x002C)              /*!< eUSCI_Bx Interrupt Flag Register */
N#define OFS_UCB2IFG_SPI                                    (0x002C)              
N#define OFS_UCB2IV                                         (0x002E)              /*!< eUSCI_Bx Interrupt Vector Register */
N#define OFS_UCB2IV_SPI                                     (0x002E)              
N
N#define UCB2CTL0                                           (HWREG8_L(UCB2CTLW0)) /* eUSCI_Bx Control 1 */
N#define UCB2CTL1                                           (HWREG8_H(UCB2CTLW0)) /* eUSCI_Bx Control 0 */
N#define UCB2BR0                                            (HWREG8_L(UCB2BRW))   /* eUSCI_Bx Bit Rate Control 0 */
N#define UCB2BR1                                            (HWREG8_H(UCB2BRW))   /* eUSCI_Bx Bit Rate Control 1 */
N#define UCB2STAT                                           (HWREG8_L(UCB2STATW)) /* eUSCI_Bx Status */
N#define UCB2BCNT                                           (HWREG8_H(UCB2STATW)) /* eUSCI_Bx Byte Counter Register */
N
N/******************************************************************************
N* EUSCI_B3 Registers
N******************************************************************************/
N#define UCB3CTLW0                                (HWREG16(0x40002C00))           /*!< eUSCI_Bx Control Word Register 0 */
N#define UCB3CTLW0_SPI                            (HWREG16(0x40002C00))           
N#define UCB3CTLW1                                (HWREG16(0x40002C02))           /*!< eUSCI_Bx Control Word Register 1 */
N#define UCB3BRW                                  (HWREG16(0x40002C06))           /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define UCB3BRW_SPI                              (HWREG16(0x40002C06))           
N#define UCB3STATW                                (HWREG16(0x40002C08))           /*!< eUSCI_Bx Status Register */
N#define UCB3STATW_SPI                            (HWREG16(0x40002C08))           
N#define UCB3TBCNT                                (HWREG16(0x40002C0A))           /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define UCB3RXBUF                                (HWREG16(0x40002C0C))           /*!< eUSCI_Bx Receive Buffer Register */
N#define UCB3RXBUF_SPI                            (HWREG16(0x40002C0C))           
N#define UCB3TXBUF                                (HWREG16(0x40002C0E))           /*!< eUSCI_Bx Transmit Buffer Register */
N#define UCB3TXBUF_SPI                            (HWREG16(0x40002C0E))           
N#define UCB3I2COA0                               (HWREG16(0x40002C14))           /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define UCB3I2COA1                               (HWREG16(0x40002C16))           /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define UCB3I2COA2                               (HWREG16(0x40002C18))           /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define UCB3I2COA3                               (HWREG16(0x40002C1A))           /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define UCB3ADDRX                                (HWREG16(0x40002C1C))           /*!< eUSCI_Bx I2C Received Address Register */
N#define UCB3ADDMASK                              (HWREG16(0x40002C1E))           /*!< eUSCI_Bx I2C Address Mask Register */
N#define UCB3I2CSA                                (HWREG16(0x40002C20))           /*!< eUSCI_Bx I2C Slave Address Register */
N#define UCB3IE                                   (HWREG16(0x40002C2A))           /*!< eUSCI_Bx Interrupt Enable Register */
N#define UCB3IE_SPI                               (HWREG16(0x40002C2A))           
N#define UCB3IFG                                  (HWREG16(0x40002C2C))           /*!< eUSCI_Bx Interrupt Flag Register */
N#define UCB3IFG_SPI                              (HWREG16(0x40002C2C))           
N#define UCB3IV                                   (HWREG16(0x40002C2E))           /*!< eUSCI_Bx Interrupt Vector Register */
N#define UCB3IV_SPI                               (HWREG16(0x40002C2E))           
N
N/* Register offsets from EUSCI_B3_BASE address */
N#define OFS_UCB3CTLW0                                      (0x0000)              /*!< eUSCI_Bx Control Word Register 0 */
N#define OFS_UCB3CTLW0_SPI                                  (0x0000)              
N#define OFS_UCB3CTLW1                                      (0x0002)              /*!< eUSCI_Bx Control Word Register 1 */
N#define OFS_UCB3BRW                                        (0x0006)              /*!< eUSCI_Bx Baud Rate Control Word Register */
N#define OFS_UCB3BRW_SPI                                    (0x0006)              
N#define OFS_UCB3STATW                                      (0x0008)              /*!< eUSCI_Bx Status Register */
N#define OFS_UCB3STATW_SPI                                  (0x0008)              
N#define OFS_UCB3TBCNT                                      (0x000A)              /*!< eUSCI_Bx Byte Counter Threshold Register */
N#define OFS_UCB3RXBUF                                      (0x000C)              /*!< eUSCI_Bx Receive Buffer Register */
N#define OFS_UCB3RXBUF_SPI                                  (0x000C)              
N#define OFS_UCB3TXBUF                                      (0x000E)              /*!< eUSCI_Bx Transmit Buffer Register */
N#define OFS_UCB3TXBUF_SPI                                  (0x000E)              
N#define OFS_UCB3I2COA0                                     (0x0014)              /*!< eUSCI_Bx I2C Own Address 0 Register */
N#define OFS_UCB3I2COA1                                     (0x0016)              /*!< eUSCI_Bx I2C Own Address 1 Register */
N#define OFS_UCB3I2COA2                                     (0x0018)              /*!< eUSCI_Bx I2C Own Address 2 Register */
N#define OFS_UCB3I2COA3                                     (0x001A)              /*!< eUSCI_Bx I2C Own Address 3 Register */
N#define OFS_UCB3ADDRX                                      (0x001C)              /*!< eUSCI_Bx I2C Received Address Register */
N#define OFS_UCB3ADDMASK                                    (0x001E)              /*!< eUSCI_Bx I2C Address Mask Register */
N#define OFS_UCB3I2CSA                                      (0x0020)              /*!< eUSCI_Bx I2C Slave Address Register */
N#define OFS_UCB3IE                                         (0x002A)              /*!< eUSCI_Bx Interrupt Enable Register */
N#define OFS_UCB3IE_SPI                                     (0x002A)              
N#define OFS_UCB3IFG                                        (0x002C)              /*!< eUSCI_Bx Interrupt Flag Register */
N#define OFS_UCB3IFG_SPI                                    (0x002C)              
N#define OFS_UCB3IV                                         (0x002E)              /*!< eUSCI_Bx Interrupt Vector Register */
N#define OFS_UCB3IV_SPI                                     (0x002E)              
N
N#define UCB3CTL0                                           (HWREG8_L(UCB3CTLW0)) /* eUSCI_Bx Control 1 */
N#define UCB3CTL1                                           (HWREG8_H(UCB3CTLW0)) /* eUSCI_Bx Control 0 */
N#define UCB3BR0                                            (HWREG8_L(UCB3BRW))   /* eUSCI_Bx Bit Rate Control 0 */
N#define UCB3BR1                                            (HWREG8_H(UCB3BRW))   /* eUSCI_Bx Bit Rate Control 1 */
N#define UCB3STAT                                           (HWREG8_L(UCB3STATW)) /* eUSCI_Bx Status */
N#define UCB3BCNT                                           (HWREG8_H(UCB3STATW)) /* eUSCI_Bx Byte Counter Register */
N
N/******************************************************************************
N* PMAP Registers
N******************************************************************************/
N#define PMAPKEYID                                (HWREG16(0x40005000))           /*!< Port Mapping Key Register */
N#define PMAPCTL                                  (HWREG16(0x40005002))           /*!< Port Mapping Control Register */
N#define P1MAP01                                  (HWREG16(0x40005008))           /*!< Port mapping register, P1.0 and P1.1 */
N#define P1MAP23                                  (HWREG16(0x4000500A))           /*!< Port mapping register, P1.2 and P1.3 */
N#define P1MAP45                                  (HWREG16(0x4000500C))           /*!< Port mapping register, P1.4 and P1.5 */
N#define P1MAP67                                  (HWREG16(0x4000500E))           /*!< Port mapping register, P1.6 and P1.7 */
N#define P2MAP01                                  (HWREG16(0x40005010))           /*!< Port mapping register, P2.0 and P2.1 */
N#define P2MAP23                                  (HWREG16(0x40005012))           /*!< Port mapping register, P2.2 and P2.3 */
N#define P2MAP45                                  (HWREG16(0x40005014))           /*!< Port mapping register, P2.4 and P2.5 */
N#define P2MAP67                                  (HWREG16(0x40005016))           /*!< Port mapping register, P2.6 and P2.7 */
N#define P3MAP01                                  (HWREG16(0x40005018))           /*!< Port mapping register, P3.0 and P3.1 */
N#define P3MAP23                                  (HWREG16(0x4000501A))           /*!< Port mapping register, P3.2 and P3.3 */
N#define P3MAP45                                  (HWREG16(0x4000501C))           /*!< Port mapping register, P3.4 and P3.5 */
N#define P3MAP67                                  (HWREG16(0x4000501E))           /*!< Port mapping register, P3.6 and P3.7 */
N#define P4MAP01                                  (HWREG16(0x40005020))           /*!< Port mapping register, P4.0 and P4.1 */
N#define P4MAP23                                  (HWREG16(0x40005022))           /*!< Port mapping register, P4.2 and P4.3 */
N#define P4MAP45                                  (HWREG16(0x40005024))           /*!< Port mapping register, P4.4 and P4.5 */
N#define P4MAP67                                  (HWREG16(0x40005026))           /*!< Port mapping register, P4.6 and P4.7 */
N#define P5MAP01                                  (HWREG16(0x40005028))           /*!< Port mapping register, P5.0 and P5.1 */
N#define P5MAP23                                  (HWREG16(0x4000502A))           /*!< Port mapping register, P5.2 and P5.3 */
N#define P5MAP45                                  (HWREG16(0x4000502C))           /*!< Port mapping register, P5.4 and P5.5 */
N#define P5MAP67                                  (HWREG16(0x4000502E))           /*!< Port mapping register, P5.6 and P5.7 */
N#define P6MAP01                                  (HWREG16(0x40005030))           /*!< Port mapping register, P6.0 and P6.1 */
N#define P6MAP23                                  (HWREG16(0x40005032))           /*!< Port mapping register, P6.2 and P6.3 */
N#define P6MAP45                                  (HWREG16(0x40005034))           /*!< Port mapping register, P6.4 and P6.5 */
N#define P6MAP67                                  (HWREG16(0x40005036))           /*!< Port mapping register, P6.6 and P6.7 */
N#define P7MAP01                                  (HWREG16(0x40005038))           /*!< Port mapping register, P7.0 and P7.1 */
N#define P7MAP23                                  (HWREG16(0x4000503A))           /*!< Port mapping register, P7.2 and P7.3 */
N#define P7MAP45                                  (HWREG16(0x4000503C))           /*!< Port mapping register, P7.4 and P7.5 */
N#define P7MAP67                                  (HWREG16(0x4000503E))           /*!< Port mapping register, P7.6 and P7.7 */
N
N/* Register offsets from PMAP_BASE address */
N#define OFS_PMAPKEYID                                      (0x0000)              /*!< Port Mapping Key Register */
N#define OFS_PMAPCTL                                        (0x0002)              /*!< Port Mapping Control Register */
N#define OFS_P1MAP01                                        (0x0008)              /*!< Port mapping register, P1.0 and P1.1 */
N#define OFS_P1MAP23                                        (0x000A)              /*!< Port mapping register, P1.2 and P1.3 */
N#define OFS_P1MAP45                                        (0x000C)              /*!< Port mapping register, P1.4 and P1.5 */
N#define OFS_P1MAP67                                        (0x000E)              /*!< Port mapping register, P1.6 and P1.7 */
N#define OFS_P2MAP01                                        (0x0010)              /*!< Port mapping register, P2.0 and P2.1 */
N#define OFS_P2MAP23                                        (0x0012)              /*!< Port mapping register, P2.2 and P2.3 */
N#define OFS_P2MAP45                                        (0x0014)              /*!< Port mapping register, P2.4 and P2.5 */
N#define OFS_P2MAP67                                        (0x0016)              /*!< Port mapping register, P2.6 and P2.7 */
N#define OFS_P3MAP01                                        (0x0018)              /*!< Port mapping register, P3.0 and P3.1 */
N#define OFS_P3MAP23                                        (0x001A)              /*!< Port mapping register, P3.2 and P3.3 */
N#define OFS_P3MAP45                                        (0x001C)              /*!< Port mapping register, P3.4 and P3.5 */
N#define OFS_P3MAP67                                        (0x001E)              /*!< Port mapping register, P3.6 and P3.7 */
N#define OFS_P4MAP01                                        (0x0020)              /*!< Port mapping register, P4.0 and P4.1 */
N#define OFS_P4MAP23                                        (0x0022)              /*!< Port mapping register, P4.2 and P4.3 */
N#define OFS_P4MAP45                                        (0x0024)              /*!< Port mapping register, P4.4 and P4.5 */
N#define OFS_P4MAP67                                        (0x0026)              /*!< Port mapping register, P4.6 and P4.7 */
N#define OFS_P5MAP01                                        (0x0028)              /*!< Port mapping register, P5.0 and P5.1 */
N#define OFS_P5MAP23                                        (0x002A)              /*!< Port mapping register, P5.2 and P5.3 */
N#define OFS_P5MAP45                                        (0x002C)              /*!< Port mapping register, P5.4 and P5.5 */
N#define OFS_P5MAP67                                        (0x002E)              /*!< Port mapping register, P5.6 and P5.7 */
N#define OFS_P6MAP01                                        (0x0030)              /*!< Port mapping register, P6.0 and P6.1 */
N#define OFS_P6MAP23                                        (0x0032)              /*!< Port mapping register, P6.2 and P6.3 */
N#define OFS_P6MAP45                                        (0x0034)              /*!< Port mapping register, P6.4 and P6.5 */
N#define OFS_P6MAP67                                        (0x0036)              /*!< Port mapping register, P6.6 and P6.7 */
N#define OFS_P7MAP01                                        (0x0038)              /*!< Port mapping register, P7.0 and P7.1 */
N#define OFS_P7MAP23                                        (0x003A)              /*!< Port mapping register, P7.2 and P7.3 */
N#define OFS_P7MAP45                                        (0x003C)              /*!< Port mapping register, P7.4 and P7.5 */
N#define OFS_P7MAP67                                        (0x003E)              /*!< Port mapping register, P7.6 and P7.7 */
N
N
N/******************************************************************************
N* REF_A Registers
N******************************************************************************/
N#define REFCTL0                                  (HWREG16(0x40003000))           /*!< REF Control Register 0 */
N
N/* Register offsets from REF_A_BASE address */
N#define OFS_REFCTL0                                        (0x0000)              /*!< REF Control Register 0 */
N
N#define REFCTL0_L                                          (HWREG8_L(REFCTL0))   /* REF Control Register 0 */
N#define REFCTL0_H                                          (HWREG8_H(REFCTL0))   /* REF Control Register 0 */
N
N/******************************************************************************
N* RTC_C Registers
N******************************************************************************/
N#define RTCCTL0                                  (HWREG16(0x40004400))           /*!< RTCCTL0 Register */
N#define RTCCTL13                                 (HWREG16(0x40004402))           /*!< RTCCTL13 Register */
N#define RTCOCAL                                  (HWREG16(0x40004404))           /*!< RTCOCAL Register */
N#define RTCTCMP                                  (HWREG16(0x40004406))           /*!< RTCTCMP Register */
N#define RTCPS0CTL                                (HWREG16(0x40004408))           /*!< Real-Time Clock Prescale Timer 0 Control Register */
N#define RTCPS1CTL                                (HWREG16(0x4000440A))           /*!< Real-Time Clock Prescale Timer 1 Control Register */
N#define RTCPS                                    (HWREG16(0x4000440C))           /*!< Real-Time Clock Prescale Timer Counter Register */
N#define RTCIV                                    (HWREG16(0x4000440E))           /*!< Real-Time Clock Interrupt Vector Register */
N#define RTCTIM0                                  (HWREG16(0x40004410))           /*!< RTCTIM0 Register  Hexadecimal Format */
N#define RTCTIM0_BCD                              (HWREG16(0x40004410))           
N#define RTCTIM1                                  (HWREG16(0x40004412))           /*!< Real-Time Clock Hour, Day of Week */
N#define RTCTIM1_BCD                              (HWREG16(0x40004412))           
N#define RTCDATE                                  (HWREG16(0x40004414))           /*!< RTCDATE - Hexadecimal Format */
N#define RTCDATE_BCD                              (HWREG16(0x40004414))           
N#define RTCYEAR                                  (HWREG16(0x40004416))           /*!< RTCYEAR Register  Hexadecimal Format */
N#define RTCYEAR_BCD                              (HWREG16(0x40004416))           
N#define RTCAMINHR                                (HWREG16(0x40004418))           /*!< RTCMINHR - Hexadecimal Format */
N#define RTCAMINHR_BCD                            (HWREG16(0x40004418))           
N#define RTCADOWDAY                               (HWREG16(0x4000441A))           /*!< RTCADOWDAY - Hexadecimal Format */
N#define RTCADOWDAY_BCD                           (HWREG16(0x4000441A))           
N#define RTCBIN2BCD                               (HWREG16(0x4000441C))           /*!< Binary-to-BCD Conversion Register */
N#define RTCBCD2BIN                               (HWREG16(0x4000441E))           /*!< BCD-to-Binary Conversion Register */
N
N/* Register offsets from RTC_C_BASE address */
N#define OFS_RTCCTL0                                        (0x0000)              /*!< RTCCTL0 Register */
N#define OFS_RTCCTL13                                       (0x0002)              /*!< RTCCTL13 Register */
N#define OFS_RTCOCAL                                        (0x0004)              /*!< RTCOCAL Register */
N#define OFS_RTCTCMP                                        (0x0006)              /*!< RTCTCMP Register */
N#define OFS_RTCPS0CTL                                      (0x0008)              /*!< Real-Time Clock Prescale Timer 0 Control Register */
N#define OFS_RTCPS1CTL                                      (0x000A)              /*!< Real-Time Clock Prescale Timer 1 Control Register */
N#define OFS_RTCPS                                          (0x000C)              /*!< Real-Time Clock Prescale Timer Counter Register */
N#define OFS_RTCIV                                          (0x000E)              /*!< Real-Time Clock Interrupt Vector Register */
N#define OFS_RTCTIM0                                        (0x0010)              /*!< RTCTIM0 Register  Hexadecimal Format */
N#define OFS_RTCTIM0_BCD                                    (0x0010)              
N#define OFS_RTCTIM1                                        (0x0012)              /*!< Real-Time Clock Hour, Day of Week */
N#define OFS_RTCTIM1_BCD                                    (0x0012)              
N#define OFS_RTCDATE                                        (0x0014)              /*!< RTCDATE - Hexadecimal Format */
N#define OFS_RTCDATE_BCD                                    (0x0014)              
N#define OFS_RTCYEAR                                        (0x0016)              /*!< RTCYEAR Register  Hexadecimal Format */
N#define OFS_RTCYEAR_BCD                                    (0x0016)              
N#define OFS_RTCAMINHR                                      (0x0018)              /*!< RTCMINHR - Hexadecimal Format */
N#define OFS_RTCAMINHR_BCD                                  (0x0018)              
N#define OFS_RTCADOWDAY                                     (0x001A)              /*!< RTCADOWDAY - Hexadecimal Format */
N#define OFS_RTCADOWDAY_BCD                                 (0x001A)              
N#define OFS_RTCBIN2BCD                                     (0x001C)              /*!< Binary-to-BCD Conversion Register */
N#define OFS_RTCBCD2BIN                                     (0x001E)              /*!< BCD-to-Binary Conversion Register */
N
N#define RTCCTL0_L                                          (HWREG8_L(RTCCTL0))   /* RTCCTL0 Register */
N#define RTCCTL0_H                                          (HWREG8_H(RTCCTL0))   /* RTCCTL0 Register */
N#define RTCCTL1                                            (HWREG8_L(RTCCTL13))  /* RTCCTL13 Register */
N#define RTCCTL13_L                                         (HWREG8_L(RTCCTL13))  /* RTCCTL13 Register */
N#define RTCCTL3                                            (HWREG8_H(RTCCTL13))  /* RTCCTL13 Register */
N#define RTCCTL13_H                                         (HWREG8_H(RTCCTL13))  /* RTCCTL13 Register */
N#define RTCOCAL_L                                          (HWREG8_L(RTCOCAL))   /* RTCOCAL Register */
N#define RTCOCAL_H                                          (HWREG8_H(RTCOCAL))   /* RTCOCAL Register */
N#define RTCTCMP_L                                          (HWREG8_L(RTCTCMP))   /* RTCTCMP Register */
N#define RTCTCMP_H                                          (HWREG8_H(RTCTCMP))   /* RTCTCMP Register */
N#define RTCPS0CTL_L                                        (HWREG8_L(RTCPS0CTL)) /* Real-Time Clock Prescale Timer 0 Control Register */
N#define RTCPS0CTL_H                                        (HWREG8_H(RTCPS0CTL)) /* Real-Time Clock Prescale Timer 0 Control Register */
N#define RTCPS1CTL_L                                        (HWREG8_L(RTCPS1CTL)) /* Real-Time Clock Prescale Timer 1 Control Register */
N#define RTCPS1CTL_H                                        (HWREG8_H(RTCPS1CTL)) /* Real-Time Clock Prescale Timer 1 Control Register */
N#define RTCPS0                                             (HWREG8_L(RTCPS))     /* Real-Time Clock Prescale Timer Counter Register */
N#define RTCPS_L                                            (HWREG8_L(RTCPS))     /* Real-Time Clock Prescale Timer Counter Register */
N#define RTCPS1                                             (HWREG8_H(RTCPS))     /* Real-Time Clock Prescale Timer Counter Register */
N#define RTCPS_H                                            (HWREG8_H(RTCPS))     /* Real-Time Clock Prescale Timer Counter Register */
N#define RTCSEC                                             (HWREG8_L(RTCTIM0))   /* Real-Time Clock Seconds */
N#define RTCTIM0_L                                          (HWREG8_L(RTCTIM0))   /* Real-Time Clock Seconds */
N#define RTCMIN                                             (HWREG8_H(RTCTIM0))   /* Real-Time Clock Minutes */
N#define RTCTIM0_H                                          (HWREG8_H(RTCTIM0))   /* Real-Time Clock Minutes */
N#define RTCHOUR                                            (HWREG8_L(RTCTIM1))   /* Real-Time Clock Hour */
N#define RTCTIM1_L                                          (HWREG8_L(RTCTIM1))   /* Real-Time Clock Hour */
N#define RTCDOW                                             (HWREG8_H(RTCTIM1))   /* Real-Time Clock Day of Week */
N#define RTCTIM1_H                                          (HWREG8_H(RTCTIM1))   /* Real-Time Clock Day of Week */
N#define RTCDAY                                             (HWREG8_L(RTCDATE))   /* Real-Time Clock Day of Month */
N#define RTCDATE_L                                          (HWREG8_L(RTCDATE))   /* Real-Time Clock Day of Month */
N#define RTCMON                                             (HWREG8_H(RTCDATE))   /* Real-Time Clock Month */
N#define RTCDATE_H                                          (HWREG8_H(RTCDATE))   /* Real-Time Clock Month */
N#define RTCAMIN                                            (HWREG8_L(RTCAMINHR)) /* Real-Time Clock Minutes Alarm */
N#define RTCAMINHR_L                                        (HWREG8_L(RTCAMINHR)) /* Real-Time Clock Minutes Alarm */
N#define RTCAHOUR                                           (HWREG8_H(RTCAMINHR)) /* Real-Time Clock Hours Alarm */
N#define RTCAMINHR_H                                        (HWREG8_H(RTCAMINHR)) /* Real-Time Clock Hours Alarm */
N#define RTCADOW                                            (HWREG8_L(RTCADOWDAY))/* Real-Time Clock Day of Week Alarm */
N#define RTCADOWDAY_L                                       (HWREG8_L(RTCADOWDAY))/* Real-Time Clock Day of Week Alarm */
N#define RTCADAY                                            (HWREG8_H(RTCADOWDAY))/* Real-Time Clock Day of Month Alarm */
N#define RTCADOWDAY_H                                       (HWREG8_H(RTCADOWDAY))/* Real-Time Clock Day of Month Alarm */
N
N/******************************************************************************
N* TIMER_A0 Registers
N******************************************************************************/
N#define TA0CTL                                   (HWREG16(0x40000000))           /*!< TimerAx Control Register */
N#define TA0CCTL0                                 (HWREG16(0x40000002))           /*!< Timer_A Capture/Compare Control Register */
N#define TA0CCTL1                                 (HWREG16(0x40000004))           /*!< Timer_A Capture/Compare Control Register */
N#define TA0CCTL2                                 (HWREG16(0x40000006))           /*!< Timer_A Capture/Compare Control Register */
N#define TA0CCTL3                                 (HWREG16(0x40000008))           /*!< Timer_A Capture/Compare Control Register */
N#define TA0CCTL4                                 (HWREG16(0x4000000A))           /*!< Timer_A Capture/Compare Control Register */
N#define TA0R                                     (HWREG16(0x40000010))           /*!< TimerA register */
N#define TA0CCR0                                  (HWREG16(0x40000012))           /*!< Timer_A Capture/Compare  Register */
N#define TA0CCR1                                  (HWREG16(0x40000014))           /*!< Timer_A Capture/Compare  Register */
N#define TA0CCR2                                  (HWREG16(0x40000016))           /*!< Timer_A Capture/Compare  Register */
N#define TA0CCR3                                  (HWREG16(0x40000018))           /*!< Timer_A Capture/Compare  Register */
N#define TA0CCR4                                  (HWREG16(0x4000001A))           /*!< Timer_A Capture/Compare  Register */
N#define TA0EX0                                   (HWREG16(0x40000020))           /*!< TimerAx Expansion 0 Register */
N#define TA0IV                                    (HWREG16(0x4000002E))           /*!< TimerAx Interrupt Vector Register */
N
N/* Register offsets from TIMER_A0_BASE address */
N#define OFS_TA0CTL                                         (0x0000)              /*!< TimerAx Control Register */
N#define OFS_TA0CCTL0                                       (0x0002)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA0CCTL1                                       (0x0004)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA0CCTL2                                       (0x0006)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA0CCTL3                                       (0x0008)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA0CCTL4                                       (0x000A)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA0R                                           (0x0010)              /*!< TimerA register */
N#define OFS_TA0CCR0                                        (0x0012)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA0CCR1                                        (0x0014)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA0CCR2                                        (0x0016)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA0CCR3                                        (0x0018)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA0CCR4                                        (0x001A)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA0EX0                                         (0x0020)              /*!< TimerAx Expansion 0 Register */
N#define OFS_TA0IV                                          (0x002E)              /*!< TimerAx Interrupt Vector Register */
N
N
N/******************************************************************************
N* TIMER_A1 Registers
N******************************************************************************/
N#define TA1CTL                                   (HWREG16(0x40000400))           /*!< TimerAx Control Register */
N#define TA1CCTL0                                 (HWREG16(0x40000402))           /*!< Timer_A Capture/Compare Control Register */
N#define TA1CCTL1                                 (HWREG16(0x40000404))           /*!< Timer_A Capture/Compare Control Register */
N#define TA1CCTL2                                 (HWREG16(0x40000406))           /*!< Timer_A Capture/Compare Control Register */
N#define TA1CCTL3                                 (HWREG16(0x40000408))           /*!< Timer_A Capture/Compare Control Register */
N#define TA1CCTL4                                 (HWREG16(0x4000040A))           /*!< Timer_A Capture/Compare Control Register */
N#define TA1R                                     (HWREG16(0x40000410))           /*!< TimerA register */
N#define TA1CCR0                                  (HWREG16(0x40000412))           /*!< Timer_A Capture/Compare  Register */
N#define TA1CCR1                                  (HWREG16(0x40000414))           /*!< Timer_A Capture/Compare  Register */
N#define TA1CCR2                                  (HWREG16(0x40000416))           /*!< Timer_A Capture/Compare  Register */
N#define TA1CCR3                                  (HWREG16(0x40000418))           /*!< Timer_A Capture/Compare  Register */
N#define TA1CCR4                                  (HWREG16(0x4000041A))           /*!< Timer_A Capture/Compare  Register */
N#define TA1EX0                                   (HWREG16(0x40000420))           /*!< TimerAx Expansion 0 Register */
N#define TA1IV                                    (HWREG16(0x4000042E))           /*!< TimerAx Interrupt Vector Register */
N
N/* Register offsets from TIMER_A1_BASE address */
N#define OFS_TA1CTL                                         (0x0000)              /*!< TimerAx Control Register */
N#define OFS_TA1CCTL0                                       (0x0002)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA1CCTL1                                       (0x0004)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA1CCTL2                                       (0x0006)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA1CCTL3                                       (0x0008)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA1CCTL4                                       (0x000A)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA1R                                           (0x0010)              /*!< TimerA register */
N#define OFS_TA1CCR0                                        (0x0012)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA1CCR1                                        (0x0014)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA1CCR2                                        (0x0016)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA1CCR3                                        (0x0018)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA1CCR4                                        (0x001A)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA1EX0                                         (0x0020)              /*!< TimerAx Expansion 0 Register */
N#define OFS_TA1IV                                          (0x002E)              /*!< TimerAx Interrupt Vector Register */
N
N
N/******************************************************************************
N* TIMER_A2 Registers
N******************************************************************************/
N#define TA2CTL                                   (HWREG16(0x40000800))           /*!< TimerAx Control Register */
N#define TA2CCTL0                                 (HWREG16(0x40000802))           /*!< Timer_A Capture/Compare Control Register */
N#define TA2CCTL1                                 (HWREG16(0x40000804))           /*!< Timer_A Capture/Compare Control Register */
N#define TA2CCTL2                                 (HWREG16(0x40000806))           /*!< Timer_A Capture/Compare Control Register */
N#define TA2CCTL3                                 (HWREG16(0x40000808))           /*!< Timer_A Capture/Compare Control Register */
N#define TA2CCTL4                                 (HWREG16(0x4000080A))           /*!< Timer_A Capture/Compare Control Register */
N#define TA2R                                     (HWREG16(0x40000810))           /*!< TimerA register */
N#define TA2CCR0                                  (HWREG16(0x40000812))           /*!< Timer_A Capture/Compare  Register */
N#define TA2CCR1                                  (HWREG16(0x40000814))           /*!< Timer_A Capture/Compare  Register */
N#define TA2CCR2                                  (HWREG16(0x40000816))           /*!< Timer_A Capture/Compare  Register */
N#define TA2CCR3                                  (HWREG16(0x40000818))           /*!< Timer_A Capture/Compare  Register */
N#define TA2CCR4                                  (HWREG16(0x4000081A))           /*!< Timer_A Capture/Compare  Register */
N#define TA2EX0                                   (HWREG16(0x40000820))           /*!< TimerAx Expansion 0 Register */
N#define TA2IV                                    (HWREG16(0x4000082E))           /*!< TimerAx Interrupt Vector Register */
N
N/* Register offsets from TIMER_A2_BASE address */
N#define OFS_TA2CTL                                         (0x0000)              /*!< TimerAx Control Register */
N#define OFS_TA2CCTL0                                       (0x0002)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA2CCTL1                                       (0x0004)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA2CCTL2                                       (0x0006)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA2CCTL3                                       (0x0008)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA2CCTL4                                       (0x000A)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA2R                                           (0x0010)              /*!< TimerA register */
N#define OFS_TA2CCR0                                        (0x0012)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA2CCR1                                        (0x0014)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA2CCR2                                        (0x0016)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA2CCR3                                        (0x0018)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA2CCR4                                        (0x001A)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA2EX0                                         (0x0020)              /*!< TimerAx Expansion 0 Register */
N#define OFS_TA2IV                                          (0x002E)              /*!< TimerAx Interrupt Vector Register */
N
N
N/******************************************************************************
N* TIMER_A3 Registers
N******************************************************************************/
N#define TA3CTL                                   (HWREG16(0x40000C00))           /*!< TimerAx Control Register */
N#define TA3CCTL0                                 (HWREG16(0x40000C02))           /*!< Timer_A Capture/Compare Control Register */
N#define TA3CCTL1                                 (HWREG16(0x40000C04))           /*!< Timer_A Capture/Compare Control Register */
N#define TA3CCTL2                                 (HWREG16(0x40000C06))           /*!< Timer_A Capture/Compare Control Register */
N#define TA3CCTL3                                 (HWREG16(0x40000C08))           /*!< Timer_A Capture/Compare Control Register */
N#define TA3CCTL4                                 (HWREG16(0x40000C0A))           /*!< Timer_A Capture/Compare Control Register */
N#define TA3R                                     (HWREG16(0x40000C10))           /*!< TimerA register */
N#define TA3CCR0                                  (HWREG16(0x40000C12))           /*!< Timer_A Capture/Compare  Register */
N#define TA3CCR1                                  (HWREG16(0x40000C14))           /*!< Timer_A Capture/Compare  Register */
N#define TA3CCR2                                  (HWREG16(0x40000C16))           /*!< Timer_A Capture/Compare  Register */
N#define TA3CCR3                                  (HWREG16(0x40000C18))           /*!< Timer_A Capture/Compare  Register */
N#define TA3CCR4                                  (HWREG16(0x40000C1A))           /*!< Timer_A Capture/Compare  Register */
N#define TA3EX0                                   (HWREG16(0x40000C20))           /*!< TimerAx Expansion 0 Register */
N#define TA3IV                                    (HWREG16(0x40000C2E))           /*!< TimerAx Interrupt Vector Register */
N
N/* Register offsets from TIMER_A3_BASE address */
N#define OFS_TA3CTL                                         (0x0000)              /*!< TimerAx Control Register */
N#define OFS_TA3CCTL0                                       (0x0002)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA3CCTL1                                       (0x0004)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA3CCTL2                                       (0x0006)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA3CCTL3                                       (0x0008)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA3CCTL4                                       (0x000A)              /*!< Timer_A Capture/Compare Control Register */
N#define OFS_TA3R                                           (0x0010)              /*!< TimerA register */
N#define OFS_TA3CCR0                                        (0x0012)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA3CCR1                                        (0x0014)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA3CCR2                                        (0x0016)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA3CCR3                                        (0x0018)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA3CCR4                                        (0x001A)              /*!< Timer_A Capture/Compare  Register */
N#define OFS_TA3EX0                                         (0x0020)              /*!< TimerAx Expansion 0 Register */
N#define OFS_TA3IV                                          (0x002E)              /*!< TimerAx Interrupt Vector Register */
N
N
N/******************************************************************************
N* WDT_A Registers
N******************************************************************************/
N#define WDTCTL                                   (HWREG16(0x4000480C))           /*!< Watchdog Timer Control Register */
N
N/* Register offsets from WDT_A_BASE address */
N#define OFS_WDTCTL                                         (0x000C)              /*!< Watchdog Timer Control Register */
N
N
N/******************************************************************************
N* Peripheral register control bits (legacy section)                           *
N******************************************************************************/
N
N/******************************************************************************
N* AES256 Bits (legacy section)
N******************************************************************************/
N/* AESACTL0[AESOP] Bits */
N#define AESOP_OFS                                AES256_CTL0_OP_OFS              /*!< AESOP Offset */
N#define AESOP_M                                  AES256_CTL0_OP_MASK             /*!< AES operation */
N#define AESOP0                                   AES256_CTL0_OP0                 /*!< AESOP Bit 0 */
N#define AESOP1                                   AES256_CTL0_OP1                 /*!< AESOP Bit 1 */
N#define AESOP_0                                  AES256_CTL0_OP_0                /*!< Encryption */
N#define AESOP_1                                  AES256_CTL0_OP_1                /*!< Decryption. The provided key is the same key used for encryption */
N#define AESOP_2                                  AES256_CTL0_OP_2                /*!< Generate first round key required for decryption */
N#define AESOP_3                                  AES256_CTL0_OP_3                /*!< Decryption. The provided key is the first round key required for decryption */
N/* AESACTL0[AESKL] Bits */
N#define AESKL_OFS                                AES256_CTL0_KL_OFS              /*!< AESKL Offset */
N#define AESKL_M                                  AES256_CTL0_KL_MASK             /*!< AES key length */
N#define AESKL0                                   AES256_CTL0_KL0                 /*!< AESKL Bit 0 */
N#define AESKL1                                   AES256_CTL0_KL1                 /*!< AESKL Bit 1 */
N#define AESKL_0                                  AES256_CTL0_KL_0                /*!< AES128. The key size is 128 bit */
N#define AESKL_1                                  AES256_CTL0_KL_1                /*!< AES192. The key size is 192 bit. */
N#define AESKL_2                                  AES256_CTL0_KL_2                /*!< AES256. The key size is 256 bit */
N#define AESKL__128BIT                            AES256_CTL0_KL__128BIT          /*!< AES128. The key size is 128 bit */
N#define AESKL__192BIT                            AES256_CTL0_KL__192BIT          /*!< AES192. The key size is 192 bit. */
N#define AESKL__256BIT                            AES256_CTL0_KL__256BIT          /*!< AES256. The key size is 256 bit */
N/* AESACTL0[AESCM] Bits */
N#define AESCM_OFS                                AES256_CTL0_CM_OFS              /*!< AESCM Offset */
N#define AESCM_M                                  AES256_CTL0_CM_MASK             /*!< AES cipher mode select */
N#define AESCM0                                   AES256_CTL0_CM0                 /*!< AESCM Bit 0 */
N#define AESCM1                                   AES256_CTL0_CM1                 /*!< AESCM Bit 1 */
N#define AESCM_0                                  AES256_CTL0_CM_0                /*!< ECB */
N#define AESCM_1                                  AES256_CTL0_CM_1                /*!< CBC */
N#define AESCM_2                                  AES256_CTL0_CM_2                /*!< OFB */
N#define AESCM_3                                  AES256_CTL0_CM_3                /*!< CFB */
N#define AESCM__ECB                               AES256_CTL0_CM__ECB             /*!< ECB */
N#define AESCM__CBC                               AES256_CTL0_CM__CBC             /*!< CBC */
N#define AESCM__OFB                               AES256_CTL0_CM__OFB             /*!< OFB */
N#define AESCM__CFB                               AES256_CTL0_CM__CFB             /*!< CFB */
N/* AESACTL0[AESSWRST] Bits */
N#define AESSWRST_OFS                             AES256_CTL0_SWRST_OFS           /*!< AESSWRST Offset */
N#define AESSWRST                                 AES256_CTL0_SWRST               /*!< AES software reset */
N/* AESACTL0[AESRDYIFG] Bits */
N#define AESRDYIFG_OFS                            AES256_CTL0_RDYIFG_OFS          /*!< AESRDYIFG Offset */
N#define AESRDYIFG                                AES256_CTL0_RDYIFG              /*!< AES ready interrupt flag */
N/* AESACTL0[AESERRFG] Bits */
N#define AESERRFG_OFS                             AES256_CTL0_ERRFG_OFS           /*!< AESERRFG Offset */
N#define AESERRFG                                 AES256_CTL0_ERRFG               /*!< AES error flag */
N/* AESACTL0[AESRDYIE] Bits */
N#define AESRDYIE_OFS                             AES256_CTL0_RDYIE_OFS           /*!< AESRDYIE Offset */
N#define AESRDYIE                                 AES256_CTL0_RDYIE               /*!< AES ready interrupt enable */
N/* AESACTL0[AESCMEN] Bits */
N#define AESCMEN_OFS                              AES256_CTL0_CMEN_OFS            /*!< AESCMEN Offset */
N#define AESCMEN                                  AES256_CTL0_CMEN                /*!< AES cipher mode enable */
N/* AESACTL1[AESBLKCNT] Bits */
N#define AESBLKCNT_OFS                            AES256_CTL1_BLKCNT_OFS          /*!< AESBLKCNT Offset */
N#define AESBLKCNT_M                              AES256_CTL1_BLKCNT_MASK         /*!< Cipher Block Counter */
N#define AESBLKCNT0                               AES256_CTL1_BLKCNT0             /*!< AESBLKCNT Bit 0 */
N#define AESBLKCNT1                               AES256_CTL1_BLKCNT1             /*!< AESBLKCNT Bit 1 */
N#define AESBLKCNT2                               AES256_CTL1_BLKCNT2             /*!< AESBLKCNT Bit 2 */
N#define AESBLKCNT3                               AES256_CTL1_BLKCNT3             /*!< AESBLKCNT Bit 3 */
N#define AESBLKCNT4                               AES256_CTL1_BLKCNT4             /*!< AESBLKCNT Bit 4 */
N#define AESBLKCNT5                               AES256_CTL1_BLKCNT5             /*!< AESBLKCNT Bit 5 */
N#define AESBLKCNT6                               AES256_CTL1_BLKCNT6             /*!< AESBLKCNT Bit 6 */
N#define AESBLKCNT7                               AES256_CTL1_BLKCNT7             /*!< AESBLKCNT Bit 7 */
N/* AESASTAT[AESBUSY] Bits */
N#define AESBUSY_OFS                              AES256_STAT_BUSY_OFS            /*!< AESBUSY Offset */
N#define AESBUSY                                  AES256_STAT_BUSY                /*!< AES accelerator module busy */
N/* AESASTAT[AESKEYWR] Bits */
N#define AESKEYWR_OFS                             AES256_STAT_KEYWR_OFS           /*!< AESKEYWR Offset */
N#define AESKEYWR                                 AES256_STAT_KEYWR               /*!< All 16 bytes written to AESAKEY */
N/* AESASTAT[AESDINWR] Bits */
N#define AESDINWR_OFS                             AES256_STAT_DINWR_OFS           /*!< AESDINWR Offset */
N#define AESDINWR                                 AES256_STAT_DINWR               /*!< All 16 bytes written to AESADIN, AESAXDIN or AESAXIN */
N/* AESASTAT[AESDOUTRD] Bits */
N#define AESDOUTRD_OFS                            AES256_STAT_DOUTRD_OFS          /*!< AESDOUTRD Offset */
N#define AESDOUTRD                                AES256_STAT_DOUTRD              /*!< All 16 bytes read from AESADOUT */
N/* AESASTAT[AESKEYCNT] Bits */
N#define AESKEYCNT_OFS                            AES256_STAT_KEYCNT_OFS          /*!< AESKEYCNT Offset */
N#define AESKEYCNT_M                              AES256_STAT_KEYCNT_MASK         /*!< Bytes written via AESAKEY for AESKLx=00, half-words written via AESAKEY */
N#define AESKEYCNT0                               AES256_STAT_KEYCNT0             /*!< AESKEYCNT Bit 0 */
N#define AESKEYCNT1                               AES256_STAT_KEYCNT1             /*!< AESKEYCNT Bit 1 */
N#define AESKEYCNT2                               AES256_STAT_KEYCNT2             /*!< AESKEYCNT Bit 2 */
N#define AESKEYCNT3                               AES256_STAT_KEYCNT3             /*!< AESKEYCNT Bit 3 */
N/* AESASTAT[AESDINCNT] Bits */
N#define AESDINCNT_OFS                            AES256_STAT_DINCNT_OFS          /*!< AESDINCNT Offset */
N#define AESDINCNT_M                              AES256_STAT_DINCNT_MASK         /*!< Bytes written via AESADIN, AESAXDIN or AESAXIN */
N#define AESDINCNT0                               AES256_STAT_DINCNT0             /*!< AESDINCNT Bit 0 */
N#define AESDINCNT1                               AES256_STAT_DINCNT1             /*!< AESDINCNT Bit 1 */
N#define AESDINCNT2                               AES256_STAT_DINCNT2             /*!< AESDINCNT Bit 2 */
N#define AESDINCNT3                               AES256_STAT_DINCNT3             /*!< AESDINCNT Bit 3 */
N/* AESASTAT[AESDOUTCNT] Bits */
N#define AESDOUTCNT_OFS                           AES256_STAT_DOUTCNT_OFS         /*!< AESDOUTCNT Offset */
N#define AESDOUTCNT_M                             AES256_STAT_DOUTCNT_MASK        /*!< Bytes read via AESADOUT */
N#define AESDOUTCNT0                              AES256_STAT_DOUTCNT0            /*!< AESDOUTCNT Bit 0 */
N#define AESDOUTCNT1                              AES256_STAT_DOUTCNT1            /*!< AESDOUTCNT Bit 1 */
N#define AESDOUTCNT2                              AES256_STAT_DOUTCNT2            /*!< AESDOUTCNT Bit 2 */
N#define AESDOUTCNT3                              AES256_STAT_DOUTCNT3            /*!< AESDOUTCNT Bit 3 */
N/* AESAKEY[AESKEY0] Bits */
N#define AESKEY0_OFS                              AES256_KEY_KEY0_OFS             /*!< AESKEY0 Offset */
N#define AESKEY0_M                                AES256_KEY_KEY0_MASK            /*!< AES key byte n when AESAKEY is written as half-word */
N#define AESKEY00                                 AES256_KEY_KEY00                /*!< AESKEY0 Bit 0 */
N#define AESKEY01                                 AES256_KEY_KEY01                /*!< AESKEY0 Bit 1 */
N#define AESKEY02                                 AES256_KEY_KEY02                /*!< AESKEY0 Bit 2 */
N#define AESKEY03                                 AES256_KEY_KEY03                /*!< AESKEY0 Bit 3 */
N#define AESKEY04                                 AES256_KEY_KEY04                /*!< AESKEY0 Bit 4 */
N#define AESKEY05                                 AES256_KEY_KEY05                /*!< AESKEY0 Bit 5 */
N#define AESKEY06                                 AES256_KEY_KEY06                /*!< AESKEY0 Bit 6 */
N#define AESKEY07                                 AES256_KEY_KEY07                /*!< AESKEY0 Bit 7 */
N/* AESAKEY[AESKEY1] Bits */
N#define AESKEY1_OFS                              AES256_KEY_KEY1_OFS             /*!< AESKEY1 Offset */
N#define AESKEY1_M                                AES256_KEY_KEY1_MASK            /*!< AES key byte n+1 when AESAKEY is written as half-word */
N#define AESKEY10                                 AES256_KEY_KEY10                /*!< AESKEY1 Bit 0 */
N#define AESKEY11                                 AES256_KEY_KEY11                /*!< AESKEY1 Bit 1 */
N#define AESKEY12                                 AES256_KEY_KEY12                /*!< AESKEY1 Bit 2 */
N#define AESKEY13                                 AES256_KEY_KEY13                /*!< AESKEY1 Bit 3 */
N#define AESKEY14                                 AES256_KEY_KEY14                /*!< AESKEY1 Bit 4 */
N#define AESKEY15                                 AES256_KEY_KEY15                /*!< AESKEY1 Bit 5 */
N#define AESKEY16                                 AES256_KEY_KEY16                /*!< AESKEY1 Bit 6 */
N#define AESKEY17                                 AES256_KEY_KEY17                /*!< AESKEY1 Bit 7 */
N/* AESADIN[AESDIN0] Bits */
N#define AESDIN0_OFS                              AES256_DIN_DIN0_OFS             /*!< AESDIN0 Offset */
N#define AESDIN0_M                                AES256_DIN_DIN0_MASK            /*!< AES data in byte n when AESADIN is written as half-word */
N#define AESDIN00                                 AES256_DIN_DIN00                /*!< AESDIN0 Bit 0 */
N#define AESDIN01                                 AES256_DIN_DIN01                /*!< AESDIN0 Bit 1 */
N#define AESDIN02                                 AES256_DIN_DIN02                /*!< AESDIN0 Bit 2 */
N#define AESDIN03                                 AES256_DIN_DIN03                /*!< AESDIN0 Bit 3 */
N#define AESDIN04                                 AES256_DIN_DIN04                /*!< AESDIN0 Bit 4 */
N#define AESDIN05                                 AES256_DIN_DIN05                /*!< AESDIN0 Bit 5 */
N#define AESDIN06                                 AES256_DIN_DIN06                /*!< AESDIN0 Bit 6 */
N#define AESDIN07                                 AES256_DIN_DIN07                /*!< AESDIN0 Bit 7 */
N/* AESADIN[AESDIN1] Bits */
N#define AESDIN1_OFS                              AES256_DIN_DIN1_OFS             /*!< AESDIN1 Offset */
N#define AESDIN1_M                                AES256_DIN_DIN1_MASK            /*!< AES data in byte n+1 when AESADIN is written as half-word */
N#define AESDIN10                                 AES256_DIN_DIN10                /*!< AESDIN1 Bit 0 */
N#define AESDIN11                                 AES256_DIN_DIN11                /*!< AESDIN1 Bit 1 */
N#define AESDIN12                                 AES256_DIN_DIN12                /*!< AESDIN1 Bit 2 */
N#define AESDIN13                                 AES256_DIN_DIN13                /*!< AESDIN1 Bit 3 */
N#define AESDIN14                                 AES256_DIN_DIN14                /*!< AESDIN1 Bit 4 */
N#define AESDIN15                                 AES256_DIN_DIN15                /*!< AESDIN1 Bit 5 */
N#define AESDIN16                                 AES256_DIN_DIN16                /*!< AESDIN1 Bit 6 */
N#define AESDIN17                                 AES256_DIN_DIN17                /*!< AESDIN1 Bit 7 */
N/* AESADOUT[AESDOUT0] Bits */
N#define AESDOUT0_OFS                             AES256_DOUT_DOUT0_OFS           /*!< AESDOUT0 Offset */
N#define AESDOUT0_M                               AES256_DOUT_DOUT0_MASK          /*!< AES data out byte n when AESADOUT is read as half-word */
N#define AESDOUT00                                AES256_DOUT_DOUT00              /*!< AESDOUT0 Bit 0 */
N#define AESDOUT01                                AES256_DOUT_DOUT01              /*!< AESDOUT0 Bit 1 */
N#define AESDOUT02                                AES256_DOUT_DOUT02              /*!< AESDOUT0 Bit 2 */
N#define AESDOUT03                                AES256_DOUT_DOUT03              /*!< AESDOUT0 Bit 3 */
N#define AESDOUT04                                AES256_DOUT_DOUT04              /*!< AESDOUT0 Bit 4 */
N#define AESDOUT05                                AES256_DOUT_DOUT05              /*!< AESDOUT0 Bit 5 */
N#define AESDOUT06                                AES256_DOUT_DOUT06              /*!< AESDOUT0 Bit 6 */
N#define AESDOUT07                                AES256_DOUT_DOUT07              /*!< AESDOUT0 Bit 7 */
N/* AESADOUT[AESDOUT1] Bits */
N#define AESDOUT1_OFS                             AES256_DOUT_DOUT1_OFS           /*!< AESDOUT1 Offset */
N#define AESDOUT1_M                               AES256_DOUT_DOUT1_MASK          /*!< AES data out byte n+1 when AESADOUT is read as half-word */
N#define AESDOUT10                                AES256_DOUT_DOUT10              /*!< AESDOUT1 Bit 0 */
N#define AESDOUT11                                AES256_DOUT_DOUT11              /*!< AESDOUT1 Bit 1 */
N#define AESDOUT12                                AES256_DOUT_DOUT12              /*!< AESDOUT1 Bit 2 */
N#define AESDOUT13                                AES256_DOUT_DOUT13              /*!< AESDOUT1 Bit 3 */
N#define AESDOUT14                                AES256_DOUT_DOUT14              /*!< AESDOUT1 Bit 4 */
N#define AESDOUT15                                AES256_DOUT_DOUT15              /*!< AESDOUT1 Bit 5 */
N#define AESDOUT16                                AES256_DOUT_DOUT16              /*!< AESDOUT1 Bit 6 */
N#define AESDOUT17                                AES256_DOUT_DOUT17              /*!< AESDOUT1 Bit 7 */
N/* AESAXDIN[AESXDIN0] Bits */
N#define AESXDIN0_OFS                             AES256_XDIN_XDIN0_OFS           /*!< AESXDIN0 Offset */
N#define AESXDIN0_M                               AES256_XDIN_XDIN0_MASK          /*!< AES data in byte n when AESAXDIN is written as half-word */
N#define AESXDIN00                                AES256_XDIN_XDIN00              /*!< AESXDIN0 Bit 0 */
N#define AESXDIN01                                AES256_XDIN_XDIN01              /*!< AESXDIN0 Bit 1 */
N#define AESXDIN02                                AES256_XDIN_XDIN02              /*!< AESXDIN0 Bit 2 */
N#define AESXDIN03                                AES256_XDIN_XDIN03              /*!< AESXDIN0 Bit 3 */
N#define AESXDIN04                                AES256_XDIN_XDIN04              /*!< AESXDIN0 Bit 4 */
N#define AESXDIN05                                AES256_XDIN_XDIN05              /*!< AESXDIN0 Bit 5 */
N#define AESXDIN06                                AES256_XDIN_XDIN06              /*!< AESXDIN0 Bit 6 */
N#define AESXDIN07                                AES256_XDIN_XDIN07              /*!< AESXDIN0 Bit 7 */
N/* AESAXDIN[AESXDIN1] Bits */
N#define AESXDIN1_OFS                             AES256_XDIN_XDIN1_OFS           /*!< AESXDIN1 Offset */
N#define AESXDIN1_M                               AES256_XDIN_XDIN1_MASK          /*!< AES data in byte n+1 when AESAXDIN is written as half-word */
N#define AESXDIN10                                AES256_XDIN_XDIN10              /*!< AESXDIN1 Bit 0 */
N#define AESXDIN11                                AES256_XDIN_XDIN11              /*!< AESXDIN1 Bit 1 */
N#define AESXDIN12                                AES256_XDIN_XDIN12              /*!< AESXDIN1 Bit 2 */
N#define AESXDIN13                                AES256_XDIN_XDIN13              /*!< AESXDIN1 Bit 3 */
N#define AESXDIN14                                AES256_XDIN_XDIN14              /*!< AESXDIN1 Bit 4 */
N#define AESXDIN15                                AES256_XDIN_XDIN15              /*!< AESXDIN1 Bit 5 */
N#define AESXDIN16                                AES256_XDIN_XDIN16              /*!< AESXDIN1 Bit 6 */
N#define AESXDIN17                                AES256_XDIN_XDIN17              /*!< AESXDIN1 Bit 7 */
N/* AESAXIN[AESXIN0] Bits */
N#define AESXIN0_OFS                              AES256_XIN_XIN0_OFS             /*!< AESXIN0 Offset */
N#define AESXIN0_M                                AES256_XIN_XIN0_MASK            /*!< AES data in byte n when AESAXIN is written as half-word */
N#define AESXIN00                                 AES256_XIN_XIN00                /*!< AESXIN0 Bit 0 */
N#define AESXIN01                                 AES256_XIN_XIN01                /*!< AESXIN0 Bit 1 */
N#define AESXIN02                                 AES256_XIN_XIN02                /*!< AESXIN0 Bit 2 */
N#define AESXIN03                                 AES256_XIN_XIN03                /*!< AESXIN0 Bit 3 */
N#define AESXIN04                                 AES256_XIN_XIN04                /*!< AESXIN0 Bit 4 */
N#define AESXIN05                                 AES256_XIN_XIN05                /*!< AESXIN0 Bit 5 */
N#define AESXIN06                                 AES256_XIN_XIN06                /*!< AESXIN0 Bit 6 */
N#define AESXIN07                                 AES256_XIN_XIN07                /*!< AESXIN0 Bit 7 */
N/* AESAXIN[AESXIN1] Bits */
N#define AESXIN1_OFS                              AES256_XIN_XIN1_OFS             /*!< AESXIN1 Offset */
N#define AESXIN1_M                                AES256_XIN_XIN1_MASK            /*!< AES data in byte n+1 when AESAXIN is written as half-word */
N#define AESXIN10                                 AES256_XIN_XIN10                /*!< AESXIN1 Bit 0 */
N#define AESXIN11                                 AES256_XIN_XIN11                /*!< AESXIN1 Bit 1 */
N#define AESXIN12                                 AES256_XIN_XIN12                /*!< AESXIN1 Bit 2 */
N#define AESXIN13                                 AES256_XIN_XIN13                /*!< AESXIN1 Bit 3 */
N#define AESXIN14                                 AES256_XIN_XIN14                /*!< AESXIN1 Bit 4 */
N#define AESXIN15                                 AES256_XIN_XIN15                /*!< AESXIN1 Bit 5 */
N#define AESXIN16                                 AES256_XIN_XIN16                /*!< AESXIN1 Bit 6 */
N#define AESXIN17                                 AES256_XIN_XIN17                /*!< AESXIN1 Bit 7 */
N
N/******************************************************************************
N* CAPTIO Bits (legacy section)
N******************************************************************************/
N/* CAPTIO0CTL[CAPTIOPISEL] Bits */
N#define CAPTIOPISEL_OFS                          CAPTIO_CTL_PISEL_OFS            /*!< CAPTIOPISEL Offset */
N#define CAPTIOPISEL_M                            CAPTIO_CTL_PISEL_MASK           /*!< Capacitive Touch IO pin select */
N#define CAPTIOPISEL0                             CAPTIO_CTL_PISEL0               /*!< CAPTIOPISEL Bit 0 */
N#define CAPTIOPISEL1                             CAPTIO_CTL_PISEL1               /*!< CAPTIOPISEL Bit 1 */
N#define CAPTIOPISEL2                             CAPTIO_CTL_PISEL2               /*!< CAPTIOPISEL Bit 2 */
N#define CAPTIOPISEL_0                            CAPTIO_CTL_PISEL_0              /*!< Px.0 */
N#define CAPTIOPISEL_1                            CAPTIO_CTL_PISEL_1              /*!< Px.1 */
N#define CAPTIOPISEL_2                            CAPTIO_CTL_PISEL_2              /*!< Px.2 */
N#define CAPTIOPISEL_3                            CAPTIO_CTL_PISEL_3              /*!< Px.3 */
N#define CAPTIOPISEL_4                            CAPTIO_CTL_PISEL_4              /*!< Px.4 */
N#define CAPTIOPISEL_5                            CAPTIO_CTL_PISEL_5              /*!< Px.5 */
N#define CAPTIOPISEL_6                            CAPTIO_CTL_PISEL_6              /*!< Px.6 */
N#define CAPTIOPISEL_7                            CAPTIO_CTL_PISEL_7              /*!< Px.7 */
N/* CAPTIO0CTL[CAPTIOPOSEL] Bits */
N#define CAPTIOPOSEL_OFS                          CAPTIO_CTL_POSEL_OFS            /*!< CAPTIOPOSEL Offset */
N#define CAPTIOPOSEL_M                            CAPTIO_CTL_POSEL_MASK           /*!< Capacitive Touch IO port select */
N#define CAPTIOPOSEL0                             CAPTIO_CTL_POSEL0               /*!< CAPTIOPOSEL Bit 0 */
N#define CAPTIOPOSEL1                             CAPTIO_CTL_POSEL1               /*!< CAPTIOPOSEL Bit 1 */
N#define CAPTIOPOSEL2                             CAPTIO_CTL_POSEL2               /*!< CAPTIOPOSEL Bit 2 */
N#define CAPTIOPOSEL3                             CAPTIO_CTL_POSEL3               /*!< CAPTIOPOSEL Bit 3 */
N#define CAPTIOPOSEL_0                            CAPTIO_CTL_POSEL_0              /*!< Px = PJ */
N#define CAPTIOPOSEL_1                            CAPTIO_CTL_POSEL_1              /*!< Px = P1 */
N#define CAPTIOPOSEL_2                            CAPTIO_CTL_POSEL_2              /*!< Px = P2 */
N#define CAPTIOPOSEL_3                            CAPTIO_CTL_POSEL_3              /*!< Px = P3 */
N#define CAPTIOPOSEL_4                            CAPTIO_CTL_POSEL_4              /*!< Px = P4 */
N#define CAPTIOPOSEL_5                            CAPTIO_CTL_POSEL_5              /*!< Px = P5 */
N#define CAPTIOPOSEL_6                            CAPTIO_CTL_POSEL_6              /*!< Px = P6 */
N#define CAPTIOPOSEL_7                            CAPTIO_CTL_POSEL_7              /*!< Px = P7 */
N#define CAPTIOPOSEL_8                            CAPTIO_CTL_POSEL_8              /*!< Px = P8 */
N#define CAPTIOPOSEL_9                            CAPTIO_CTL_POSEL_9              /*!< Px = P9 */
N#define CAPTIOPOSEL_10                           CAPTIO_CTL_POSEL_10             /*!< Px = P10 */
N#define CAPTIOPOSEL_11                           CAPTIO_CTL_POSEL_11             /*!< Px = P11 */
N#define CAPTIOPOSEL_12                           CAPTIO_CTL_POSEL_12             /*!< Px = P12 */
N#define CAPTIOPOSEL_13                           CAPTIO_CTL_POSEL_13             /*!< Px = P13 */
N#define CAPTIOPOSEL_14                           CAPTIO_CTL_POSEL_14             /*!< Px = P14 */
N#define CAPTIOPOSEL_15                           CAPTIO_CTL_POSEL_15             /*!< Px = P15 */
N#define CAPTIOPOSEL__PJ                          CAPTIO_CTL_POSEL__PJ            /*!< Px = PJ */
N#define CAPTIOPOSEL__P1                          CAPTIO_CTL_POSEL__P1            /*!< Px = P1 */
N#define CAPTIOPOSEL__P2                          CAPTIO_CTL_POSEL__P2            /*!< Px = P2 */
N#define CAPTIOPOSEL__P3                          CAPTIO_CTL_POSEL__P3            /*!< Px = P3 */
N#define CAPTIOPOSEL__P4                          CAPTIO_CTL_POSEL__P4            /*!< Px = P4 */
N#define CAPTIOPOSEL__P5                          CAPTIO_CTL_POSEL__P5            /*!< Px = P5 */
N#define CAPTIOPOSEL__P6                          CAPTIO_CTL_POSEL__P6            /*!< Px = P6 */
N#define CAPTIOPOSEL__P7                          CAPTIO_CTL_POSEL__P7            /*!< Px = P7 */
N#define CAPTIOPOSEL__P8                          CAPTIO_CTL_POSEL__P8            /*!< Px = P8 */
N#define CAPTIOPOSEL__P9                          CAPTIO_CTL_POSEL__P9            /*!< Px = P9 */
N#define CAPTIOPOSEL__P10                         CAPTIO_CTL_POSEL__P10           /*!< Px = P10 */
N#define CAPTIOPOSEL__P11                         CAPTIO_CTL_POSEL__P11           /*!< Px = P11 */
N#define CAPTIOPOSEL__P12                         CAPTIO_CTL_POSEL__P12           /*!< Px = P12 */
N#define CAPTIOPOSEL__P13                         CAPTIO_CTL_POSEL__P13           /*!< Px = P13 */
N#define CAPTIOPOSEL__P14                         CAPTIO_CTL_POSEL__P14           /*!< Px = P14 */
N#define CAPTIOPOSEL__P15                         CAPTIO_CTL_POSEL__P15           /*!< Px = P15 */
N/* CAPTIO0CTL[CAPTIOEN] Bits */
N#define CAPTIOEN_OFS                             CAPTIO_CTL_EN_OFS               /*!< CAPTIOEN Offset */
N#define CAPTIOEN                                 CAPTIO_CTL_EN                   /*!< Capacitive Touch IO enable */
N/* CAPTIO0CTL[CAPTIOSTATE] Bits */
N#define CAPTIOSTATE_OFS                          CAPTIO_CTL_STATE_OFS            /*!< CAPTIOSTATE Offset */
N#define CAPTIOSTATE                              CAPTIO_CTL_STATE                /*!< Capacitive Touch IO state */
N
N/******************************************************************************
N* COMP_E Bits (legacy section)
N******************************************************************************/
N/* CE0CTL0[CEIPSEL] Bits */
N#define CEIPSEL_OFS                              COMP_E_CTL0_IPSEL_OFS           /*!< CEIPSEL Offset */
N#define CEIPSEL_M                                COMP_E_CTL0_IPSEL_MASK          /*!< Channel input selected for the V+ terminal */
N#define CEIPSEL0                                 COMP_E_CTL0_IPSEL0              /*!< CEIPSEL Bit 0 */
N#define CEIPSEL1                                 COMP_E_CTL0_IPSEL1              /*!< CEIPSEL Bit 1 */
N#define CEIPSEL2                                 COMP_E_CTL0_IPSEL2              /*!< CEIPSEL Bit 2 */
N#define CEIPSEL3                                 COMP_E_CTL0_IPSEL3              /*!< CEIPSEL Bit 3 */
N#define CEIPSEL_0                                COMP_E_CTL0_IPSEL_0             /*!< Channel 0 selected */
N#define CEIPSEL_1                                COMP_E_CTL0_IPSEL_1             /*!< Channel 1 selected */
N#define CEIPSEL_2                                COMP_E_CTL0_IPSEL_2             /*!< Channel 2 selected */
N#define CEIPSEL_3                                COMP_E_CTL0_IPSEL_3             /*!< Channel 3 selected */
N#define CEIPSEL_4                                COMP_E_CTL0_IPSEL_4             /*!< Channel 4 selected */
N#define CEIPSEL_5                                COMP_E_CTL0_IPSEL_5             /*!< Channel 5 selected */
N#define CEIPSEL_6                                COMP_E_CTL0_IPSEL_6             /*!< Channel 6 selected */
N#define CEIPSEL_7                                COMP_E_CTL0_IPSEL_7             /*!< Channel 7 selected */
N#define CEIPSEL_8                                COMP_E_CTL0_IPSEL_8             /*!< Channel 8 selected */
N#define CEIPSEL_9                                COMP_E_CTL0_IPSEL_9             /*!< Channel 9 selected */
N#define CEIPSEL_10                               COMP_E_CTL0_IPSEL_10            /*!< Channel 10 selected */
N#define CEIPSEL_11                               COMP_E_CTL0_IPSEL_11            /*!< Channel 11 selected */
N#define CEIPSEL_12                               COMP_E_CTL0_IPSEL_12            /*!< Channel 12 selected */
N#define CEIPSEL_13                               COMP_E_CTL0_IPSEL_13            /*!< Channel 13 selected */
N#define CEIPSEL_14                               COMP_E_CTL0_IPSEL_14            /*!< Channel 14 selected */
N#define CEIPSEL_15                               COMP_E_CTL0_IPSEL_15            /*!< Channel 15 selected */
N/* CE0CTL0[CEIPEN] Bits */
N#define CEIPEN_OFS                               COMP_E_CTL0_IPEN_OFS            /*!< CEIPEN Offset */
N#define CEIPEN                                   COMP_E_CTL0_IPEN                /*!< Channel input enable for the V+ terminal */
N/* CE0CTL0[CEIMSEL] Bits */
N#define CEIMSEL_OFS                              COMP_E_CTL0_IMSEL_OFS           /*!< CEIMSEL Offset */
N#define CEIMSEL_M                                COMP_E_CTL0_IMSEL_MASK          /*!< Channel input selected for the - terminal */
N#define CEIMSEL0                                 COMP_E_CTL0_IMSEL0              /*!< CEIMSEL Bit 0 */
N#define CEIMSEL1                                 COMP_E_CTL0_IMSEL1              /*!< CEIMSEL Bit 1 */
N#define CEIMSEL2                                 COMP_E_CTL0_IMSEL2              /*!< CEIMSEL Bit 2 */
N#define CEIMSEL3                                 COMP_E_CTL0_IMSEL3              /*!< CEIMSEL Bit 3 */
N#define CEIMSEL_0                                COMP_E_CTL0_IMSEL_0             /*!< Channel 0 selected */
N#define CEIMSEL_1                                COMP_E_CTL0_IMSEL_1             /*!< Channel 1 selected */
N#define CEIMSEL_2                                COMP_E_CTL0_IMSEL_2             /*!< Channel 2 selected */
N#define CEIMSEL_3                                COMP_E_CTL0_IMSEL_3             /*!< Channel 3 selected */
N#define CEIMSEL_4                                COMP_E_CTL0_IMSEL_4             /*!< Channel 4 selected */
N#define CEIMSEL_5                                COMP_E_CTL0_IMSEL_5             /*!< Channel 5 selected */
N#define CEIMSEL_6                                COMP_E_CTL0_IMSEL_6             /*!< Channel 6 selected */
N#define CEIMSEL_7                                COMP_E_CTL0_IMSEL_7             /*!< Channel 7 selected */
N#define CEIMSEL_8                                COMP_E_CTL0_IMSEL_8             /*!< Channel 8 selected */
N#define CEIMSEL_9                                COMP_E_CTL0_IMSEL_9             /*!< Channel 9 selected */
N#define CEIMSEL_10                               COMP_E_CTL0_IMSEL_10            /*!< Channel 10 selected */
N#define CEIMSEL_11                               COMP_E_CTL0_IMSEL_11            /*!< Channel 11 selected */
N#define CEIMSEL_12                               COMP_E_CTL0_IMSEL_12            /*!< Channel 12 selected */
N#define CEIMSEL_13                               COMP_E_CTL0_IMSEL_13            /*!< Channel 13 selected */
N#define CEIMSEL_14                               COMP_E_CTL0_IMSEL_14            /*!< Channel 14 selected */
N#define CEIMSEL_15                               COMP_E_CTL0_IMSEL_15            /*!< Channel 15 selected */
N/* CE0CTL0[CEIMEN] Bits */
N#define CEIMEN_OFS                               COMP_E_CTL0_IMEN_OFS            /*!< CEIMEN Offset */
N#define CEIMEN                                   COMP_E_CTL0_IMEN                /*!< Channel input enable for the - terminal */
N/* CE0CTL1[CEOUT] Bits */
N#define CEOUT_OFS                                COMP_E_CTL1_OUT_OFS             /*!< CEOUT Offset */
N#define CEOUT                                    COMP_E_CTL1_OUT                 /*!< Comparator output value */
N/* CE0CTL1[CEOUTPOL] Bits */
N#define CEOUTPOL_OFS                             COMP_E_CTL1_OUTPOL_OFS          /*!< CEOUTPOL Offset */
N#define CEOUTPOL                                 COMP_E_CTL1_OUTPOL              /*!< Comparator output polarity */
N/* CE0CTL1[CEF] Bits */
N#define CEF_OFS                                  COMP_E_CTL1_F_OFS               /*!< CEF Offset */
N#define CEF                                      COMP_E_CTL1_F                   /*!< Comparator output filter */
N/* CE0CTL1[CEIES] Bits */
N#define CEIES_OFS                                COMP_E_CTL1_IES_OFS             /*!< CEIES Offset */
N#define CEIES                                    COMP_E_CTL1_IES                 /*!< Interrupt edge select for CEIIFG and CEIFG */
N/* CE0CTL1[CESHORT] Bits */
N#define CESHORT_OFS                              COMP_E_CTL1_SHORT_OFS           /*!< CESHORT Offset */
N#define CESHORT                                  COMP_E_CTL1_SHORT               /*!< Input short */
N/* CE0CTL1[CEEX] Bits */
N#define CEEX_OFS                                 COMP_E_CTL1_EX_OFS              /*!< CEEX Offset */
N#define CEEX                                     COMP_E_CTL1_EX                  /*!< Exchange */
N/* CE0CTL1[CEFDLY] Bits */
N#define CEFDLY_OFS                               COMP_E_CTL1_FDLY_OFS            /*!< CEFDLY Offset */
N#define CEFDLY_M                                 COMP_E_CTL1_FDLY_MASK           /*!< Filter delay */
N#define CEFDLY0                                  COMP_E_CTL1_FDLY0               /*!< CEFDLY Bit 0 */
N#define CEFDLY1                                  COMP_E_CTL1_FDLY1               /*!< CEFDLY Bit 1 */
N#define CEFDLY_0                                 COMP_E_CTL1_FDLY_0              /*!< Typical filter delay of TBD (450) ns */
N#define CEFDLY_1                                 COMP_E_CTL1_FDLY_1              /*!< Typical filter delay of TBD (900) ns */
N#define CEFDLY_2                                 COMP_E_CTL1_FDLY_2              /*!< Typical filter delay of TBD (1800) ns */
N#define CEFDLY_3                                 COMP_E_CTL1_FDLY_3              /*!< Typical filter delay of TBD (3600) ns */
N/* CE0CTL1[CEPWRMD] Bits */
N#define CEPWRMD_OFS                              COMP_E_CTL1_PWRMD_OFS           /*!< CEPWRMD Offset */
N#define CEPWRMD_M                                COMP_E_CTL1_PWRMD_MASK          /*!< Power Mode */
N#define CEPWRMD0                                 COMP_E_CTL1_PWRMD0              /*!< CEPWRMD Bit 0 */
N#define CEPWRMD1                                 COMP_E_CTL1_PWRMD1              /*!< CEPWRMD Bit 1 */
N#define CEPWRMD_0                                COMP_E_CTL1_PWRMD_0             /*!< High-speed mode */
N#define CEPWRMD_1                                COMP_E_CTL1_PWRMD_1             /*!< Normal mode */
N#define CEPWRMD_2                                COMP_E_CTL1_PWRMD_2             /*!< Ultra-low power mode */
N/* CE0CTL1[CEON] Bits */
N#define CEON_OFS                                 COMP_E_CTL1_ON_OFS              /*!< CEON Offset */
N#define CEON                                     COMP_E_CTL1_ON                  /*!< Comparator On */
N/* CE0CTL1[CEMRVL] Bits */
N#define CEMRVL_OFS                               COMP_E_CTL1_MRVL_OFS            /*!< CEMRVL Offset */
N#define CEMRVL                                   COMP_E_CTL1_MRVL                /*!< This bit is valid of CEMRVS is set to 1 */
N/* CE0CTL1[CEMRVS] Bits */
N#define CEMRVS_OFS                               COMP_E_CTL1_MRVS_OFS            /*!< CEMRVS Offset */
N#define CEMRVS                                   COMP_E_CTL1_MRVS                
N/* CE0CTL2[CEREF0] Bits */
N#define CEREF0_OFS                               COMP_E_CTL2_REF0_OFS            /*!< CEREF0 Offset */
N#define CEREF0_M                                 COMP_E_CTL2_REF0_MASK           /*!< Reference resistor tap 0 */
N#define CEREF00                                  COMP_E_CTL2_REF00               /*!< CEREF0 Bit 0 */
N#define CEREF01                                  COMP_E_CTL2_REF01               /*!< CEREF0 Bit 1 */
N#define CEREF02                                  COMP_E_CTL2_REF02               /*!< CEREF0 Bit 2 */
N#define CEREF03                                  COMP_E_CTL2_REF03               /*!< CEREF0 Bit 3 */
N#define CEREF04                                  COMP_E_CTL2_REF04               /*!< CEREF0 Bit 4 */
N#define CEREF0_0                                 COMP_E_CTL2_REF0_0              /*!< Reference resistor tap for setting 0. */
N#define CEREF0_1                                 COMP_E_CTL2_REF0_1              /*!< Reference resistor tap for setting 1. */
N#define CEREF0_2                                 COMP_E_CTL2_REF0_2              /*!< Reference resistor tap for setting 2. */
N#define CEREF0_3                                 COMP_E_CTL2_REF0_3              /*!< Reference resistor tap for setting 3. */
N#define CEREF0_4                                 COMP_E_CTL2_REF0_4              /*!< Reference resistor tap for setting 4. */
N#define CEREF0_5                                 COMP_E_CTL2_REF0_5              /*!< Reference resistor tap for setting 5. */
N#define CEREF0_6                                 COMP_E_CTL2_REF0_6              /*!< Reference resistor tap for setting 6. */
N#define CEREF0_7                                 COMP_E_CTL2_REF0_7              /*!< Reference resistor tap for setting 7. */
N#define CEREF0_8                                 COMP_E_CTL2_REF0_8              /*!< Reference resistor tap for setting 8. */
N#define CEREF0_9                                 COMP_E_CTL2_REF0_9              /*!< Reference resistor tap for setting 9. */
N#define CEREF0_10                                COMP_E_CTL2_REF0_10             /*!< Reference resistor tap for setting 10. */
N#define CEREF0_11                                COMP_E_CTL2_REF0_11             /*!< Reference resistor tap for setting 11. */
N#define CEREF0_12                                COMP_E_CTL2_REF0_12             /*!< Reference resistor tap for setting 12. */
N#define CEREF0_13                                COMP_E_CTL2_REF0_13             /*!< Reference resistor tap for setting 13. */
N#define CEREF0_14                                COMP_E_CTL2_REF0_14             /*!< Reference resistor tap for setting 14. */
N#define CEREF0_15                                COMP_E_CTL2_REF0_15             /*!< Reference resistor tap for setting 15. */
N#define CEREF0_16                                COMP_E_CTL2_REF0_16             /*!< Reference resistor tap for setting 16. */
N#define CEREF0_17                                COMP_E_CTL2_REF0_17             /*!< Reference resistor tap for setting 17. */
N#define CEREF0_18                                COMP_E_CTL2_REF0_18             /*!< Reference resistor tap for setting 18. */
N#define CEREF0_19                                COMP_E_CTL2_REF0_19             /*!< Reference resistor tap for setting 19. */
N#define CEREF0_20                                COMP_E_CTL2_REF0_20             /*!< Reference resistor tap for setting 20. */
N#define CEREF0_21                                COMP_E_CTL2_REF0_21             /*!< Reference resistor tap for setting 21. */
N#define CEREF0_22                                COMP_E_CTL2_REF0_22             /*!< Reference resistor tap for setting 22. */
N#define CEREF0_23                                COMP_E_CTL2_REF0_23             /*!< Reference resistor tap for setting 23. */
N#define CEREF0_24                                COMP_E_CTL2_REF0_24             /*!< Reference resistor tap for setting 24. */
N#define CEREF0_25                                COMP_E_CTL2_REF0_25             /*!< Reference resistor tap for setting 25. */
N#define CEREF0_26                                COMP_E_CTL2_REF0_26             /*!< Reference resistor tap for setting 26. */
N#define CEREF0_27                                COMP_E_CTL2_REF0_27             /*!< Reference resistor tap for setting 27. */
N#define CEREF0_28                                COMP_E_CTL2_REF0_28             /*!< Reference resistor tap for setting 28. */
N#define CEREF0_29                                COMP_E_CTL2_REF0_29             /*!< Reference resistor tap for setting 29. */
N#define CEREF0_30                                COMP_E_CTL2_REF0_30             /*!< Reference resistor tap for setting 30. */
N#define CEREF0_31                                COMP_E_CTL2_REF0_31             /*!< Reference resistor tap for setting 31. */
N/* CE0CTL2[CERSEL] Bits */
N#define CERSEL_OFS                               COMP_E_CTL2_RSEL_OFS            /*!< CERSEL Offset */
N#define CERSEL                                   COMP_E_CTL2_RSEL                /*!< Reference select */
N/* CE0CTL2[CERS] Bits */
N#define CERS_OFS                                 COMP_E_CTL2_RS_OFS              /*!< CERS Offset */
N#define CERS_M                                   COMP_E_CTL2_RS_MASK             /*!< Reference source */
N#define CERS0                                    COMP_E_CTL2_RS0                 /*!< CERS Bit 0 */
N#define CERS1                                    COMP_E_CTL2_RS1                 /*!< CERS Bit 1 */
N#define CERS_0                                   COMP_E_CTL2_RS_0                /*!< No current is drawn by the reference circuitry */
N#define CERS_1                                   COMP_E_CTL2_RS_1                /*!< VCC applied to the resistor ladder */
N#define CERS_2                                   COMP_E_CTL2_RS_2                /*!< Shared reference voltage applied to the resistor ladder */
N#define CERS_3                                   COMP_E_CTL2_RS_3                /*!< Shared reference voltage supplied to V(CREF). Resistor ladder is off */
N/* CE0CTL2[CEREF1] Bits */
N#define CEREF1_OFS                               COMP_E_CTL2_REF1_OFS            /*!< CEREF1 Offset */
N#define CEREF1_M                                 COMP_E_CTL2_REF1_MASK           /*!< Reference resistor tap 1 */
N#define CEREF10                                  COMP_E_CTL2_REF10               /*!< CEREF1 Bit 0 */
N#define CEREF11                                  COMP_E_CTL2_REF11               /*!< CEREF1 Bit 1 */
N#define CEREF12                                  COMP_E_CTL2_REF12               /*!< CEREF1 Bit 2 */
N#define CEREF13                                  COMP_E_CTL2_REF13               /*!< CEREF1 Bit 3 */
N#define CEREF14                                  COMP_E_CTL2_REF14               /*!< CEREF1 Bit 4 */
N#define CEREF1_0                                 COMP_E_CTL2_REF1_0              /*!< Reference resistor tap for setting 0. */
N#define CEREF1_1                                 COMP_E_CTL2_REF1_1              /*!< Reference resistor tap for setting 1. */
N#define CEREF1_2                                 COMP_E_CTL2_REF1_2              /*!< Reference resistor tap for setting 2. */
N#define CEREF1_3                                 COMP_E_CTL2_REF1_3              /*!< Reference resistor tap for setting 3. */
N#define CEREF1_4                                 COMP_E_CTL2_REF1_4              /*!< Reference resistor tap for setting 4. */
N#define CEREF1_5                                 COMP_E_CTL2_REF1_5              /*!< Reference resistor tap for setting 5. */
N#define CEREF1_6                                 COMP_E_CTL2_REF1_6              /*!< Reference resistor tap for setting 6. */
N#define CEREF1_7                                 COMP_E_CTL2_REF1_7              /*!< Reference resistor tap for setting 7. */
N#define CEREF1_8                                 COMP_E_CTL2_REF1_8              /*!< Reference resistor tap for setting 8. */
N#define CEREF1_9                                 COMP_E_CTL2_REF1_9              /*!< Reference resistor tap for setting 9. */
N#define CEREF1_10                                COMP_E_CTL2_REF1_10             /*!< Reference resistor tap for setting 10. */
N#define CEREF1_11                                COMP_E_CTL2_REF1_11             /*!< Reference resistor tap for setting 11. */
N#define CEREF1_12                                COMP_E_CTL2_REF1_12             /*!< Reference resistor tap for setting 12. */
N#define CEREF1_13                                COMP_E_CTL2_REF1_13             /*!< Reference resistor tap for setting 13. */
N#define CEREF1_14                                COMP_E_CTL2_REF1_14             /*!< Reference resistor tap for setting 14. */
N#define CEREF1_15                                COMP_E_CTL2_REF1_15             /*!< Reference resistor tap for setting 15. */
N#define CEREF1_16                                COMP_E_CTL2_REF1_16             /*!< Reference resistor tap for setting 16. */
N#define CEREF1_17                                COMP_E_CTL2_REF1_17             /*!< Reference resistor tap for setting 17. */
N#define CEREF1_18                                COMP_E_CTL2_REF1_18             /*!< Reference resistor tap for setting 18. */
N#define CEREF1_19                                COMP_E_CTL2_REF1_19             /*!< Reference resistor tap for setting 19. */
N#define CEREF1_20                                COMP_E_CTL2_REF1_20             /*!< Reference resistor tap for setting 20. */
N#define CEREF1_21                                COMP_E_CTL2_REF1_21             /*!< Reference resistor tap for setting 21. */
N#define CEREF1_22                                COMP_E_CTL2_REF1_22             /*!< Reference resistor tap for setting 22. */
N#define CEREF1_23                                COMP_E_CTL2_REF1_23             /*!< Reference resistor tap for setting 23. */
N#define CEREF1_24                                COMP_E_CTL2_REF1_24             /*!< Reference resistor tap for setting 24. */
N#define CEREF1_25                                COMP_E_CTL2_REF1_25             /*!< Reference resistor tap for setting 25. */
N#define CEREF1_26                                COMP_E_CTL2_REF1_26             /*!< Reference resistor tap for setting 26. */
N#define CEREF1_27                                COMP_E_CTL2_REF1_27             /*!< Reference resistor tap for setting 27. */
N#define CEREF1_28                                COMP_E_CTL2_REF1_28             /*!< Reference resistor tap for setting 28. */
N#define CEREF1_29                                COMP_E_CTL2_REF1_29             /*!< Reference resistor tap for setting 29. */
N#define CEREF1_30                                COMP_E_CTL2_REF1_30             /*!< Reference resistor tap for setting 30. */
N#define CEREF1_31                                COMP_E_CTL2_REF1_31             /*!< Reference resistor tap for setting 31. */
N/* CE0CTL2[CEREFL] Bits */
N#define CEREFL_OFS                               COMP_E_CTL2_REFL_OFS            /*!< CEREFL Offset */
N#define CEREFL_M                                 COMP_E_CTL2_REFL_MASK           /*!< Reference voltage level */
N#define CEREFL0                                  COMP_E_CTL2_REFL0               /*!< CEREFL Bit 0 */
N#define CEREFL1                                  COMP_E_CTL2_REFL1               /*!< CEREFL Bit 1 */
N#define CEREFL_0                                 COMP_E_CTL2_CEREFL_0            /*!< Reference amplifier is disabled. No reference voltage is requested */
N#define CEREFL_1                                 COMP_E_CTL2_CEREFL_1            /*!< 1.2 V is selected as shared reference voltage input */
N#define CEREFL_2                                 COMP_E_CTL2_CEREFL_2            /*!< 2.0 V is selected as shared reference voltage input */
N#define CEREFL_3                                 COMP_E_CTL2_CEREFL_3            /*!< 2.5 V is selected as shared reference voltage input */
N#define CEREFL__OFF                              COMP_E_CTL2_REFL__OFF           /*!< Reference amplifier is disabled. No reference voltage is requested */
N#define CEREFL__1P2V                             COMP_E_CTL2_REFL__1P2V          /*!< 1.2 V is selected as shared reference voltage input */
N#define CEREFL__2P0V                             COMP_E_CTL2_REFL__2P0V          /*!< 2.0 V is selected as shared reference voltage input */
N#define CEREFL__2P5V                             COMP_E_CTL2_REFL__2P5V          /*!< 2.5 V is selected as shared reference voltage input */
N/* CE0CTL2[CEREFACC] Bits */
N#define CEREFACC_OFS                             COMP_E_CTL2_REFACC_OFS          /*!< CEREFACC Offset */
N#define CEREFACC                                 COMP_E_CTL2_REFACC              /*!< Reference accuracy */
N/* CE0CTL3[CEPD0] Bits */
N#define CEPD0_OFS                                COMP_E_CTL3_PD0_OFS             /*!< CEPD0 Offset */
N#define CEPD0                                    COMP_E_CTL3_PD0                 /*!< Port disable */
N/* CE0CTL3[CEPD1] Bits */
N#define CEPD1_OFS                                COMP_E_CTL3_PD1_OFS             /*!< CEPD1 Offset */
N#define CEPD1                                    COMP_E_CTL3_PD1                 /*!< Port disable */
N/* CE0CTL3[CEPD2] Bits */
N#define CEPD2_OFS                                COMP_E_CTL3_PD2_OFS             /*!< CEPD2 Offset */
N#define CEPD2                                    COMP_E_CTL3_PD2                 /*!< Port disable */
N/* CE0CTL3[CEPD3] Bits */
N#define CEPD3_OFS                                COMP_E_CTL3_PD3_OFS             /*!< CEPD3 Offset */
N#define CEPD3                                    COMP_E_CTL3_PD3                 /*!< Port disable */
N/* CE0CTL3[CEPD4] Bits */
N#define CEPD4_OFS                                COMP_E_CTL3_PD4_OFS             /*!< CEPD4 Offset */
N#define CEPD4                                    COMP_E_CTL3_PD4                 /*!< Port disable */
N/* CE0CTL3[CEPD5] Bits */
N#define CEPD5_OFS                                COMP_E_CTL3_PD5_OFS             /*!< CEPD5 Offset */
N#define CEPD5                                    COMP_E_CTL3_PD5                 /*!< Port disable */
N/* CE0CTL3[CEPD6] Bits */
N#define CEPD6_OFS                                COMP_E_CTL3_PD6_OFS             /*!< CEPD6 Offset */
N#define CEPD6                                    COMP_E_CTL3_PD6                 /*!< Port disable */
N/* CE0CTL3[CEPD7] Bits */
N#define CEPD7_OFS                                COMP_E_CTL3_PD7_OFS             /*!< CEPD7 Offset */
N#define CEPD7                                    COMP_E_CTL3_PD7                 /*!< Port disable */
N/* CE0CTL3[CEPD8] Bits */
N#define CEPD8_OFS                                COMP_E_CTL3_PD8_OFS             /*!< CEPD8 Offset */
N#define CEPD8                                    COMP_E_CTL3_PD8                 /*!< Port disable */
N/* CE0CTL3[CEPD9] Bits */
N#define CEPD9_OFS                                COMP_E_CTL3_PD9_OFS             /*!< CEPD9 Offset */
N#define CEPD9                                    COMP_E_CTL3_PD9                 /*!< Port disable */
N/* CE0CTL3[CEPD10] Bits */
N#define CEPD10_OFS                               COMP_E_CTL3_PD10_OFS            /*!< CEPD10 Offset */
N#define CEPD10                                   COMP_E_CTL3_PD10                /*!< Port disable */
N/* CE0CTL3[CEPD11] Bits */
N#define CEPD11_OFS                               COMP_E_CTL3_PD11_OFS            /*!< CEPD11 Offset */
N#define CEPD11                                   COMP_E_CTL3_PD11                /*!< Port disable */
N/* CE0CTL3[CEPD12] Bits */
N#define CEPD12_OFS                               COMP_E_CTL3_PD12_OFS            /*!< CEPD12 Offset */
N#define CEPD12                                   COMP_E_CTL3_PD12                /*!< Port disable */
N/* CE0CTL3[CEPD13] Bits */
N#define CEPD13_OFS                               COMP_E_CTL3_PD13_OFS            /*!< CEPD13 Offset */
N#define CEPD13                                   COMP_E_CTL3_PD13                /*!< Port disable */
N/* CE0CTL3[CEPD14] Bits */
N#define CEPD14_OFS                               COMP_E_CTL3_PD14_OFS            /*!< CEPD14 Offset */
N#define CEPD14                                   COMP_E_CTL3_PD14                /*!< Port disable */
N/* CE0CTL3[CEPD15] Bits */
N#define CEPD15_OFS                               COMP_E_CTL3_PD15_OFS            /*!< CEPD15 Offset */
N#define CEPD15                                   COMP_E_CTL3_PD15                /*!< Port disable */
N/* CE0INT[CEIFG] Bits */
N#define CEIFG_OFS                                COMP_E_INT_IFG_OFS              /*!< CEIFG Offset */
N#define CEIFG                                    COMP_E_INT_IFG                  /*!< Comparator output interrupt flag */
N/* CE0INT[CEIIFG] Bits */
N#define CEIIFG_OFS                               COMP_E_INT_IIFG_OFS             /*!< CEIIFG Offset */
N#define CEIIFG                                   COMP_E_INT_IIFG                 /*!< Comparator output inverted interrupt flag */
N/* CE0INT[CERDYIFG] Bits */
N#define CERDYIFG_OFS                             COMP_E_INT_RDYIFG_OFS           /*!< CERDYIFG Offset */
N#define CERDYIFG                                 COMP_E_INT_RDYIFG               /*!< Comparator ready interrupt flag */
N/* CE0INT[CEIE] Bits */
N#define CEIE_OFS                                 COMP_E_INT_IE_OFS               /*!< CEIE Offset */
N#define CEIE                                     COMP_E_INT_IE                   /*!< Comparator output interrupt enable */
N/* CE0INT[CEIIE] Bits */
N#define CEIIE_OFS                                COMP_E_INT_IIE_OFS              /*!< CEIIE Offset */
N#define CEIIE                                    COMP_E_INT_IIE                  /*!< Comparator output interrupt enable inverted polarity */
N/* CE0INT[CERDYIE] Bits */
N#define CERDYIE_OFS                              COMP_E_INT_RDYIE_OFS            /*!< CERDYIE Offset */
N#define CERDYIE                                  COMP_E_INT_RDYIE                /*!< Comparator ready interrupt enable */
N
N/******************************************************************************
N* CRC32 Bits (legacy section)
N******************************************************************************/
N/* DIO_PAIN[P1IN] Bits */
N#define P1IN_OFS                                           ( 0)                  /*!< P1IN Offset */
N#define P1IN_M                                             (0x00ff)              /*!< Port 1 Input */
N/* DIO_PAIN[P2IN] Bits */
N#define P2IN_OFS                                           ( 8)                  /*!< P2IN Offset */
N#define P2IN_M                                             (0xff00)              /*!< Port 2 Input */
N/* DIO_PAOUT[P2OUT] Bits */
N#define P2OUT_OFS                                          ( 8)                  /*!< P2OUT Offset */
N#define P2OUT_M                                            (0xff00)              /*!< Port 2 Output */
N/* DIO_PAOUT[P1OUT] Bits */
N#define P1OUT_OFS                                          ( 0)                  /*!< P1OUT Offset */
N#define P1OUT_M                                            (0x00ff)              /*!< Port 1 Output */
N/* DIO_PADIR[P1DIR] Bits */
N#define P1DIR_OFS                                          ( 0)                  /*!< P1DIR Offset */
N#define P1DIR_M                                            (0x00ff)              /*!< Port 1 Direction */
N/* DIO_PADIR[P2DIR] Bits */
N#define P2DIR_OFS                                          ( 8)                  /*!< P2DIR Offset */
N#define P2DIR_M                                            (0xff00)              /*!< Port 2 Direction */
N/* DIO_PAREN[P1REN] Bits */
N#define P1REN_OFS                                          ( 0)                  /*!< P1REN Offset */
N#define P1REN_M                                            (0x00ff)              /*!< Port 1 Resistor Enable */
N/* DIO_PAREN[P2REN] Bits */
N#define P2REN_OFS                                          ( 8)                  /*!< P2REN Offset */
N#define P2REN_M                                            (0xff00)              /*!< Port 2 Resistor Enable */
N/* DIO_PADS[P1DS] Bits */
N#define P1DS_OFS                                           ( 0)                  /*!< P1DS Offset */
N#define P1DS_M                                             (0x00ff)              /*!< Port 1 Drive Strength */
N/* DIO_PADS[P2DS] Bits */
N#define P2DS_OFS                                           ( 8)                  /*!< P2DS Offset */
N#define P2DS_M                                             (0xff00)              /*!< Port 2 Drive Strength */
N/* DIO_PASEL0[P1SEL0] Bits */
N#define P1SEL0_OFS                                         ( 0)                  /*!< P1SEL0 Offset */
N#define P1SEL0_M                                           (0x00ff)              /*!< Port 1 Select 0 */
N/* DIO_PASEL0[P2SEL0] Bits */
N#define P2SEL0_OFS                                         ( 8)                  /*!< P2SEL0 Offset */
N#define P2SEL0_M                                           (0xff00)              /*!< Port 2 Select 0 */
N/* DIO_PASEL1[P1SEL1] Bits */
N#define P1SEL1_OFS                                         ( 0)                  /*!< P1SEL1 Offset */
N#define P1SEL1_M                                           (0x00ff)              /*!< Port 1 Select 1 */
N/* DIO_PASEL1[P2SEL1] Bits */
N#define P2SEL1_OFS                                         ( 8)                  /*!< P2SEL1 Offset */
N#define P2SEL1_M                                           (0xff00)              /*!< Port 2 Select 1 */
N/* DIO_P1IV[P1IV] Bits */
N#define P1IV_OFS                                           ( 0)                  /*!< P1IV Offset */
N#define P1IV_M                                             (0x001f)              /*!< Port 1 interrupt vector value */
N#define P1IV0                                              (0x0001)              /*!< Port 1 interrupt vector value */
N#define P1IV1                                              (0x0002)              /*!< Port 1 interrupt vector value */
N#define P1IV2                                              (0x0004)              /*!< Port 1 interrupt vector value */
N#define P1IV3                                              (0x0008)              /*!< Port 1 interrupt vector value */
N#define P1IV4                                              (0x0010)              /*!< Port 1 interrupt vector value */
N#define P1IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P1IV_2                                             (0x0002)              /*!< Interrupt Source: Port 1.0 interrupt; Interrupt Flag: P1IFG0; Interrupt Priority: Highest */
N#define P1IV_4                                             (0x0004)              /*!< Interrupt Source: Port 1.1 interrupt; Interrupt Flag: P1IFG1 */
N#define P1IV_6                                             (0x0006)              /*!< Interrupt Source: Port 1.2 interrupt; Interrupt Flag: P1IFG2 */
N#define P1IV_8                                             (0x0008)              /*!< Interrupt Source: Port 1.3 interrupt; Interrupt Flag: P1IFG3 */
N#define P1IV_10                                            (0x000a)              /*!< Interrupt Source: Port 1.4 interrupt; Interrupt Flag: P1IFG4 */
N#define P1IV_12                                            (0x000c)              /*!< Interrupt Source: Port 1.5 interrupt; Interrupt Flag: P1IFG5 */
N#define P1IV_14                                            (0x000e)              /*!< Interrupt Source: Port 1.6 interrupt; Interrupt Flag: P1IFG6 */
N#define P1IV_16                                            (0x0010)              /*!< Interrupt Source: Port 1.7 interrupt; Interrupt Flag: P1IFG7; Interrupt Priority: Lowest */
N#define P1IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P1IV__P1IFG0                                       (0x0002)              /*!< Interrupt Source: Port 1.0 interrupt; Interrupt Flag: P1IFG0; Interrupt Priority: Highest */
N#define P1IV__P1IFG1                                       (0x0004)              /*!< Interrupt Source: Port 1.1 interrupt; Interrupt Flag: P1IFG1 */
N#define P1IV__P1IFG2                                       (0x0006)              /*!< Interrupt Source: Port 1.2 interrupt; Interrupt Flag: P1IFG2 */
N#define P1IV__P1IFG3                                       (0x0008)              /*!< Interrupt Source: Port 1.3 interrupt; Interrupt Flag: P1IFG3 */
N#define P1IV__P1IFG4                                       (0x000a)              /*!< Interrupt Source: Port 1.4 interrupt; Interrupt Flag: P1IFG4 */
N#define P1IV__P1IFG5                                       (0x000c)              /*!< Interrupt Source: Port 1.5 interrupt; Interrupt Flag: P1IFG5 */
N#define P1IV__P1IFG6                                       (0x000e)              /*!< Interrupt Source: Port 1.6 interrupt; Interrupt Flag: P1IFG6 */
N#define P1IV__P1IFG7                                       (0x0010)              /*!< Interrupt Source: Port 1.7 interrupt; Interrupt Flag: P1IFG7; Interrupt Priority: Lowest */
N/* DIO_PASELC[P1SELC] Bits */
N#define P1SELC_OFS                                         ( 0)                  /*!< P1SELC Offset */
N#define P1SELC_M                                           (0x00ff)              /*!< Port 1 Complement Select */
N/* DIO_PASELC[P2SELC] Bits */
N#define P2SELC_OFS                                         ( 8)                  /*!< P2SELC Offset */
N#define P2SELC_M                                           (0xff00)              /*!< Port 2 Complement Select */
N/* DIO_PAIES[P1IES] Bits */
N#define P1IES_OFS                                          ( 0)                  /*!< P1IES Offset */
N#define P1IES_M                                            (0x00ff)              /*!< Port 1 Interrupt Edge Select */
N/* DIO_PAIES[P2IES] Bits */
N#define P2IES_OFS                                          ( 8)                  /*!< P2IES Offset */
N#define P2IES_M                                            (0xff00)              /*!< Port 2 Interrupt Edge Select */
N/* DIO_PAIE[P1IE] Bits */
N#define P1IE_OFS                                           ( 0)                  /*!< P1IE Offset */
N#define P1IE_M                                             (0x00ff)              /*!< Port 1 Interrupt Enable */
N/* DIO_PAIE[P2IE] Bits */
N#define P2IE_OFS                                           ( 8)                  /*!< P2IE Offset */
N#define P2IE_M                                             (0xff00)              /*!< Port 2 Interrupt Enable */
N/* DIO_PAIFG[P1IFG] Bits */
N#define P1IFG_OFS                                          ( 0)                  /*!< P1IFG Offset */
N#define P1IFG_M                                            (0x00ff)              /*!< Port 1 Interrupt Flag */
N/* DIO_PAIFG[P2IFG] Bits */
N#define P2IFG_OFS                                          ( 8)                  /*!< P2IFG Offset */
N#define P2IFG_M                                            (0xff00)              /*!< Port 2 Interrupt Flag */
N/* DIO_P2IV[P2IV] Bits */
N#define P2IV_OFS                                           ( 0)                  /*!< P2IV Offset */
N#define P2IV_M                                             (0x001f)              /*!< Port 2 interrupt vector value */
N#define P2IV0                                              (0x0001)              /*!< Port 2 interrupt vector value */
N#define P2IV1                                              (0x0002)              /*!< Port 2 interrupt vector value */
N#define P2IV2                                              (0x0004)              /*!< Port 2 interrupt vector value */
N#define P2IV3                                              (0x0008)              /*!< Port 2 interrupt vector value */
N#define P2IV4                                              (0x0010)              /*!< Port 2 interrupt vector value */
N#define P2IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P2IV_2                                             (0x0002)              /*!< Interrupt Source: Port 2.0 interrupt; Interrupt Flag: P2IFG0; Interrupt Priority: Highest */
N#define P2IV_4                                             (0x0004)              /*!< Interrupt Source: Port 2.1 interrupt; Interrupt Flag: P2IFG1 */
N#define P2IV_6                                             (0x0006)              /*!< Interrupt Source: Port 2.2 interrupt; Interrupt Flag: P2IFG2 */
N#define P2IV_8                                             (0x0008)              /*!< Interrupt Source: Port 2.3 interrupt; Interrupt Flag: P2IFG3 */
N#define P2IV_10                                            (0x000a)              /*!< Interrupt Source: Port 2.4 interrupt; Interrupt Flag: P2IFG4 */
N#define P2IV_12                                            (0x000c)              /*!< Interrupt Source: Port 2.5 interrupt; Interrupt Flag: P2IFG5 */
N#define P2IV_14                                            (0x000e)              /*!< Interrupt Source: Port 2.6 interrupt; Interrupt Flag: P2IFG6 */
N#define P2IV_16                                            (0x0010)              /*!< Interrupt Source: Port 2.7 interrupt; Interrupt Flag: P2IFG7; Interrupt Priority: Lowest */
N#define P2IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P2IV__P2IFG0                                       (0x0002)              /*!< Interrupt Source: Port 2.0 interrupt; Interrupt Flag: P2IFG0; Interrupt Priority: Highest */
N#define P2IV__P2IFG1                                       (0x0004)              /*!< Interrupt Source: Port 2.1 interrupt; Interrupt Flag: P2IFG1 */
N#define P2IV__P2IFG2                                       (0x0006)              /*!< Interrupt Source: Port 2.2 interrupt; Interrupt Flag: P2IFG2 */
N#define P2IV__P2IFG3                                       (0x0008)              /*!< Interrupt Source: Port 2.3 interrupt; Interrupt Flag: P2IFG3 */
N#define P2IV__P2IFG4                                       (0x000a)              /*!< Interrupt Source: Port 2.4 interrupt; Interrupt Flag: P2IFG4 */
N#define P2IV__P2IFG5                                       (0x000c)              /*!< Interrupt Source: Port 2.5 interrupt; Interrupt Flag: P2IFG5 */
N#define P2IV__P2IFG6                                       (0x000e)              /*!< Interrupt Source: Port 2.6 interrupt; Interrupt Flag: P2IFG6 */
N#define P2IV__P2IFG7                                       (0x0010)              /*!< Interrupt Source: Port 2.7 interrupt; Interrupt Flag: P2IFG7; Interrupt Priority: Lowest */
N/* DIO_PBIN[P3IN] Bits */
N#define P3IN_OFS                                           ( 0)                  /*!< P3IN Offset */
N#define P3IN_M                                             (0x00ff)              /*!< Port 3 Input */
N/* DIO_PBIN[P4IN] Bits */
N#define P4IN_OFS                                           ( 8)                  /*!< P4IN Offset */
N#define P4IN_M                                             (0xff00)              /*!< Port 4 Input */
N/* DIO_PBOUT[P3OUT] Bits */
N#define P3OUT_OFS                                          ( 0)                  /*!< P3OUT Offset */
N#define P3OUT_M                                            (0x00ff)              /*!< Port 3 Output */
N/* DIO_PBOUT[P4OUT] Bits */
N#define P4OUT_OFS                                          ( 8)                  /*!< P4OUT Offset */
N#define P4OUT_M                                            (0xff00)              /*!< Port 4 Output */
N/* DIO_PBDIR[P3DIR] Bits */
N#define P3DIR_OFS                                          ( 0)                  /*!< P3DIR Offset */
N#define P3DIR_M                                            (0x00ff)              /*!< Port 3 Direction */
N/* DIO_PBDIR[P4DIR] Bits */
N#define P4DIR_OFS                                          ( 8)                  /*!< P4DIR Offset */
N#define P4DIR_M                                            (0xff00)              /*!< Port 4 Direction */
N/* DIO_PBREN[P3REN] Bits */
N#define P3REN_OFS                                          ( 0)                  /*!< P3REN Offset */
N#define P3REN_M                                            (0x00ff)              /*!< Port 3 Resistor Enable */
N/* DIO_PBREN[P4REN] Bits */
N#define P4REN_OFS                                          ( 8)                  /*!< P4REN Offset */
N#define P4REN_M                                            (0xff00)              /*!< Port 4 Resistor Enable */
N/* DIO_PBDS[P3DS] Bits */
N#define P3DS_OFS                                           ( 0)                  /*!< P3DS Offset */
N#define P3DS_M                                             (0x00ff)              /*!< Port 3 Drive Strength */
N/* DIO_PBDS[P4DS] Bits */
N#define P4DS_OFS                                           ( 8)                  /*!< P4DS Offset */
N#define P4DS_M                                             (0xff00)              /*!< Port 4 Drive Strength */
N/* DIO_PBSEL0[P4SEL0] Bits */
N#define P4SEL0_OFS                                         ( 8)                  /*!< P4SEL0 Offset */
N#define P4SEL0_M                                           (0xff00)              /*!< Port 4 Select 0 */
N/* DIO_PBSEL0[P3SEL0] Bits */
N#define P3SEL0_OFS                                         ( 0)                  /*!< P3SEL0 Offset */
N#define P3SEL0_M                                           (0x00ff)              /*!< Port 3 Select 0 */
N/* DIO_PBSEL1[P3SEL1] Bits */
N#define P3SEL1_OFS                                         ( 0)                  /*!< P3SEL1 Offset */
N#define P3SEL1_M                                           (0x00ff)              /*!< Port 3 Select 1 */
N/* DIO_PBSEL1[P4SEL1] Bits */
N#define P4SEL1_OFS                                         ( 8)                  /*!< P4SEL1 Offset */
N#define P4SEL1_M                                           (0xff00)              /*!< Port 4 Select 1 */
N/* DIO_P3IV[P3IV] Bits */
N#define P3IV_OFS                                           ( 0)                  /*!< P3IV Offset */
N#define P3IV_M                                             (0x001f)              /*!< Port 3 interrupt vector value */
N#define P3IV0                                              (0x0001)              /*!< Port 3 interrupt vector value */
N#define P3IV1                                              (0x0002)              /*!< Port 3 interrupt vector value */
N#define P3IV2                                              (0x0004)              /*!< Port 3 interrupt vector value */
N#define P3IV3                                              (0x0008)              /*!< Port 3 interrupt vector value */
N#define P3IV4                                              (0x0010)              /*!< Port 3 interrupt vector value */
N#define P3IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P3IV_2                                             (0x0002)              /*!< Interrupt Source: Port 3.0 interrupt; Interrupt Flag: P3IFG0; Interrupt Priority: Highest */
N#define P3IV_4                                             (0x0004)              /*!< Interrupt Source: Port 3.1 interrupt; Interrupt Flag: P3IFG1 */
N#define P3IV_6                                             (0x0006)              /*!< Interrupt Source: Port 3.2 interrupt; Interrupt Flag: P3IFG2 */
N#define P3IV_8                                             (0x0008)              /*!< Interrupt Source: Port 3.3 interrupt; Interrupt Flag: P3IFG3 */
N#define P3IV_10                                            (0x000a)              /*!< Interrupt Source: Port 3.4 interrupt; Interrupt Flag: P3IFG4 */
N#define P3IV_12                                            (0x000c)              /*!< Interrupt Source: Port 3.5 interrupt; Interrupt Flag: P3IFG5 */
N#define P3IV_14                                            (0x000e)              /*!< Interrupt Source: Port 3.6 interrupt; Interrupt Flag: P3IFG6 */
N#define P3IV_16                                            (0x0010)              /*!< Interrupt Source: Port 3.7 interrupt; Interrupt Flag: P3IFG7; Interrupt Priority: Lowest */
N#define P3IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P3IV__P3IFG0                                       (0x0002)              /*!< Interrupt Source: Port 3.0 interrupt; Interrupt Flag: P3IFG0; Interrupt Priority: Highest */
N#define P3IV__P3IFG1                                       (0x0004)              /*!< Interrupt Source: Port 3.1 interrupt; Interrupt Flag: P3IFG1 */
N#define P3IV__P3IFG2                                       (0x0006)              /*!< Interrupt Source: Port 3.2 interrupt; Interrupt Flag: P3IFG2 */
N#define P3IV__P3IFG3                                       (0x0008)              /*!< Interrupt Source: Port 3.3 interrupt; Interrupt Flag: P3IFG3 */
N#define P3IV__P3IFG4                                       (0x000a)              /*!< Interrupt Source: Port 3.4 interrupt; Interrupt Flag: P3IFG4 */
N#define P3IV__P3IFG5                                       (0x000c)              /*!< Interrupt Source: Port 3.5 interrupt; Interrupt Flag: P3IFG5 */
N#define P3IV__P3IFG6                                       (0x000e)              /*!< Interrupt Source: Port 3.6 interrupt; Interrupt Flag: P3IFG6 */
N#define P3IV__P3IFG7                                       (0x0010)              /*!< Interrupt Source: Port 3.7 interrupt; Interrupt Flag: P3IFG7; Interrupt Priority: Lowest */
N/* DIO_PBSELC[P3SELC] Bits */
N#define P3SELC_OFS                                         ( 0)                  /*!< P3SELC Offset */
N#define P3SELC_M                                           (0x00ff)              /*!< Port 3 Complement Select */
N/* DIO_PBSELC[P4SELC] Bits */
N#define P4SELC_OFS                                         ( 8)                  /*!< P4SELC Offset */
N#define P4SELC_M                                           (0xff00)              /*!< Port 4 Complement Select */
N/* DIO_PBIES[P3IES] Bits */
N#define P3IES_OFS                                          ( 0)                  /*!< P3IES Offset */
N#define P3IES_M                                            (0x00ff)              /*!< Port 3 Interrupt Edge Select */
N/* DIO_PBIES[P4IES] Bits */
N#define P4IES_OFS                                          ( 8)                  /*!< P4IES Offset */
N#define P4IES_M                                            (0xff00)              /*!< Port 4 Interrupt Edge Select */
N/* DIO_PBIE[P3IE] Bits */
N#define P3IE_OFS                                           ( 0)                  /*!< P3IE Offset */
N#define P3IE_M                                             (0x00ff)              /*!< Port 3 Interrupt Enable */
N/* DIO_PBIE[P4IE] Bits */
N#define P4IE_OFS                                           ( 8)                  /*!< P4IE Offset */
N#define P4IE_M                                             (0xff00)              /*!< Port 4 Interrupt Enable */
N/* DIO_PBIFG[P3IFG] Bits */
N#define P3IFG_OFS                                          ( 0)                  /*!< P3IFG Offset */
N#define P3IFG_M                                            (0x00ff)              /*!< Port 3 Interrupt Flag */
N/* DIO_PBIFG[P4IFG] Bits */
N#define P4IFG_OFS                                          ( 8)                  /*!< P4IFG Offset */
N#define P4IFG_M                                            (0xff00)              /*!< Port 4 Interrupt Flag */
N/* DIO_P4IV[P4IV] Bits */
N#define P4IV_OFS                                           ( 0)                  /*!< P4IV Offset */
N#define P4IV_M                                             (0x001f)              /*!< Port 4 interrupt vector value */
N#define P4IV0                                              (0x0001)              /*!< Port 4 interrupt vector value */
N#define P4IV1                                              (0x0002)              /*!< Port 4 interrupt vector value */
N#define P4IV2                                              (0x0004)              /*!< Port 4 interrupt vector value */
N#define P4IV3                                              (0x0008)              /*!< Port 4 interrupt vector value */
N#define P4IV4                                              (0x0010)              /*!< Port 4 interrupt vector value */
N#define P4IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P4IV_2                                             (0x0002)              /*!< Interrupt Source: Port 4.0 interrupt; Interrupt Flag: P4IFG0; Interrupt Priority: Highest */
N#define P4IV_4                                             (0x0004)              /*!< Interrupt Source: Port 4.1 interrupt; Interrupt Flag: P4IFG1 */
N#define P4IV_6                                             (0x0006)              /*!< Interrupt Source: Port 4.2 interrupt; Interrupt Flag: P4IFG2 */
N#define P4IV_8                                             (0x0008)              /*!< Interrupt Source: Port 4.3 interrupt; Interrupt Flag: P4IFG3 */
N#define P4IV_10                                            (0x000a)              /*!< Interrupt Source: Port 4.4 interrupt; Interrupt Flag: P4IFG4 */
N#define P4IV_12                                            (0x000c)              /*!< Interrupt Source: Port 4.5 interrupt; Interrupt Flag: P4IFG5 */
N#define P4IV_14                                            (0x000e)              /*!< Interrupt Source: Port 4.6 interrupt; Interrupt Flag: P4IFG6 */
N#define P4IV_16                                            (0x0010)              /*!< Interrupt Source: Port 4.7 interrupt; Interrupt Flag: P4IFG7; Interrupt Priority: Lowest */
N#define P4IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P4IV__P4IFG0                                       (0x0002)              /*!< Interrupt Source: Port 4.0 interrupt; Interrupt Flag: P4IFG0; Interrupt Priority: Highest */
N#define P4IV__P4IFG1                                       (0x0004)              /*!< Interrupt Source: Port 4.1 interrupt; Interrupt Flag: P4IFG1 */
N#define P4IV__P4IFG2                                       (0x0006)              /*!< Interrupt Source: Port 4.2 interrupt; Interrupt Flag: P4IFG2 */
N#define P4IV__P4IFG3                                       (0x0008)              /*!< Interrupt Source: Port 4.3 interrupt; Interrupt Flag: P4IFG3 */
N#define P4IV__P4IFG4                                       (0x000a)              /*!< Interrupt Source: Port 4.4 interrupt; Interrupt Flag: P4IFG4 */
N#define P4IV__P4IFG5                                       (0x000c)              /*!< Interrupt Source: Port 4.5 interrupt; Interrupt Flag: P4IFG5 */
N#define P4IV__P4IFG6                                       (0x000e)              /*!< Interrupt Source: Port 4.6 interrupt; Interrupt Flag: P4IFG6 */
N#define P4IV__P4IFG7                                       (0x0010)              /*!< Interrupt Source: Port 4.7 interrupt; Interrupt Flag: P4IFG7; Interrupt Priority: Lowest */
N/* DIO_PCIN[P5IN] Bits */
N#define P5IN_OFS                                           ( 0)                  /*!< P5IN Offset */
N#define P5IN_M                                             (0x00ff)              /*!< Port 5 Input */
N/* DIO_PCIN[P6IN] Bits */
N#define P6IN_OFS                                           ( 8)                  /*!< P6IN Offset */
N#define P6IN_M                                             (0xff00)              /*!< Port 6 Input */
N/* DIO_PCOUT[P5OUT] Bits */
N#define P5OUT_OFS                                          ( 0)                  /*!< P5OUT Offset */
N#define P5OUT_M                                            (0x00ff)              /*!< Port 5 Output */
N/* DIO_PCOUT[P6OUT] Bits */
N#define P6OUT_OFS                                          ( 8)                  /*!< P6OUT Offset */
N#define P6OUT_M                                            (0xff00)              /*!< Port 6 Output */
N/* DIO_PCDIR[P5DIR] Bits */
N#define P5DIR_OFS                                          ( 0)                  /*!< P5DIR Offset */
N#define P5DIR_M                                            (0x00ff)              /*!< Port 5 Direction */
N/* DIO_PCDIR[P6DIR] Bits */
N#define P6DIR_OFS                                          ( 8)                  /*!< P6DIR Offset */
N#define P6DIR_M                                            (0xff00)              /*!< Port 6 Direction */
N/* DIO_PCREN[P5REN] Bits */
N#define P5REN_OFS                                          ( 0)                  /*!< P5REN Offset */
N#define P5REN_M                                            (0x00ff)              /*!< Port 5 Resistor Enable */
N/* DIO_PCREN[P6REN] Bits */
N#define P6REN_OFS                                          ( 8)                  /*!< P6REN Offset */
N#define P6REN_M                                            (0xff00)              /*!< Port 6 Resistor Enable */
N/* DIO_PCDS[P5DS] Bits */
N#define P5DS_OFS                                           ( 0)                  /*!< P5DS Offset */
N#define P5DS_M                                             (0x00ff)              /*!< Port 5 Drive Strength */
N/* DIO_PCDS[P6DS] Bits */
N#define P6DS_OFS                                           ( 8)                  /*!< P6DS Offset */
N#define P6DS_M                                             (0xff00)              /*!< Port 6 Drive Strength */
N/* DIO_PCSEL0[P5SEL0] Bits */
N#define P5SEL0_OFS                                         ( 0)                  /*!< P5SEL0 Offset */
N#define P5SEL0_M                                           (0x00ff)              /*!< Port 5 Select 0 */
N/* DIO_PCSEL0[P6SEL0] Bits */
N#define P6SEL0_OFS                                         ( 8)                  /*!< P6SEL0 Offset */
N#define P6SEL0_M                                           (0xff00)              /*!< Port 6 Select 0 */
N/* DIO_PCSEL1[P5SEL1] Bits */
N#define P5SEL1_OFS                                         ( 0)                  /*!< P5SEL1 Offset */
N#define P5SEL1_M                                           (0x00ff)              /*!< Port 5 Select 1 */
N/* DIO_PCSEL1[P6SEL1] Bits */
N#define P6SEL1_OFS                                         ( 8)                  /*!< P6SEL1 Offset */
N#define P6SEL1_M                                           (0xff00)              /*!< Port 6 Select 1 */
N/* DIO_P5IV[P5IV] Bits */
N#define P5IV_OFS                                           ( 0)                  /*!< P5IV Offset */
N#define P5IV_M                                             (0x001f)              /*!< Port 5 interrupt vector value */
N#define P5IV0                                              (0x0001)              /*!< Port 5 interrupt vector value */
N#define P5IV1                                              (0x0002)              /*!< Port 5 interrupt vector value */
N#define P5IV2                                              (0x0004)              /*!< Port 5 interrupt vector value */
N#define P5IV3                                              (0x0008)              /*!< Port 5 interrupt vector value */
N#define P5IV4                                              (0x0010)              /*!< Port 5 interrupt vector value */
N#define P5IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P5IV_2                                             (0x0002)              /*!< Interrupt Source: Port 5.0 interrupt; Interrupt Flag: P5IFG0; Interrupt Priority: Highest */
N#define P5IV_4                                             (0x0004)              /*!< Interrupt Source: Port 5.1 interrupt; Interrupt Flag: P5IFG1 */
N#define P5IV_6                                             (0x0006)              /*!< Interrupt Source: Port 5.2 interrupt; Interrupt Flag: P5IFG2 */
N#define P5IV_8                                             (0x0008)              /*!< Interrupt Source: Port 5.3 interrupt; Interrupt Flag: P5IFG3 */
N#define P5IV_10                                            (0x000a)              /*!< Interrupt Source: Port 5.4 interrupt; Interrupt Flag: P5IFG4 */
N#define P5IV_12                                            (0x000c)              /*!< Interrupt Source: Port 5.5 interrupt; Interrupt Flag: P5IFG5 */
N#define P5IV_14                                            (0x000e)              /*!< Interrupt Source: Port 5.6 interrupt; Interrupt Flag: P5IFG6 */
N#define P5IV_16                                            (0x0010)              /*!< Interrupt Source: Port 5.7 interrupt; Interrupt Flag: P5IFG7; Interrupt Priority: Lowest */
N#define P5IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P5IV__P5IFG0                                       (0x0002)              /*!< Interrupt Source: Port 5.0 interrupt; Interrupt Flag: P5IFG0; Interrupt Priority: Highest */
N#define P5IV__P5IFG1                                       (0x0004)              /*!< Interrupt Source: Port 5.1 interrupt; Interrupt Flag: P5IFG1 */
N#define P5IV__P5IFG2                                       (0x0006)              /*!< Interrupt Source: Port 5.2 interrupt; Interrupt Flag: P5IFG2 */
N#define P5IV__P5IFG3                                       (0x0008)              /*!< Interrupt Source: Port 5.3 interrupt; Interrupt Flag: P5IFG3 */
N#define P5IV__P5IFG4                                       (0x000a)              /*!< Interrupt Source: Port 5.4 interrupt; Interrupt Flag: P5IFG4 */
N#define P5IV__P5IFG5                                       (0x000c)              /*!< Interrupt Source: Port 5.5 interrupt; Interrupt Flag: P5IFG5 */
N#define P5IV__P5IFG6                                       (0x000e)              /*!< Interrupt Source: Port 5.6 interrupt; Interrupt Flag: P5IFG6 */
N#define P5IV__P5IFG7                                       (0x0010)              /*!< Interrupt Source: Port 5.7 interrupt; Interrupt Flag: P5IFG7; Interrupt Priority: Lowest */
N/* DIO_PCSELC[P5SELC] Bits */
N#define P5SELC_OFS                                         ( 0)                  /*!< P5SELC Offset */
N#define P5SELC_M                                           (0x00ff)              /*!< Port 5 Complement Select */
N/* DIO_PCSELC[P6SELC] Bits */
N#define P6SELC_OFS                                         ( 8)                  /*!< P6SELC Offset */
N#define P6SELC_M                                           (0xff00)              /*!< Port 6 Complement Select */
N/* DIO_PCIES[P5IES] Bits */
N#define P5IES_OFS                                          ( 0)                  /*!< P5IES Offset */
N#define P5IES_M                                            (0x00ff)              /*!< Port 5 Interrupt Edge Select */
N/* DIO_PCIES[P6IES] Bits */
N#define P6IES_OFS                                          ( 8)                  /*!< P6IES Offset */
N#define P6IES_M                                            (0xff00)              /*!< Port 6 Interrupt Edge Select */
N/* DIO_PCIE[P5IE] Bits */
N#define P5IE_OFS                                           ( 0)                  /*!< P5IE Offset */
N#define P5IE_M                                             (0x00ff)              /*!< Port 5 Interrupt Enable */
N/* DIO_PCIE[P6IE] Bits */
N#define P6IE_OFS                                           ( 8)                  /*!< P6IE Offset */
N#define P6IE_M                                             (0xff00)              /*!< Port 6 Interrupt Enable */
N/* DIO_PCIFG[P5IFG] Bits */
N#define P5IFG_OFS                                          ( 0)                  /*!< P5IFG Offset */
N#define P5IFG_M                                            (0x00ff)              /*!< Port 5 Interrupt Flag */
N/* DIO_PCIFG[P6IFG] Bits */
N#define P6IFG_OFS                                          ( 8)                  /*!< P6IFG Offset */
N#define P6IFG_M                                            (0xff00)              /*!< Port 6 Interrupt Flag */
N/* DIO_P6IV[P6IV] Bits */
N#define P6IV_OFS                                           ( 0)                  /*!< P6IV Offset */
N#define P6IV_M                                             (0x001f)              /*!< Port 6 interrupt vector value */
N#define P6IV0                                              (0x0001)              /*!< Port 6 interrupt vector value */
N#define P6IV1                                              (0x0002)              /*!< Port 6 interrupt vector value */
N#define P6IV2                                              (0x0004)              /*!< Port 6 interrupt vector value */
N#define P6IV3                                              (0x0008)              /*!< Port 6 interrupt vector value */
N#define P6IV4                                              (0x0010)              /*!< Port 6 interrupt vector value */
N#define P6IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P6IV_2                                             (0x0002)              /*!< Interrupt Source: Port 6.0 interrupt; Interrupt Flag: P6IFG0; Interrupt Priority: Highest */
N#define P6IV_4                                             (0x0004)              /*!< Interrupt Source: Port 6.1 interrupt; Interrupt Flag: P6IFG1 */
N#define P6IV_6                                             (0x0006)              /*!< Interrupt Source: Port 6.2 interrupt; Interrupt Flag: P6IFG2 */
N#define P6IV_8                                             (0x0008)              /*!< Interrupt Source: Port 6.3 interrupt; Interrupt Flag: P6IFG3 */
N#define P6IV_10                                            (0x000a)              /*!< Interrupt Source: Port 6.4 interrupt; Interrupt Flag: P6IFG4 */
N#define P6IV_12                                            (0x000c)              /*!< Interrupt Source: Port 6.5 interrupt; Interrupt Flag: P6IFG5 */
N#define P6IV_14                                            (0x000e)              /*!< Interrupt Source: Port 6.6 interrupt; Interrupt Flag: P6IFG6 */
N#define P6IV_16                                            (0x0010)              /*!< Interrupt Source: Port 6.7 interrupt; Interrupt Flag: P6IFG7; Interrupt Priority: Lowest */
N#define P6IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P6IV__P6IFG0                                       (0x0002)              /*!< Interrupt Source: Port 6.0 interrupt; Interrupt Flag: P6IFG0; Interrupt Priority: Highest */
N#define P6IV__P6IFG1                                       (0x0004)              /*!< Interrupt Source: Port 6.1 interrupt; Interrupt Flag: P6IFG1 */
N#define P6IV__P6IFG2                                       (0x0006)              /*!< Interrupt Source: Port 6.2 interrupt; Interrupt Flag: P6IFG2 */
N#define P6IV__P6IFG3                                       (0x0008)              /*!< Interrupt Source: Port 6.3 interrupt; Interrupt Flag: P6IFG3 */
N#define P6IV__P6IFG4                                       (0x000a)              /*!< Interrupt Source: Port 6.4 interrupt; Interrupt Flag: P6IFG4 */
N#define P6IV__P6IFG5                                       (0x000c)              /*!< Interrupt Source: Port 6.5 interrupt; Interrupt Flag: P6IFG5 */
N#define P6IV__P6IFG6                                       (0x000e)              /*!< Interrupt Source: Port 6.6 interrupt; Interrupt Flag: P6IFG6 */
N#define P6IV__P6IFG7                                       (0x0010)              /*!< Interrupt Source: Port 6.7 interrupt; Interrupt Flag: P6IFG7; Interrupt Priority: Lowest */
N/* DIO_PDIN[P7IN] Bits */
N#define P7IN_OFS                                           ( 0)                  /*!< P7IN Offset */
N#define P7IN_M                                             (0x00ff)              /*!< Port 7 Input */
N/* DIO_PDIN[P8IN] Bits */
N#define P8IN_OFS                                           ( 8)                  /*!< P8IN Offset */
N#define P8IN_M                                             (0xff00)              /*!< Port 8 Input */
N/* DIO_PDOUT[P7OUT] Bits */
N#define P7OUT_OFS                                          ( 0)                  /*!< P7OUT Offset */
N#define P7OUT_M                                            (0x00ff)              /*!< Port 7 Output */
N/* DIO_PDOUT[P8OUT] Bits */
N#define P8OUT_OFS                                          ( 8)                  /*!< P8OUT Offset */
N#define P8OUT_M                                            (0xff00)              /*!< Port 8 Output */
N/* DIO_PDDIR[P7DIR] Bits */
N#define P7DIR_OFS                                          ( 0)                  /*!< P7DIR Offset */
N#define P7DIR_M                                            (0x00ff)              /*!< Port 7 Direction */
N/* DIO_PDDIR[P8DIR] Bits */
N#define P8DIR_OFS                                          ( 8)                  /*!< P8DIR Offset */
N#define P8DIR_M                                            (0xff00)              /*!< Port 8 Direction */
N/* DIO_PDREN[P7REN] Bits */
N#define P7REN_OFS                                          ( 0)                  /*!< P7REN Offset */
N#define P7REN_M                                            (0x00ff)              /*!< Port 7 Resistor Enable */
N/* DIO_PDREN[P8REN] Bits */
N#define P8REN_OFS                                          ( 8)                  /*!< P8REN Offset */
N#define P8REN_M                                            (0xff00)              /*!< Port 8 Resistor Enable */
N/* DIO_PDDS[P7DS] Bits */
N#define P7DS_OFS                                           ( 0)                  /*!< P7DS Offset */
N#define P7DS_M                                             (0x00ff)              /*!< Port 7 Drive Strength */
N/* DIO_PDDS[P8DS] Bits */
N#define P8DS_OFS                                           ( 8)                  /*!< P8DS Offset */
N#define P8DS_M                                             (0xff00)              /*!< Port 8 Drive Strength */
N/* DIO_PDSEL0[P7SEL0] Bits */
N#define P7SEL0_OFS                                         ( 0)                  /*!< P7SEL0 Offset */
N#define P7SEL0_M                                           (0x00ff)              /*!< Port 7 Select 0 */
N/* DIO_PDSEL0[P8SEL0] Bits */
N#define P8SEL0_OFS                                         ( 8)                  /*!< P8SEL0 Offset */
N#define P8SEL0_M                                           (0xff00)              /*!< Port 8 Select 0 */
N/* DIO_PDSEL1[P7SEL1] Bits */
N#define P7SEL1_OFS                                         ( 0)                  /*!< P7SEL1 Offset */
N#define P7SEL1_M                                           (0x00ff)              /*!< Port 7 Select 1 */
N/* DIO_PDSEL1[P8SEL1] Bits */
N#define P8SEL1_OFS                                         ( 8)                  /*!< P8SEL1 Offset */
N#define P8SEL1_M                                           (0xff00)              /*!< Port 8 Select 1 */
N/* DIO_P7IV[P7IV] Bits */
N#define P7IV_OFS                                           ( 0)                  /*!< P7IV Offset */
N#define P7IV_M                                             (0x001f)              /*!< Port 7 interrupt vector value */
N#define P7IV0                                              (0x0001)              /*!< Port 7 interrupt vector value */
N#define P7IV1                                              (0x0002)              /*!< Port 7 interrupt vector value */
N#define P7IV2                                              (0x0004)              /*!< Port 7 interrupt vector value */
N#define P7IV3                                              (0x0008)              /*!< Port 7 interrupt vector value */
N#define P7IV4                                              (0x0010)              /*!< Port 7 interrupt vector value */
N#define P7IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P7IV_2                                             (0x0002)              /*!< Interrupt Source: Port 7.0 interrupt; Interrupt Flag: P7IFG0; Interrupt Priority: Highest */
N#define P7IV_4                                             (0x0004)              /*!< Interrupt Source: Port 7.1 interrupt; Interrupt Flag: P7IFG1 */
N#define P7IV_6                                             (0x0006)              /*!< Interrupt Source: Port 7.2 interrupt; Interrupt Flag: P7IFG2 */
N#define P7IV_8                                             (0x0008)              /*!< Interrupt Source: Port 7.3 interrupt; Interrupt Flag: P7IFG3 */
N#define P7IV_10                                            (0x000a)              /*!< Interrupt Source: Port 7.4 interrupt; Interrupt Flag: P7IFG4 */
N#define P7IV_12                                            (0x000c)              /*!< Interrupt Source: Port 7.5 interrupt; Interrupt Flag: P7IFG5 */
N#define P7IV_14                                            (0x000e)              /*!< Interrupt Source: Port 7.6 interrupt; Interrupt Flag: P7IFG6 */
N#define P7IV_16                                            (0x0010)              /*!< Interrupt Source: Port 7.7 interrupt; Interrupt Flag: P7IFG7; Interrupt Priority: Lowest */
N#define P7IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P7IV__P7IFG0                                       (0x0002)              /*!< Interrupt Source: Port 7.0 interrupt; Interrupt Flag: P7IFG0; Interrupt Priority: Highest */
N#define P7IV__P7IFG1                                       (0x0004)              /*!< Interrupt Source: Port 7.1 interrupt; Interrupt Flag: P7IFG1 */
N#define P7IV__P7IFG2                                       (0x0006)              /*!< Interrupt Source: Port 7.2 interrupt; Interrupt Flag: P7IFG2 */
N#define P7IV__P7IFG3                                       (0x0008)              /*!< Interrupt Source: Port 7.3 interrupt; Interrupt Flag: P7IFG3 */
N#define P7IV__P7IFG4                                       (0x000a)              /*!< Interrupt Source: Port 7.4 interrupt; Interrupt Flag: P7IFG4 */
N#define P7IV__P7IFG5                                       (0x000c)              /*!< Interrupt Source: Port 7.5 interrupt; Interrupt Flag: P7IFG5 */
N#define P7IV__P7IFG6                                       (0x000e)              /*!< Interrupt Source: Port 7.6 interrupt; Interrupt Flag: P7IFG6 */
N#define P7IV__P7IFG7                                       (0x0010)              /*!< Interrupt Source: Port 7.7 interrupt; Interrupt Flag: P7IFG7; Interrupt Priority: Lowest */
N/* DIO_PDSELC[P7SELC] Bits */
N#define P7SELC_OFS                                         ( 0)                  /*!< P7SELC Offset */
N#define P7SELC_M                                           (0x00ff)              /*!< Port 7 Complement Select */
N/* DIO_PDSELC[P8SELC] Bits */
N#define P8SELC_OFS                                         ( 8)                  /*!< P8SELC Offset */
N#define P8SELC_M                                           (0xff00)              /*!< Port 8 Complement Select */
N/* DIO_PDIES[P7IES] Bits */
N#define P7IES_OFS                                          ( 0)                  /*!< P7IES Offset */
N#define P7IES_M                                            (0x00ff)              /*!< Port 7 Interrupt Edge Select */
N/* DIO_PDIES[P8IES] Bits */
N#define P8IES_OFS                                          ( 8)                  /*!< P8IES Offset */
N#define P8IES_M                                            (0xff00)              /*!< Port 8 Interrupt Edge Select */
N/* DIO_PDIE[P7IE] Bits */
N#define P7IE_OFS                                           ( 0)                  /*!< P7IE Offset */
N#define P7IE_M                                             (0x00ff)              /*!< Port 7 Interrupt Enable */
N/* DIO_PDIE[P8IE] Bits */
N#define P8IE_OFS                                           ( 8)                  /*!< P8IE Offset */
N#define P8IE_M                                             (0xff00)              /*!< Port 8 Interrupt Enable */
N/* DIO_PDIFG[P7IFG] Bits */
N#define P7IFG_OFS                                          ( 0)                  /*!< P7IFG Offset */
N#define P7IFG_M                                            (0x00ff)              /*!< Port 7 Interrupt Flag */
N/* DIO_PDIFG[P8IFG] Bits */
N#define P8IFG_OFS                                          ( 8)                  /*!< P8IFG Offset */
N#define P8IFG_M                                            (0xff00)              /*!< Port 8 Interrupt Flag */
N/* DIO_P8IV[P8IV] Bits */
N#define P8IV_OFS                                           ( 0)                  /*!< P8IV Offset */
N#define P8IV_M                                             (0x001f)              /*!< Port 8 interrupt vector value */
N#define P8IV0                                              (0x0001)              /*!< Port 8 interrupt vector value */
N#define P8IV1                                              (0x0002)              /*!< Port 8 interrupt vector value */
N#define P8IV2                                              (0x0004)              /*!< Port 8 interrupt vector value */
N#define P8IV3                                              (0x0008)              /*!< Port 8 interrupt vector value */
N#define P8IV4                                              (0x0010)              /*!< Port 8 interrupt vector value */
N#define P8IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P8IV_2                                             (0x0002)              /*!< Interrupt Source: Port 8.0 interrupt; Interrupt Flag: P8IFG0; Interrupt Priority: Highest */
N#define P8IV_4                                             (0x0004)              /*!< Interrupt Source: Port 8.1 interrupt; Interrupt Flag: P8IFG1 */
N#define P8IV_6                                             (0x0006)              /*!< Interrupt Source: Port 8.2 interrupt; Interrupt Flag: P8IFG2 */
N#define P8IV_8                                             (0x0008)              /*!< Interrupt Source: Port 8.3 interrupt; Interrupt Flag: P8IFG3 */
N#define P8IV_10                                            (0x000a)              /*!< Interrupt Source: Port 8.4 interrupt; Interrupt Flag: P8IFG4 */
N#define P8IV_12                                            (0x000c)              /*!< Interrupt Source: Port 8.5 interrupt; Interrupt Flag: P8IFG5 */
N#define P8IV_14                                            (0x000e)              /*!< Interrupt Source: Port 8.6 interrupt; Interrupt Flag: P8IFG6 */
N#define P8IV_16                                            (0x0010)              /*!< Interrupt Source: Port 8.7 interrupt; Interrupt Flag: P8IFG7; Interrupt Priority: Lowest */
N#define P8IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P8IV__P8IFG0                                       (0x0002)              /*!< Interrupt Source: Port 8.0 interrupt; Interrupt Flag: P8IFG0; Interrupt Priority: Highest */
N#define P8IV__P8IFG1                                       (0x0004)              /*!< Interrupt Source: Port 8.1 interrupt; Interrupt Flag: P8IFG1 */
N#define P8IV__P8IFG2                                       (0x0006)              /*!< Interrupt Source: Port 8.2 interrupt; Interrupt Flag: P8IFG2 */
N#define P8IV__P8IFG3                                       (0x0008)              /*!< Interrupt Source: Port 8.3 interrupt; Interrupt Flag: P8IFG3 */
N#define P8IV__P8IFG4                                       (0x000a)              /*!< Interrupt Source: Port 8.4 interrupt; Interrupt Flag: P8IFG4 */
N#define P8IV__P8IFG5                                       (0x000c)              /*!< Interrupt Source: Port 8.5 interrupt; Interrupt Flag: P8IFG5 */
N#define P8IV__P8IFG6                                       (0x000e)              /*!< Interrupt Source: Port 8.6 interrupt; Interrupt Flag: P8IFG6 */
N#define P8IV__P8IFG7                                       (0x0010)              /*!< Interrupt Source: Port 8.7 interrupt; Interrupt Flag: P8IFG7; Interrupt Priority: Lowest */
N/* DIO_PEIN[P9IN] Bits */
N#define P9IN_OFS                                           ( 0)                  /*!< P9IN Offset */
N#define P9IN_M                                             (0x00ff)              /*!< Port 9 Input */
N/* DIO_PEIN[P10IN] Bits */
N#define P10IN_OFS                                          ( 8)                  /*!< P10IN Offset */
N#define P10IN_M                                            (0xff00)              /*!< Port 10 Input */
N/* DIO_PEOUT[P9OUT] Bits */
N#define P9OUT_OFS                                          ( 0)                  /*!< P9OUT Offset */
N#define P9OUT_M                                            (0x00ff)              /*!< Port 9 Output */
N/* DIO_PEOUT[P10OUT] Bits */
N#define P10OUT_OFS                                         ( 8)                  /*!< P10OUT Offset */
N#define P10OUT_M                                           (0xff00)              /*!< Port 10 Output */
N/* DIO_PEDIR[P9DIR] Bits */
N#define P9DIR_OFS                                          ( 0)                  /*!< P9DIR Offset */
N#define P9DIR_M                                            (0x00ff)              /*!< Port 9 Direction */
N/* DIO_PEDIR[P10DIR] Bits */
N#define P10DIR_OFS                                         ( 8)                  /*!< P10DIR Offset */
N#define P10DIR_M                                           (0xff00)              /*!< Port 10 Direction */
N/* DIO_PEREN[P9REN] Bits */
N#define P9REN_OFS                                          ( 0)                  /*!< P9REN Offset */
N#define P9REN_M                                            (0x00ff)              /*!< Port 9 Resistor Enable */
N/* DIO_PEREN[P10REN] Bits */
N#define P10REN_OFS                                         ( 8)                  /*!< P10REN Offset */
N#define P10REN_M                                           (0xff00)              /*!< Port 10 Resistor Enable */
N/* DIO_PEDS[P9DS] Bits */
N#define P9DS_OFS                                           ( 0)                  /*!< P9DS Offset */
N#define P9DS_M                                             (0x00ff)              /*!< Port 9 Drive Strength */
N/* DIO_PEDS[P10DS] Bits */
N#define P10DS_OFS                                          ( 8)                  /*!< P10DS Offset */
N#define P10DS_M                                            (0xff00)              /*!< Port 10 Drive Strength */
N/* DIO_PESEL0[P9SEL0] Bits */
N#define P9SEL0_OFS                                         ( 0)                  /*!< P9SEL0 Offset */
N#define P9SEL0_M                                           (0x00ff)              /*!< Port 9 Select 0 */
N/* DIO_PESEL0[P10SEL0] Bits */
N#define P10SEL0_OFS                                        ( 8)                  /*!< P10SEL0 Offset */
N#define P10SEL0_M                                          (0xff00)              /*!< Port 10 Select 0 */
N/* DIO_PESEL1[P9SEL1] Bits */
N#define P9SEL1_OFS                                         ( 0)                  /*!< P9SEL1 Offset */
N#define P9SEL1_M                                           (0x00ff)              /*!< Port 9 Select 1 */
N/* DIO_PESEL1[P10SEL1] Bits */
N#define P10SEL1_OFS                                        ( 8)                  /*!< P10SEL1 Offset */
N#define P10SEL1_M                                          (0xff00)              /*!< Port 10 Select 1 */
N/* DIO_P9IV[P9IV] Bits */
N#define P9IV_OFS                                           ( 0)                  /*!< P9IV Offset */
N#define P9IV_M                                             (0x001f)              /*!< Port 9 interrupt vector value */
N#define P9IV0                                              (0x0001)              /*!< Port 9 interrupt vector value */
N#define P9IV1                                              (0x0002)              /*!< Port 9 interrupt vector value */
N#define P9IV2                                              (0x0004)              /*!< Port 9 interrupt vector value */
N#define P9IV3                                              (0x0008)              /*!< Port 9 interrupt vector value */
N#define P9IV4                                              (0x0010)              /*!< Port 9 interrupt vector value */
N#define P9IV_0                                             (0x0000)              /*!< No interrupt pending */
N#define P9IV_2                                             (0x0002)              /*!< Interrupt Source: Port 9.0 interrupt; Interrupt Flag: P9IFG0; Interrupt Priority: Highest */
N#define P9IV_4                                             (0x0004)              /*!< Interrupt Source: Port 9.1 interrupt; Interrupt Flag: P9IFG1 */
N#define P9IV_6                                             (0x0006)              /*!< Interrupt Source: Port 9.2 interrupt; Interrupt Flag: P9IFG2 */
N#define P9IV_8                                             (0x0008)              /*!< Interrupt Source: Port 9.3 interrupt; Interrupt Flag: P9IFG3 */
N#define P9IV_10                                            (0x000a)              /*!< Interrupt Source: Port 9.4 interrupt; Interrupt Flag: P9IFG4 */
N#define P9IV_12                                            (0x000c)              /*!< Interrupt Source: Port 9.5 interrupt; Interrupt Flag: P9IFG5 */
N#define P9IV_14                                            (0x000e)              /*!< Interrupt Source: Port 9.6 interrupt; Interrupt Flag: P9IFG6 */
N#define P9IV_16                                            (0x0010)              /*!< Interrupt Source: Port 9.7 interrupt; Interrupt Flag: P9IFG7; Interrupt Priority: Lowest */
N#define P9IV__NONE                                         (0x0000)              /*!< No interrupt pending */
N#define P9IV__P9IFG0                                       (0x0002)              /*!< Interrupt Source: Port 9.0 interrupt; Interrupt Flag: P9IFG0; Interrupt Priority: Highest */
N#define P9IV__P9IFG1                                       (0x0004)              /*!< Interrupt Source: Port 9.1 interrupt; Interrupt Flag: P9IFG1 */
N#define P9IV__P9IFG2                                       (0x0006)              /*!< Interrupt Source: Port 9.2 interrupt; Interrupt Flag: P9IFG2 */
N#define P9IV__P9IFG3                                       (0x0008)              /*!< Interrupt Source: Port 9.3 interrupt; Interrupt Flag: P9IFG3 */
N#define P9IV__P9IFG4                                       (0x000a)              /*!< Interrupt Source: Port 9.4 interrupt; Interrupt Flag: P9IFG4 */
N#define P9IV__P9IFG5                                       (0x000c)              /*!< Interrupt Source: Port 9.5 interrupt; Interrupt Flag: P9IFG5 */
N#define P9IV__P9IFG6                                       (0x000e)              /*!< Interrupt Source: Port 9.6 interrupt; Interrupt Flag: P9IFG6 */
N#define P9IV__P9IFG7                                       (0x0010)              /*!< Interrupt Source: Port 9.7 interrupt; Interrupt Flag: P9IFG7; Interrupt Priority: Lowest */
N/* DIO_PESELC[P9SELC] Bits */
N#define P9SELC_OFS                                         ( 0)                  /*!< P9SELC Offset */
N#define P9SELC_M                                           (0x00ff)              /*!< Port 9 Complement Select */
N/* DIO_PESELC[P10SELC] Bits */
N#define P10SELC_OFS                                        ( 8)                  /*!< P10SELC Offset */
N#define P10SELC_M                                          (0xff00)              /*!< Port 10 Complement Select */
N/* DIO_PEIES[P9IES] Bits */
N#define P9IES_OFS                                          ( 0)                  /*!< P9IES Offset */
N#define P9IES_M                                            (0x00ff)              /*!< Port 9 Interrupt Edge Select */
N/* DIO_PEIES[P10IES] Bits */
N#define P10IES_OFS                                         ( 8)                  /*!< P10IES Offset */
N#define P10IES_M                                           (0xff00)              /*!< Port 10 Interrupt Edge Select */
N/* DIO_PEIE[P9IE] Bits */
N#define P9IE_OFS                                           ( 0)                  /*!< P9IE Offset */
N#define P9IE_M                                             (0x00ff)              /*!< Port 9 Interrupt Enable */
N/* DIO_PEIE[P10IE] Bits */
N#define P10IE_OFS                                          ( 8)                  /*!< P10IE Offset */
N#define P10IE_M                                            (0xff00)              /*!< Port 10 Interrupt Enable */
N/* DIO_PEIFG[P9IFG] Bits */
N#define P9IFG_OFS                                          ( 0)                  /*!< P9IFG Offset */
N#define P9IFG_M                                            (0x00ff)              /*!< Port 9 Interrupt Flag */
N/* DIO_PEIFG[P10IFG] Bits */
N#define P10IFG_OFS                                         ( 8)                  /*!< P10IFG Offset */
N#define P10IFG_M                                           (0xff00)              /*!< Port 10 Interrupt Flag */
N/* DIO_P10IV[P10IV] Bits */
N#define P10IV_OFS                                          ( 0)                  /*!< P10IV Offset */
N#define P10IV_M                                            (0x001f)              /*!< Port 10 interrupt vector value */
N#define P10IV0                                             (0x0001)              /*!< Port 10 interrupt vector value */
N#define P10IV1                                             (0x0002)              /*!< Port 10 interrupt vector value */
N#define P10IV2                                             (0x0004)              /*!< Port 10 interrupt vector value */
N#define P10IV3                                             (0x0008)              /*!< Port 10 interrupt vector value */
N#define P10IV4                                             (0x0010)              /*!< Port 10 interrupt vector value */
N#define P10IV_0                                            (0x0000)              /*!< No interrupt pending */
N#define P10IV_2                                            (0x0002)              /*!< Interrupt Source: Port 10.0 interrupt; Interrupt Flag: P10IFG0; Interrupt Priority: Highest */
N#define P10IV_4                                            (0x0004)              /*!< Interrupt Source: Port 10.1 interrupt; Interrupt Flag: P10IFG1 */
N#define P10IV_6                                            (0x0006)              /*!< Interrupt Source: Port 10.2 interrupt; Interrupt Flag: P10IFG2 */
N#define P10IV_8                                            (0x0008)              /*!< Interrupt Source: Port 10.3 interrupt; Interrupt Flag: P10IFG3 */
N#define P10IV_10                                           (0x000a)              /*!< Interrupt Source: Port 10.4 interrupt; Interrupt Flag: P10IFG4 */
N#define P10IV_12                                           (0x000c)              /*!< Interrupt Source: Port 10.5 interrupt; Interrupt Flag: P10IFG5 */
N#define P10IV_14                                           (0x000e)              /*!< Interrupt Source: Port 10.6 interrupt; Interrupt Flag: P10IFG6 */
N#define P10IV_16                                           (0x0010)              /*!< Interrupt Source: Port 10.7 interrupt; Interrupt Flag: P10IFG7; Interrupt Priority: Lowest */
N#define P10IV__NONE                                        (0x0000)              /*!< No interrupt pending */
N#define P10IV__P10IFG0                                     (0x0002)              /*!< Interrupt Source: Port 10.0 interrupt; Interrupt Flag: P10IFG0; Interrupt Priority: Highest */
N#define P10IV__P10IFG1                                     (0x0004)              /*!< Interrupt Source: Port 10.1 interrupt; Interrupt Flag: P10IFG1 */
N#define P10IV__P10IFG2                                     (0x0006)              /*!< Interrupt Source: Port 10.2 interrupt; Interrupt Flag: P10IFG2 */
N#define P10IV__P10IFG3                                     (0x0008)              /*!< Interrupt Source: Port 10.3 interrupt; Interrupt Flag: P10IFG3 */
N#define P10IV__P10IFG4                                     (0x000a)              /*!< Interrupt Source: Port 10.4 interrupt; Interrupt Flag: P10IFG4 */
N#define P10IV__P10IFG5                                     (0x000c)              /*!< Interrupt Source: Port 10.5 interrupt; Interrupt Flag: P10IFG5 */
N#define P10IV__P10IFG6                                     (0x000e)              /*!< Interrupt Source: Port 10.6 interrupt; Interrupt Flag: P10IFG6 */
N#define P10IV__P10IFG7                                     (0x0010)              /*!< Interrupt Source: Port 10.7 interrupt; Interrupt Flag: P10IFG7; Interrupt Priority: Lowest */
N
N
N/******************************************************************************
N* EUSCI_A Bits (legacy section)
N******************************************************************************/
N/* UCA0CTLW0[UCSWRST] Bits */
N#define UCSWRST_OFS                              EUSCI_A_CTLW0_SWRST_OFS         /*!< UCSWRST Offset */
N#define UCSWRST                                  EUSCI_A_CTLW0_SWRST             /*!< Software reset enable */
N/* UCA0CTLW0[UCTXBRK] Bits */
N#define UCTXBRK_OFS                              EUSCI_A_CTLW0_TXBRK_OFS         /*!< UCTXBRK Offset */
N#define UCTXBRK                                  EUSCI_A_CTLW0_TXBRK             /*!< Transmit break */
N/* UCA0CTLW0[UCTXADDR] Bits */
N#define UCTXADDR_OFS                             EUSCI_A_CTLW0_TXADDR_OFS        /*!< UCTXADDR Offset */
N#define UCTXADDR                                 EUSCI_A_CTLW0_TXADDR            /*!< Transmit address */
N/* UCA0CTLW0[UCDORM] Bits */
N#define UCDORM_OFS                               EUSCI_A_CTLW0_DORM_OFS          /*!< UCDORM Offset */
N#define UCDORM                                   EUSCI_A_CTLW0_DORM              /*!< Dormant */
N/* UCA0CTLW0[UCBRKIE] Bits */
N#define UCBRKIE_OFS                              EUSCI_A_CTLW0_BRKIE_OFS         /*!< UCBRKIE Offset */
N#define UCBRKIE                                  EUSCI_A_CTLW0_BRKIE             /*!< Receive break character interrupt enable */
N/* UCA0CTLW0[UCRXEIE] Bits */
N#define UCRXEIE_OFS                              EUSCI_A_CTLW0_RXEIE_OFS         /*!< UCRXEIE Offset */
N#define UCRXEIE                                  EUSCI_A_CTLW0_RXEIE             /*!< Receive erroneous-character interrupt enable */
N/* UCA0CTLW0[UCSSEL] Bits */
N#define UCSSEL_OFS                               EUSCI_A_CTLW0_SSEL_OFS          /*!< UCSSEL Offset */
N#define UCSSEL_M                                 EUSCI_A_CTLW0_SSEL_MASK         /*!< eUSCI_A clock source select */
N#define UCSSEL0                                  EUSCI_A_CTLW0_SSEL0             /*!< UCSSEL Bit 0 */
N#define UCSSEL1                                  EUSCI_A_CTLW0_SSEL1             /*!< UCSSEL Bit 1 */
N#define UCSSEL_0                                 EUSCI_A_CTLW0_UCSSEL_0          /*!< UCLK */
N#define UCSSEL_1                                 EUSCI_A_CTLW0_UCSSEL_1          /*!< ACLK */
N#define UCSSEL_2                                 EUSCI_A_CTLW0_UCSSEL_2          /*!< SMCLK */
N#define UCSSEL__UCLK                             EUSCI_A_CTLW0_SSEL__UCLK        /*!< UCLK */
N#define UCSSEL__ACLK                             EUSCI_A_CTLW0_SSEL__ACLK        /*!< ACLK */
N#define UCSSEL__SMCLK                            EUSCI_A_CTLW0_SSEL__SMCLK       /*!< SMCLK */
N/* UCA0CTLW0[UCSYNC] Bits */
N#define UCSYNC_OFS                               EUSCI_A_CTLW0_SYNC_OFS          /*!< UCSYNC Offset */
N#define UCSYNC                                   EUSCI_A_CTLW0_SYNC              /*!< Synchronous mode enable */
N/* UCA0CTLW0[UCMODE] Bits */
N#define UCMODE_OFS                               EUSCI_A_CTLW0_MODE_OFS          /*!< UCMODE Offset */
N#define UCMODE_M                                 EUSCI_A_CTLW0_MODE_MASK         /*!< eUSCI_A mode */
N#define UCMODE0                                  EUSCI_A_CTLW0_MODE0             /*!< UCMODE Bit 0 */
N#define UCMODE1                                  EUSCI_A_CTLW0_MODE1             /*!< UCMODE Bit 1 */
N#define UCMODE_0                                 EUSCI_A_CTLW0_MODE_0            /*!< UART mode */
N#define UCMODE_1                                 EUSCI_A_CTLW0_MODE_1            /*!< Idle-line multiprocessor mode */
N#define UCMODE_2                                 EUSCI_A_CTLW0_MODE_2            /*!< Address-bit multiprocessor mode */
N#define UCMODE_3                                 EUSCI_A_CTLW0_MODE_3            /*!< UART mode with automatic baud-rate detection */
N/* UCA0CTLW0[UCSPB] Bits */
N#define UCSPB_OFS                                EUSCI_A_CTLW0_SPB_OFS           /*!< UCSPB Offset */
N#define UCSPB                                    EUSCI_A_CTLW0_SPB               /*!< Stop bit select */
N/* UCA0CTLW0[UC7BIT] Bits */
N#define UC7BIT_OFS                               EUSCI_A_CTLW0_SEVENBIT_OFS      /*!< UC7BIT Offset */
N#define UC7BIT                                   EUSCI_A_CTLW0_SEVENBIT          /*!< Character length */
N/* UCA0CTLW0[UCMSB] Bits */
N#define UCMSB_OFS                                EUSCI_A_CTLW0_MSB_OFS           /*!< UCMSB Offset */
N#define UCMSB                                    EUSCI_A_CTLW0_MSB               /*!< MSB first select */
N/* UCA0CTLW0[UCPAR] Bits */
N#define UCPAR_OFS                                EUSCI_A_CTLW0_PAR_OFS           /*!< UCPAR Offset */
N#define UCPAR                                    EUSCI_A_CTLW0_PAR               /*!< Parity select */
N/* UCA0CTLW0[UCPEN] Bits */
N#define UCPEN_OFS                                EUSCI_A_CTLW0_PEN_OFS           /*!< UCPEN Offset */
N#define UCPEN                                    EUSCI_A_CTLW0_PEN               /*!< Parity enable */
N/* UCA0CTLW0_SPI[UCSWRST] Bits */
N//#define UCSWRST_OFS                              EUSCI_A_CTLW0_SWRST_OFS         /*!< UCSWRST Offset */
N//#define UCSWRST                                  EUSCI_A_CTLW0_SWRST             /*!< Software reset enable */
N/* UCA0CTLW0_SPI[UCSTEM] Bits */
N#define UCSTEM_OFS                               EUSCI_A_CTLW0_STEM_OFS          /*!< UCSTEM Offset */
N#define UCSTEM                                   EUSCI_A_CTLW0_STEM              /*!< STE mode select in master mode. */
N/* UCA0CTLW0_SPI[UCSSEL] Bits */
N//#define UCSSEL_OFS                               EUSCI_A_CTLW0_SSEL_OFS          /*!< UCSSEL Offset */
N//#define UCSSEL_M                                 EUSCI_A_CTLW0_SSEL_MASK         /*!< eUSCI_A clock source select */
N//#define UCSSEL0                                  EUSCI_A_CTLW0_SSEL0             /*!< UCSSEL Bit 0 */
N//#define UCSSEL1                                  EUSCI_A_CTLW0_SSEL1             /*!< UCSSEL Bit 1 */
N//#define UCSSEL_0                                 EUSCI_A_CTLW0_UCSSEL_0          /*!< Reserved */
N//#define UCSSEL_1                                 EUSCI_A_CTLW0_UCSSEL_1          /*!< ACLK */
N//#define UCSSEL_2                                 EUSCI_A_CTLW0_UCSSEL_2          /*!< SMCLK */
N//#define UCSSEL__ACLK                             EUSCI_A_CTLW0_SSEL__ACLK        /*!< ACLK */
N//#define UCSSEL__SMCLK                            EUSCI_A_CTLW0_SSEL__SMCLK       /*!< SMCLK */
N/* UCA0CTLW0_SPI[UCSYNC] Bits */
N//#define UCSYNC_OFS                               EUSCI_A_CTLW0_SYNC_OFS          /*!< UCSYNC Offset */
N//#define UCSYNC                                   EUSCI_A_CTLW0_SYNC              /*!< Synchronous mode enable */
N/* UCA0CTLW0_SPI[UCMODE] Bits */
N//#define UCMODE_OFS                               EUSCI_A_CTLW0_MODE_OFS          /*!< UCMODE Offset */
N//#define UCMODE_M                                 EUSCI_A_CTLW0_MODE_MASK         /*!< eUSCI mode */
N//#define UCMODE0                                  EUSCI_A_CTLW0_MODE0             /*!< UCMODE Bit 0 */
N//#define UCMODE1                                  EUSCI_A_CTLW0_MODE1             /*!< UCMODE Bit 1 */
N//#define UCMODE_0                                 EUSCI_A_CTLW0_MODE_0            /*!< 3-pin SPI */
N//#define UCMODE_1                                 EUSCI_A_CTLW0_MODE_1            /*!< 4-pin SPI with UCxSTE active high: Slave enabled when UCxSTE = 1 */
N//#define UCMODE_2                                 EUSCI_A_CTLW0_MODE_2            /*!< 4-pin SPI with UCxSTE active low: Slave enabled when UCxSTE = 0 */
N/* UCA0CTLW0_SPI[UCMST] Bits */
N#define UCMST_OFS                                EUSCI_A_CTLW0_MST_OFS           /*!< UCMST Offset */
N#define UCMST                                    EUSCI_A_CTLW0_MST               /*!< Master mode select */
N/* UCA0CTLW0_SPI[UC7BIT] Bits */
N//#define UC7BIT_OFS                               EUSCI_A_CTLW0_SEVENBIT_OFS      /*!< UC7BIT Offset */
N//#define UC7BIT                                   EUSCI_A_CTLW0_SEVENBIT          /*!< Character length */
N/* UCA0CTLW0_SPI[UCMSB] Bits */
N//#define UCMSB_OFS                                EUSCI_A_CTLW0_MSB_OFS           /*!< UCMSB Offset */
N//#define UCMSB                                    EUSCI_A_CTLW0_MSB               /*!< MSB first select */
N/* UCA0CTLW0_SPI[UCCKPL] Bits */
N#define UCCKPL_OFS                               EUSCI_A_CTLW0_CKPL_OFS          /*!< UCCKPL Offset */
N#define UCCKPL                                   EUSCI_A_CTLW0_CKPL              /*!< Clock polarity select */
N/* UCA0CTLW0_SPI[UCCKPH] Bits */
N#define UCCKPH_OFS                               EUSCI_A_CTLW0_CKPH_OFS          /*!< UCCKPH Offset */
N#define UCCKPH                                   EUSCI_A_CTLW0_CKPH              /*!< Clock phase select */
N/* UCA0CTLW1[UCGLIT] Bits */
N#define UCGLIT_OFS                               EUSCI_A_CTLW1_GLIT_OFS          /*!< UCGLIT Offset */
N#define UCGLIT_M                                 EUSCI_A_CTLW1_GLIT_MASK         /*!< Deglitch time */
N#define UCGLIT0                                  EUSCI_A_CTLW1_GLIT0             /*!< UCGLIT Bit 0 */
N#define UCGLIT1                                  EUSCI_A_CTLW1_GLIT1             /*!< UCGLIT Bit 1 */
N#define UCGLIT_0                                 EUSCI_A_CTLW1_GLIT_0            /*!< Approximately 2 ns (equivalent of 1 delay element) */
N#define UCGLIT_1                                 EUSCI_A_CTLW1_GLIT_1            /*!< Approximately 50 ns */
N#define UCGLIT_2                                 EUSCI_A_CTLW1_GLIT_2            /*!< Approximately 100 ns */
N#define UCGLIT_3                                 EUSCI_A_CTLW1_GLIT_3            /*!< Approximately 200 ns */
N/* UCA0MCTLW[UCOS16] Bits */
N#define UCOS16_OFS                               EUSCI_A_MCTLW_OS16_OFS          /*!< UCOS16 Offset */
N#define UCOS16                                   EUSCI_A_MCTLW_OS16              /*!< Oversampling mode enabled */
N/* UCA0MCTLW[UCBRF] Bits */
N#define UCBRF_OFS                                EUSCI_A_MCTLW_BRF_OFS           /*!< UCBRF Offset */
N#define UCBRF_M                                  EUSCI_A_MCTLW_BRF_MASK          /*!< First modulation stage select */
N/* UCA0MCTLW[UCBRS] Bits */
N#define UCBRS_OFS                                EUSCI_A_MCTLW_BRS_OFS           /*!< UCBRS Offset */
N#define UCBRS_M                                  EUSCI_A_MCTLW_BRS_MASK          /*!< Second modulation stage select */
N/* UCA0STATW[UCBUSY] Bits */
N#define UCBUSY_OFS                               EUSCI_A_STATW_BUSY_OFS          /*!< UCBUSY Offset */
N#define UCBUSY                                   EUSCI_A_STATW_BUSY              /*!< eUSCI_A busy */
N/* UCA0STATW[UCADDR_UCIDLE] Bits */
N#define UCADDR_UCIDLE_OFS                        EUSCI_A_STATW_ADDR_IDLE_OFS     /*!< UCADDR_UCIDLE Offset */
N#define UCADDR_UCIDLE                            EUSCI_A_STATW_ADDR_IDLE         /*!< Address received / Idle line detected */
N/* UCA0STATW[UCRXERR] Bits */
N#define UCRXERR_OFS                              EUSCI_A_STATW_RXERR_OFS         /*!< UCRXERR Offset */
N#define UCRXERR                                  EUSCI_A_STATW_RXERR             /*!< Receive error flag */
N/* UCA0STATW[UCBRK] Bits */
N#define UCBRK_OFS                                EUSCI_A_STATW_BRK_OFS           /*!< UCBRK Offset */
N#define UCBRK                                    EUSCI_A_STATW_BRK               /*!< Break detect flag */
N/* UCA0STATW[UCPE] Bits */
N#define UCPE_OFS                                 EUSCI_A_STATW_PE_OFS            /*!< UCPE Offset */
N#define UCPE                                     EUSCI_A_STATW_PE                
N/* UCA0STATW[UCOE] Bits */
N#define UCOE_OFS                                 EUSCI_A_STATW_OE_OFS            /*!< UCOE Offset */
N#define UCOE                                     EUSCI_A_STATW_OE                /*!< Overrun error flag */
N/* UCA0STATW[UCFE] Bits */
N#define UCFE_OFS                                 EUSCI_A_STATW_FE_OFS            /*!< UCFE Offset */
N#define UCFE                                     EUSCI_A_STATW_FE                /*!< Framing error flag */
N/* UCA0STATW[UCLISTEN] Bits */
N#define UCLISTEN_OFS                             EUSCI_A_STATW_LISTEN_OFS        /*!< UCLISTEN Offset */
N#define UCLISTEN                                 EUSCI_A_STATW_LISTEN            /*!< Listen enable */
N/* UCA0STATW_SPI[UCBUSY] Bits */
N//#define UCBUSY_OFS                               EUSCI_A_STATW_SPI_BUSY_OFS      /*!< UCBUSY Offset */
N//#define UCBUSY                                   EUSCI_A_STATW_SPI_BUSY          /*!< eUSCI_A busy */
N/* UCA0STATW_SPI[UCOE] Bits */
N//#define UCOE_OFS                                 EUSCI_A_STATW_OE_OFS            /*!< UCOE Offset */
N//#define UCOE                                     EUSCI_A_STATW_OE                /*!< Overrun error flag */
N/* UCA0STATW_SPI[UCFE] Bits */
N//#define UCFE_OFS                                 EUSCI_A_STATW_FE_OFS            /*!< UCFE Offset */
N//#define UCFE                                     EUSCI_A_STATW_FE                /*!< Framing error flag */
N/* UCA0STATW_SPI[UCLISTEN] Bits */
N//#define UCLISTEN_OFS                             EUSCI_A_STATW_LISTEN_OFS        /*!< UCLISTEN Offset */
N//#define UCLISTEN                                 EUSCI_A_STATW_LISTEN            /*!< Listen enable */
N/* UCA0RXBUF[UCRXBUF] Bits */
N#define UCRXBUF_OFS                              EUSCI_A_RXBUF_RXBUF_OFS         /*!< UCRXBUF Offset */
N#define UCRXBUF_M                                EUSCI_A_RXBUF_RXBUF_MASK        /*!< Receive data buffer */
N/* UCA0RXBUF_SPI[UCRXBUF] Bits */
N//#define UCRXBUF_OFS                              EUSCI_A_RXBUF_RXBUF_OFS         /*!< UCRXBUF Offset */
N//#define UCRXBUF_M                                EUSCI_A_RXBUF_RXBUF_MASK        /*!< Receive data buffer */
N/* UCA0TXBUF[UCTXBUF] Bits */
N#define UCTXBUF_OFS                              EUSCI_A_TXBUF_TXBUF_OFS         /*!< UCTXBUF Offset */
N#define UCTXBUF_M                                EUSCI_A_TXBUF_TXBUF_MASK        /*!< Transmit data buffer */
N/* UCA0TXBUF_SPI[UCTXBUF] Bits */
N//#define UCTXBUF_OFS                              EUSCI_A_TXBUF_TXBUF_OFS         /*!< UCTXBUF Offset */
N//#define UCTXBUF_M                                EUSCI_A_TXBUF_TXBUF_MASK        /*!< Transmit data buffer */
N/* UCA0ABCTL[UCABDEN] Bits */
N#define UCABDEN_OFS                              EUSCI_A_ABCTL_ABDEN_OFS         /*!< UCABDEN Offset */
N#define UCABDEN                                  EUSCI_A_ABCTL_ABDEN             /*!< Automatic baud-rate detect enable */
N/* UCA0ABCTL[UCBTOE] Bits */
N#define UCBTOE_OFS                               EUSCI_A_ABCTL_BTOE_OFS          /*!< UCBTOE Offset */
N#define UCBTOE                                   EUSCI_A_ABCTL_BTOE              /*!< Break time out error */
N/* UCA0ABCTL[UCSTOE] Bits */
N#define UCSTOE_OFS                               EUSCI_A_ABCTL_STOE_OFS          /*!< UCSTOE Offset */
N#define UCSTOE                                   EUSCI_A_ABCTL_STOE              /*!< Synch field time out error */
N/* UCA0ABCTL[UCDELIM] Bits */
N#define UCDELIM_OFS                              EUSCI_A_ABCTL_DELIM_OFS         /*!< UCDELIM Offset */
N#define UCDELIM_M                                EUSCI_A_ABCTL_DELIM_MASK        /*!< Break/synch delimiter length */
N#define UCDELIM0                                 EUSCI_A_ABCTL_DELIM0            /*!< UCDELIM Bit 0 */
N#define UCDELIM1                                 EUSCI_A_ABCTL_DELIM1            /*!< UCDELIM Bit 1 */
N#define UCDELIM_0                                EUSCI_A_ABCTL_DELIM_0           /*!< 1 bit time */
N#define UCDELIM_1                                EUSCI_A_ABCTL_DELIM_1           /*!< 2 bit times */
N#define UCDELIM_2                                EUSCI_A_ABCTL_DELIM_2           /*!< 3 bit times */
N#define UCDELIM_3                                EUSCI_A_ABCTL_DELIM_3           /*!< 4 bit times */
N/* UCA0IRCTL[UCIREN] Bits */
N#define UCIREN_OFS                               EUSCI_A_IRCTL_IREN_OFS          /*!< UCIREN Offset */
N#define UCIREN                                   EUSCI_A_IRCTL_IREN              /*!< IrDA encoder/decoder enable */
N/* UCA0IRCTL[UCIRTXCLK] Bits */
N#define UCIRTXCLK_OFS                            EUSCI_A_IRCTL_IRTXCLK_OFS       /*!< UCIRTXCLK Offset */
N#define UCIRTXCLK                                EUSCI_A_IRCTL_IRTXCLK           /*!< IrDA transmit pulse clock select */
N/* UCA0IRCTL[UCIRTXPL] Bits */
N#define UCIRTXPL_OFS                             EUSCI_A_IRCTL_IRTXPL_OFS        /*!< UCIRTXPL Offset */
N#define UCIRTXPL_M                               EUSCI_A_IRCTL_IRTXPL_MASK       /*!< Transmit pulse length */
N/* UCA0IRCTL[UCIRRXFE] Bits */
N#define UCIRRXFE_OFS                             EUSCI_A_IRCTL_IRRXFE_OFS        /*!< UCIRRXFE Offset */
N#define UCIRRXFE                                 EUSCI_A_IRCTL_IRRXFE            /*!< IrDA receive filter enabled */
N/* UCA0IRCTL[UCIRRXPL] Bits */
N#define UCIRRXPL_OFS                             EUSCI_A_IRCTL_IRRXPL_OFS        /*!< UCIRRXPL Offset */
N#define UCIRRXPL                                 EUSCI_A_IRCTL_IRRXPL            /*!< IrDA receive input UCAxRXD polarity */
N/* UCA0IRCTL[UCIRRXFL] Bits */
N#define UCIRRXFL_OFS                             EUSCI_A_IRCTL_IRRXFL_OFS        /*!< UCIRRXFL Offset */
N#define UCIRRXFL_M                               EUSCI_A_IRCTL_IRRXFL_MASK       /*!< Receive filter length */
N/* UCA0IE[UCRXIE] Bits */
N#define UCRXIE_OFS                               EUSCI_A_IE_RXIE_OFS             /*!< UCRXIE Offset */
N#define UCRXIE                                   EUSCI_A_IE_RXIE                 /*!< Receive interrupt enable */
N/* UCA0IE[UCTXIE] Bits */
N#define UCTXIE_OFS                               EUSCI_A_IE_TXIE_OFS             /*!< UCTXIE Offset */
N#define UCTXIE                                   EUSCI_A_IE_TXIE                 /*!< Transmit interrupt enable */
N/* UCA0IE[UCSTTIE] Bits */
N#define UCSTTIE_OFS                              EUSCI_A_IE_STTIE_OFS            /*!< UCSTTIE Offset */
N#define UCSTTIE                                  EUSCI_A_IE_STTIE                /*!< Start bit interrupt enable */
N/* UCA0IE[UCTXCPTIE] Bits */
N#define UCTXCPTIE_OFS                            EUSCI_A_IE_TXCPTIE_OFS          /*!< UCTXCPTIE Offset */
N#define UCTXCPTIE                                EUSCI_A_IE_TXCPTIE              /*!< Transmit complete interrupt enable */
N/* UCA0IE_SPI[UCRXIE] Bits */
N//#define UCRXIE_OFS                               EUSCI_A_IE_RXIE_OFS             /*!< UCRXIE Offset */
N//#define UCRXIE                                   EUSCI_A_IE_RXIE                 /*!< Receive interrupt enable */
N/* UCA0IE_SPI[UCTXIE] Bits */
N//#define UCTXIE_OFS                               EUSCI_A_IE_TXIE_OFS             /*!< UCTXIE Offset */
N//#define UCTXIE                                   EUSCI_A_IE_TXIE                 /*!< Transmit interrupt enable */
N/* UCA0IFG[UCRXIFG] Bits */
N#define UCRXIFG_OFS                              EUSCI_A_IFG_RXIFG_OFS           /*!< UCRXIFG Offset */
N#define UCRXIFG                                  EUSCI_A_IFG_RXIFG               /*!< Receive interrupt flag */
N/* UCA0IFG[UCTXIFG] Bits */
N#define UCTXIFG_OFS                              EUSCI_A_IFG_TXIFG_OFS           /*!< UCTXIFG Offset */
N#define UCTXIFG                                  EUSCI_A_IFG_TXIFG               /*!< Transmit interrupt flag */
N/* UCA0IFG[UCSTTIFG] Bits */
N#define UCSTTIFG_OFS                             EUSCI_A_IFG_STTIFG_OFS          /*!< UCSTTIFG Offset */
N#define UCSTTIFG                                 EUSCI_A_IFG_STTIFG              /*!< Start bit interrupt flag */
N/* UCA0IFG[UCTXCPTIFG] Bits */
N#define UCTXCPTIFG_OFS                           EUSCI_A_IFG_TXCPTIFG_OFS        /*!< UCTXCPTIFG Offset */
N#define UCTXCPTIFG                               EUSCI_A_IFG_TXCPTIFG            /*!< Transmit ready interrupt enable */
N/* UCA0IFG_SPI[UCRXIFG] Bits */
N//#define UCRXIFG_OFS                              EUSCI_A_IFG_RXIFG_OFS           /*!< UCRXIFG Offset */
N//#define UCRXIFG                                  EUSCI_A_IFG_RXIFG               /*!< Receive interrupt flag */
N/* UCA0IFG_SPI[UCTXIFG] Bits */
N//#define UCTXIFG_OFS                              EUSCI_A_IFG_TXIFG_OFS           /*!< UCTXIFG Offset */
N//#define UCTXIFG                                  EUSCI_A_IFG_TXIFG               /*!< Transmit interrupt flag */
N
N/******************************************************************************
N* EUSCI_B Bits (legacy section)
N******************************************************************************/
N/* UCB0CTLW0[UCSWRST] Bits */
N//#define UCSWRST_OFS                              EUSCI_B_CTLW0_SWRST_OFS         /*!< UCSWRST Offset */
N//#define UCSWRST                                  EUSCI_B_CTLW0_SWRST             /*!< Software reset enable */
N/* UCB0CTLW0[UCTXSTT] Bits */
N#define UCTXSTT_OFS                              EUSCI_B_CTLW0_TXSTT_OFS         /*!< UCTXSTT Offset */
N#define UCTXSTT                                  EUSCI_B_CTLW0_TXSTT             /*!< Transmit START condition in master mode */
N/* UCB0CTLW0[UCTXSTP] Bits */
N#define UCTXSTP_OFS                              EUSCI_B_CTLW0_TXSTP_OFS         /*!< UCTXSTP Offset */
N#define UCTXSTP                                  EUSCI_B_CTLW0_TXSTP             /*!< Transmit STOP condition in master mode */
N/* UCB0CTLW0[UCTXNACK] Bits */
N#define UCTXNACK_OFS                             EUSCI_B_CTLW0_TXNACK_OFS        /*!< UCTXNACK Offset */
N#define UCTXNACK                                 EUSCI_B_CTLW0_TXNACK            /*!< Transmit a NACK */
N/* UCB0CTLW0[UCTR] Bits */
N#define UCTR_OFS                                 EUSCI_B_CTLW0_TR_OFS            /*!< UCTR Offset */
N#define UCTR                                     EUSCI_B_CTLW0_TR                /*!< Transmitter/receiver */
N/* UCB0CTLW0[UCTXACK] Bits */
N#define UCTXACK_OFS                              EUSCI_B_CTLW0_TXACK_OFS         /*!< UCTXACK Offset */
N#define UCTXACK                                  EUSCI_B_CTLW0_TXACK             /*!< Transmit ACK condition in slave mode */
N/* UCB0CTLW0[UCSSEL] Bits */
N//#define UCSSEL_OFS                               EUSCI_B_CTLW0_SSEL_OFS          /*!< UCSSEL Offset */
N//#define UCSSEL_M                                 EUSCI_B_CTLW0_SSEL_MASK         /*!< eUSCI_B clock source select */
N//#define UCSSEL0                                  EUSCI_B_CTLW0_SSEL0             /*!< UCSSEL Bit 0 */
N//#define UCSSEL1                                  EUSCI_B_CTLW0_SSEL1             /*!< UCSSEL Bit 1 */
N//#define UCSSEL_0                                 EUSCI_B_CTLW0_UCSSEL_0          /*!< UCLKI */
N//#define UCSSEL_1                                 EUSCI_B_CTLW0_UCSSEL_1          /*!< ACLK */
N//#define UCSSEL_2                                 EUSCI_B_CTLW0_UCSSEL_2          /*!< SMCLK */
N#define UCSSEL_3                                 EUSCI_B_CTLW0_UCSSEL_3          /*!< SMCLK */
N#define UCSSEL__UCLKI                            EUSCI_B_CTLW0_SSEL__UCLKI       /*!< UCLKI */
N//#define UCSSEL__ACLK                             EUSCI_B_CTLW0_SSEL__ACLK        /*!< ACLK */
N//#define UCSSEL__SMCLK                            EUSCI_B_CTLW0_SSEL__SMCLK       /*!< SMCLK */
N/* UCB0CTLW0[UCSYNC] Bits */
N//#define UCSYNC_OFS                               EUSCI_B_CTLW0_SYNC_OFS          /*!< UCSYNC Offset */
N//#define UCSYNC                                   EUSCI_B_CTLW0_SYNC              /*!< Synchronous mode enable */
N/* UCB0CTLW0[UCMODE] Bits */
N//#define UCMODE_OFS                               EUSCI_B_CTLW0_MODE_OFS          /*!< UCMODE Offset */
N//#define UCMODE_M                                 EUSCI_B_CTLW0_MODE_MASK         /*!< eUSCI_B mode */
N//#define UCMODE0                                  EUSCI_B_CTLW0_MODE0             /*!< UCMODE Bit 0 */
N//#define UCMODE1                                  EUSCI_B_CTLW0_MODE1             /*!< UCMODE Bit 1 */
N//#define UCMODE_0                                 EUSCI_B_CTLW0_MODE_0            /*!< 3-pin SPI */
N//#define UCMODE_1                                 EUSCI_B_CTLW0_MODE_1            /*!< 4-pin SPI (master or slave enabled if STE = 1) */
N//#define UCMODE_2                                 EUSCI_B_CTLW0_MODE_2            /*!< 4-pin SPI (master or slave enabled if STE = 0) */
N//#define UCMODE_3                                 EUSCI_B_CTLW0_MODE_3            /*!< I2C mode */
N/* UCB0CTLW0[UCMST] Bits */
N//#define UCMST_OFS                                EUSCI_B_CTLW0_MST_OFS           /*!< UCMST Offset */
N//#define UCMST                                    EUSCI_B_CTLW0_MST               /*!< Master mode select */
N/* UCB0CTLW0[UCMM] Bits */
N#define UCMM_OFS                                 EUSCI_B_CTLW0_MM_OFS            /*!< UCMM Offset */
N#define UCMM                                     EUSCI_B_CTLW0_MM                /*!< Multi-master environment select */
N/* UCB0CTLW0[UCSLA10] Bits */
N#define UCSLA10_OFS                              EUSCI_B_CTLW0_SLA10_OFS         /*!< UCSLA10 Offset */
N#define UCSLA10                                  EUSCI_B_CTLW0_SLA10             /*!< Slave addressing mode select */
N/* UCB0CTLW0[UCA10] Bits */
N#define UCA10_OFS                                EUSCI_B_CTLW0_A10_OFS           /*!< UCA10 Offset */
N#define UCA10                                    EUSCI_B_CTLW0_A10               /*!< Own addressing mode select */
N/* UCB0CTLW0_SPI[UCSWRST] Bits */
N//#define UCSWRST_OFS                              EUSCI_B_CTLW0_SWRST_OFS         /*!< UCSWRST Offset */
N//#define UCSWRST                                  EUSCI_B_CTLW0_SWRST             /*!< Software reset enable */
N/* UCB0CTLW0_SPI[UCSTEM] Bits */
N//#define UCSTEM_OFS                               EUSCI_B_CTLW0_STEM_OFS          /*!< UCSTEM Offset */
N//#define UCSTEM                                   EUSCI_B_CTLW0_STEM              /*!< STE mode select in master mode. */
N/* UCB0CTLW0_SPI[UCSSEL] Bits */
N//#define UCSSEL_OFS                               EUSCI_B_CTLW0_SSEL_OFS          /*!< UCSSEL Offset */
N//#define UCSSEL_M                                 EUSCI_B_CTLW0_SSEL_MASK         /*!< eUSCI_B clock source select */
N//#define UCSSEL0                                  EUSCI_B_CTLW0_SSEL0             /*!< UCSSEL Bit 0 */
N//#define UCSSEL1                                  EUSCI_B_CTLW0_SSEL1             /*!< UCSSEL Bit 1 */
N//#define UCSSEL_0                                 EUSCI_B_CTLW0_UCSSEL_0          /*!< Reserved */
N//#define UCSSEL_1                                 EUSCI_B_CTLW0_UCSSEL_1          /*!< ACLK */
N//#define UCSSEL_2                                 EUSCI_B_CTLW0_UCSSEL_2          /*!< SMCLK */
N//#define UCSSEL_3                                 EUSCI_B_CTLW0_UCSSEL_3          /*!< SMCLK */
N//#define UCSSEL__ACLK                             EUSCI_B_CTLW0_SSEL__ACLK        /*!< ACLK */
N//#define UCSSEL__SMCLK                            EUSCI_B_CTLW0_SSEL__SMCLK       /*!< SMCLK */
N/* UCB0CTLW0_SPI[UCSYNC] Bits */
N//#define UCSYNC_OFS                               EUSCI_B_CTLW0_SYNC_OFS          /*!< UCSYNC Offset */
N//#define UCSYNC                                   EUSCI_B_CTLW0_SYNC              /*!< Synchronous mode enable */
N/* UCB0CTLW0_SPI[UCMODE] Bits */
N//#define UCMODE_OFS                               EUSCI_B_CTLW0_MODE_OFS          /*!< UCMODE Offset */
N//#define UCMODE_M                                 EUSCI_B_CTLW0_MODE_MASK         /*!< eUSCI mode */
N//#define UCMODE0                                  EUSCI_B_CTLW0_MODE0             /*!< UCMODE Bit 0 */
N//#define UCMODE1                                  EUSCI_B_CTLW0_MODE1             /*!< UCMODE Bit 1 */
N//#define UCMODE_0                                 EUSCI_B_CTLW0_MODE_0            /*!< 3-pin SPI */
N//#define UCMODE_1                                 EUSCI_B_CTLW0_MODE_1            /*!< 4-pin SPI with UCxSTE active high: Slave enabled when UCxSTE = 1 */
N//#define UCMODE_2                                 EUSCI_B_CTLW0_MODE_2            /*!< 4-pin SPI with UCxSTE active low: Slave enabled when UCxSTE = 0 */
N//#define UCMODE_3                                 EUSCI_B_CTLW0_MODE_3            /*!< I2C mode */
N/* UCB0CTLW0_SPI[UCMST] Bits */
N//#define UCMST_OFS                                EUSCI_B_CTLW0_MST_OFS           /*!< UCMST Offset */
N//#define UCMST                                    EUSCI_B_CTLW0_MST               /*!< Master mode select */
N/* UCB0CTLW0_SPI[UC7BIT] Bits */
N//#define UC7BIT_OFS                               EUSCI_B_CTLW0_SEVENBIT_OFS      /*!< UC7BIT Offset */
N//#define UC7BIT                                   EUSCI_B_CTLW0_SEVENBIT          /*!< Character length */
N/* UCB0CTLW0_SPI[UCMSB] Bits */
N//#define UCMSB_OFS                                EUSCI_B_CTLW0_MSB_OFS           /*!< UCMSB Offset */
N//#define UCMSB                                    EUSCI_B_CTLW0_MSB               /*!< MSB first select */
N/* UCB0CTLW0_SPI[UCCKPL] Bits */
N//#define UCCKPL_OFS                               EUSCI_B_CTLW0_CKPL_OFS          /*!< UCCKPL Offset */
N//#define UCCKPL                                   EUSCI_B_CTLW0_CKPL              /*!< Clock polarity select */
N/* UCB0CTLW0_SPI[UCCKPH] Bits */
N//#define UCCKPH_OFS                               EUSCI_B_CTLW0_CKPH_OFS          /*!< UCCKPH Offset */
N//#define UCCKPH                                   EUSCI_B_CTLW0_CKPH              /*!< Clock phase select */
N/* UCB0CTLW1[UCGLIT] Bits */
N//#define UCGLIT_OFS                               EUSCI_B_CTLW1_GLIT_OFS          /*!< UCGLIT Offset */
N//#define UCGLIT_M                                 EUSCI_B_CTLW1_GLIT_MASK         /*!< Deglitch time */
N//#define UCGLIT0                                  EUSCI_B_CTLW1_GLIT0             /*!< UCGLIT Bit 0 */
N//#define UCGLIT1                                  EUSCI_B_CTLW1_GLIT1             /*!< UCGLIT Bit 1 */
N//#define UCGLIT_0                                 EUSCI_B_CTLW1_GLIT_0            /*!< 50 ns */
N//#define UCGLIT_1                                 EUSCI_B_CTLW1_GLIT_1            /*!< 25 ns */
N//#define UCGLIT_2                                 EUSCI_B_CTLW1_GLIT_2            /*!< 12.5 ns */
N//#define UCGLIT_3                                 EUSCI_B_CTLW1_GLIT_3            /*!< 6.25 ns */
N/* UCB0CTLW1[UCASTP] Bits */
N#define UCASTP_OFS                               EUSCI_B_CTLW1_ASTP_OFS          /*!< UCASTP Offset */
N#define UCASTP_M                                 EUSCI_B_CTLW1_ASTP_MASK         /*!< Automatic STOP condition generation */
N#define UCASTP0                                  EUSCI_B_CTLW1_ASTP0             /*!< UCASTP Bit 0 */
N#define UCASTP1                                  EUSCI_B_CTLW1_ASTP1             /*!< UCASTP Bit 1 */
N#define UCASTP_0                                 EUSCI_B_CTLW1_ASTP_0            /*!< No automatic STOP generation. The STOP condition is generated after the user  */
N                                                                                 /* sets the UCTXSTP bit. The value in UCBxTBCNT is a don't care. */
N#define UCASTP_1                                 EUSCI_B_CTLW1_ASTP_1            /*!< UCBCNTIFG is set with the byte counter reaches the threshold defined in  */
N                                                                                 /* UCBxTBCNT */
N#define UCASTP_2                                 EUSCI_B_CTLW1_ASTP_2            /*!< A STOP condition is generated automatically after the byte counter value  */
N                                                                                 /* reached UCBxTBCNT. UCBCNTIFG is set with the byte counter reaching the */
N                                                                                 /* threshold */
N/* UCB0CTLW1[UCSWACK] Bits */
N#define UCSWACK_OFS                              EUSCI_B_CTLW1_SWACK_OFS         /*!< UCSWACK Offset */
N#define UCSWACK                                  EUSCI_B_CTLW1_SWACK             /*!< SW or HW ACK control */
N/* UCB0CTLW1[UCSTPNACK] Bits */
N#define UCSTPNACK_OFS                            EUSCI_B_CTLW1_STPNACK_OFS       /*!< UCSTPNACK Offset */
N#define UCSTPNACK                                EUSCI_B_CTLW1_STPNACK           /*!< ACK all master bytes */
N/* UCB0CTLW1[UCCLTO] Bits */
N#define UCCLTO_OFS                               EUSCI_B_CTLW1_CLTO_OFS          /*!< UCCLTO Offset */
N#define UCCLTO_M                                 EUSCI_B_CTLW1_CLTO_MASK         /*!< Clock low timeout select */
N#define UCCLTO0                                  EUSCI_B_CTLW1_CLTO0             /*!< UCCLTO Bit 0 */
N#define UCCLTO1                                  EUSCI_B_CTLW1_CLTO1             /*!< UCCLTO Bit 1 */
N#define UCCLTO_0                                 EUSCI_B_CTLW1_CLTO_0            /*!< Disable clock low timeout counter */
N#define UCCLTO_1                                 EUSCI_B_CTLW1_CLTO_1            /*!< 135 000 SYSCLK cycles (approximately 28 ms) */
N#define UCCLTO_2                                 EUSCI_B_CTLW1_CLTO_2            /*!< 150 000 SYSCLK cycles (approximately 31 ms) */
N#define UCCLTO_3                                 EUSCI_B_CTLW1_CLTO_3            /*!< 165 000 SYSCLK cycles (approximately 34 ms) */
N/* UCB0CTLW1[UCETXINT] Bits */
N#define UCETXINT_OFS                             EUSCI_B_CTLW1_ETXINT_OFS        /*!< UCETXINT Offset */
N#define UCETXINT                                 EUSCI_B_CTLW1_ETXINT            /*!< Early UCTXIFG0 */
N/* UCB0STATW[UCBBUSY] Bits */
N#define UCBBUSY_OFS                              EUSCI_B_STATW_BBUSY_OFS         /*!< UCBBUSY Offset */
N#define UCBBUSY                                  EUSCI_B_STATW_BBUSY             /*!< Bus busy */
N/* UCB0STATW[UCGC] Bits */
N#define UCGC_OFS                                 EUSCI_B_STATW_GC_OFS            /*!< UCGC Offset */
N#define UCGC                                     EUSCI_B_STATW_GC                /*!< General call address received */
N/* UCB0STATW[UCSCLLOW] Bits */
N#define UCSCLLOW_OFS                             EUSCI_B_STATW_SCLLOW_OFS        /*!< UCSCLLOW Offset */
N#define UCSCLLOW                                 EUSCI_B_STATW_SCLLOW            /*!< SCL low */
N/* UCB0STATW[UCBCNT] Bits */
N#define UCBCNT_OFS                               EUSCI_B_STATW_BCNT_OFS          /*!< UCBCNT Offset */
N#define UCBCNT_M                                 EUSCI_B_STATW_BCNT_MASK         /*!< Hardware byte counter value */
N/* UCB0STATW_SPI[UCBUSY] Bits */
N//#define UCBUSY_OFS                               EUSCI_B_STATW_SPI_BUSY_OFS      /*!< UCBUSY Offset */
N//#define UCBUSY                                   EUSCI_B_STATW_SPI_BUSY          /*!< eUSCI_B busy */
N/* UCB0STATW_SPI[UCOE] Bits */
N//#define UCOE_OFS                                 EUSCI_B_STATW_OE_OFS            /*!< UCOE Offset */
N//#define UCOE                                     EUSCI_B_STATW_OE                /*!< Overrun error flag */
N/* UCB0STATW_SPI[UCFE] Bits */
N//#define UCFE_OFS                                 EUSCI_B_STATW_FE_OFS            /*!< UCFE Offset */
N//#define UCFE                                     EUSCI_B_STATW_FE                /*!< Framing error flag */
N/* UCB0STATW_SPI[UCLISTEN] Bits */
N//#define UCLISTEN_OFS                             EUSCI_B_STATW_LISTEN_OFS        /*!< UCLISTEN Offset */
N//#define UCLISTEN                                 EUSCI_B_STATW_LISTEN            /*!< Listen enable */
N/* UCB0TBCNT[UCTBCNT] Bits */
N#define UCTBCNT_OFS                              EUSCI_B_TBCNT_TBCNT_OFS         /*!< UCTBCNT Offset */
N#define UCTBCNT_M                                EUSCI_B_TBCNT_TBCNT_MASK        /*!< Byte counter threshold value */
N/* UCB0RXBUF[UCRXBUF] Bits */
N//#define UCRXBUF_OFS                              EUSCI_B_RXBUF_RXBUF_OFS         /*!< UCRXBUF Offset */
N//#define UCRXBUF_M                                EUSCI_B_RXBUF_RXBUF_MASK        /*!< Receive data buffer */
N/* UCB0RXBUF_SPI[UCRXBUF] Bits */
N//#define UCRXBUF_OFS                              EUSCI_B_RXBUF_RXBUF_OFS         /*!< UCRXBUF Offset */
N//#define UCRXBUF_M                                EUSCI_B_RXBUF_RXBUF_MASK        /*!< Receive data buffer */
N/* UCB0TXBUF[UCTXBUF] Bits */
N//#define UCTXBUF_OFS                              EUSCI_B_TXBUF_TXBUF_OFS         /*!< UCTXBUF Offset */
N//#define UCTXBUF_M                                EUSCI_B_TXBUF_TXBUF_MASK        /*!< Transmit data buffer */
N/* UCB0TXBUF_SPI[UCTXBUF] Bits */
N//#define UCTXBUF_OFS                              EUSCI_B_TXBUF_TXBUF_OFS         /*!< UCTXBUF Offset */
N//#define UCTXBUF_M                                EUSCI_B_TXBUF_TXBUF_MASK        /*!< Transmit data buffer */
N/* UCB0I2COA0[I2COA0] Bits */
N#define I2COA0_OFS                               EUSCI_B_I2COA0_I2COA0_OFS       /*!< I2COA0 Offset */
N#define I2COA0_M                                 EUSCI_B_I2COA0_I2COA0_MASK      /*!< I2C own address */
N/* UCB0I2COA0[UCOAEN] Bits */
N#define UCOAEN_OFS                               EUSCI_B_I2COA0_OAEN_OFS         /*!< UCOAEN Offset */
N#define UCOAEN                                   EUSCI_B_I2COA0_OAEN             /*!< Own Address enable register */
N/* UCB0I2COA0[UCGCEN] Bits */
N#define UCGCEN_OFS                               EUSCI_B_I2COA0_GCEN_OFS         /*!< UCGCEN Offset */
N#define UCGCEN                                   EUSCI_B_I2COA0_GCEN             /*!< General call response enable */
N/* UCB0I2COA1[I2COA1] Bits */
N#define I2COA1_OFS                               EUSCI_B_I2COA1_I2COA1_OFS       /*!< I2COA1 Offset */
N#define I2COA1_M                                 EUSCI_B_I2COA1_I2COA1_MASK      /*!< I2C own address */
N/* UCB0I2COA1[UCOAEN] Bits */
N//#define UCOAEN_OFS                               EUSCI_B_I2COA1_OAEN_OFS         /*!< UCOAEN Offset */
N//#define UCOAEN                                   EUSCI_B_I2COA1_OAEN             /*!< Own Address enable register */
N/* UCB0I2COA2[I2COA2] Bits */
N#define I2COA2_OFS                               EUSCI_B_I2COA2_I2COA2_OFS       /*!< I2COA2 Offset */
N#define I2COA2_M                                 EUSCI_B_I2COA2_I2COA2_MASK      /*!< I2C own address */
N/* UCB0I2COA2[UCOAEN] Bits */
N//#define UCOAEN_OFS                               EUSCI_B_I2COA2_OAEN_OFS         /*!< UCOAEN Offset */
N//#define UCOAEN                                   EUSCI_B_I2COA2_OAEN             /*!< Own Address enable register */
N/* UCB0I2COA3[I2COA3] Bits */
N#define I2COA3_OFS                               EUSCI_B_I2COA3_I2COA3_OFS       /*!< I2COA3 Offset */
N#define I2COA3_M                                 EUSCI_B_I2COA3_I2COA3_MASK      /*!< I2C own address */
N/* UCB0I2COA3[UCOAEN] Bits */
N//#define UCOAEN_OFS                               EUSCI_B_I2COA3_OAEN_OFS         /*!< UCOAEN Offset */
N//#define UCOAEN                                   EUSCI_B_I2COA3_OAEN             /*!< Own Address enable register */
N/* UCB0ADDRX[ADDRX] Bits */
N#define ADDRX_OFS                                EUSCI_B_ADDRX_ADDRX_OFS         /*!< ADDRX Offset */
N#define ADDRX_M                                  EUSCI_B_ADDRX_ADDRX_MASK        /*!< Received Address Register */
N#define ADDRX0                                   EUSCI_B_ADDRX_ADDRX0            /*!< ADDRX Bit 0 */
N#define ADDRX1                                   EUSCI_B_ADDRX_ADDRX1            /*!< ADDRX Bit 1 */
N#define ADDRX2                                   EUSCI_B_ADDRX_ADDRX2            /*!< ADDRX Bit 2 */
N#define ADDRX3                                   EUSCI_B_ADDRX_ADDRX3            /*!< ADDRX Bit 3 */
N#define ADDRX4                                   EUSCI_B_ADDRX_ADDRX4            /*!< ADDRX Bit 4 */
N#define ADDRX5                                   EUSCI_B_ADDRX_ADDRX5            /*!< ADDRX Bit 5 */
N#define ADDRX6                                   EUSCI_B_ADDRX_ADDRX6            /*!< ADDRX Bit 6 */
N#define ADDRX7                                   EUSCI_B_ADDRX_ADDRX7            /*!< ADDRX Bit 7 */
N#define ADDRX8                                   EUSCI_B_ADDRX_ADDRX8            /*!< ADDRX Bit 8 */
N#define ADDRX9                                   EUSCI_B_ADDRX_ADDRX9            /*!< ADDRX Bit 9 */
N/* UCB0ADDMASK[ADDMASK] Bits */
N#define ADDMASK_OFS                              EUSCI_B_ADDMASK_ADDMASK_OFS     /*!< ADDMASK Offset */
N#define ADDMASK_M                                EUSCI_B_ADDMASK_ADDMASK_MASK    
N/* UCB0I2CSA[I2CSA] Bits */
N#define I2CSA_OFS                                EUSCI_B_I2CSA_I2CSA_OFS         /*!< I2CSA Offset */
N#define I2CSA_M                                  EUSCI_B_I2CSA_I2CSA_MASK        /*!< I2C slave address */
N/* UCB0IE[UCRXIE0] Bits */
N#define UCRXIE0_OFS                              EUSCI_B_IE_RXIE0_OFS            /*!< UCRXIE0 Offset */
N#define UCRXIE0                                  EUSCI_B_IE_RXIE0                /*!< Receive interrupt enable 0 */
N/* UCB0IE[UCTXIE0] Bits */
N#define UCTXIE0_OFS                              EUSCI_B_IE_TXIE0_OFS            /*!< UCTXIE0 Offset */
N#define UCTXIE0                                  EUSCI_B_IE_TXIE0                /*!< Transmit interrupt enable 0 */
N/* UCB0IE[UCSTTIE] Bits */
N//#define UCSTTIE_OFS                              EUSCI_B_IE_STTIE_OFS            /*!< UCSTTIE Offset */
N//#define UCSTTIE                                  EUSCI_B_IE_STTIE                /*!< START condition interrupt enable */
N/* UCB0IE[UCSTPIE] Bits */
N#define UCSTPIE_OFS                              EUSCI_B_IE_STPIE_OFS            /*!< UCSTPIE Offset */
N#define UCSTPIE                                  EUSCI_B_IE_STPIE                /*!< STOP condition interrupt enable */
N/* UCB0IE[UCALIE] Bits */
N#define UCALIE_OFS                               EUSCI_B_IE_ALIE_OFS             /*!< UCALIE Offset */
N#define UCALIE                                   EUSCI_B_IE_ALIE                 /*!< Arbitration lost interrupt enable */
N/* UCB0IE[UCNACKIE] Bits */
N#define UCNACKIE_OFS                             EUSCI_B_IE_NACKIE_OFS           /*!< UCNACKIE Offset */
N#define UCNACKIE                                 EUSCI_B_IE_NACKIE               /*!< Not-acknowledge interrupt enable */
N/* UCB0IE[UCBCNTIE] Bits */
N#define UCBCNTIE_OFS                             EUSCI_B_IE_BCNTIE_OFS           /*!< UCBCNTIE Offset */
N#define UCBCNTIE                                 EUSCI_B_IE_BCNTIE               /*!< Byte counter interrupt enable */
N/* UCB0IE[UCCLTOIE] Bits */
N#define UCCLTOIE_OFS                             EUSCI_B_IE_CLTOIE_OFS           /*!< UCCLTOIE Offset */
N#define UCCLTOIE                                 EUSCI_B_IE_CLTOIE               /*!< Clock low timeout interrupt enable */
N/* UCB0IE[UCRXIE1] Bits */
N#define UCRXIE1_OFS                              EUSCI_B_IE_RXIE1_OFS            /*!< UCRXIE1 Offset */
N#define UCRXIE1                                  EUSCI_B_IE_RXIE1                /*!< Receive interrupt enable 1 */
N/* UCB0IE[UCTXIE1] Bits */
N#define UCTXIE1_OFS                              EUSCI_B_IE_TXIE1_OFS            /*!< UCTXIE1 Offset */
N#define UCTXIE1                                  EUSCI_B_IE_TXIE1                /*!< Transmit interrupt enable 1 */
N/* UCB0IE[UCRXIE2] Bits */
N#define UCRXIE2_OFS                              EUSCI_B_IE_RXIE2_OFS            /*!< UCRXIE2 Offset */
N#define UCRXIE2                                  EUSCI_B_IE_RXIE2                /*!< Receive interrupt enable 2 */
N/* UCB0IE[UCTXIE2] Bits */
N#define UCTXIE2_OFS                              EUSCI_B_IE_TXIE2_OFS            /*!< UCTXIE2 Offset */
N#define UCTXIE2                                  EUSCI_B_IE_TXIE2                /*!< Transmit interrupt enable 2 */
N/* UCB0IE[UCRXIE3] Bits */
N#define UCRXIE3_OFS                              EUSCI_B_IE_RXIE3_OFS            /*!< UCRXIE3 Offset */
N#define UCRXIE3                                  EUSCI_B_IE_RXIE3                /*!< Receive interrupt enable 3 */
N/* UCB0IE[UCTXIE3] Bits */
N#define UCTXIE3_OFS                              EUSCI_B_IE_TXIE3_OFS            /*!< UCTXIE3 Offset */
N#define UCTXIE3                                  EUSCI_B_IE_TXIE3                /*!< Transmit interrupt enable 3 */
N/* UCB0IE[UCBIT9IE] Bits */
N#define UCBIT9IE_OFS                             EUSCI_B_IE_BIT9IE_OFS           /*!< UCBIT9IE Offset */
N#define UCBIT9IE                                 EUSCI_B_IE_BIT9IE               /*!< Bit position 9 interrupt enable */
N/* UCB0IE_SPI[UCRXIE] Bits */
N//#define UCRXIE_OFS                               EUSCI_B_IE_RXIE_OFS             /*!< UCRXIE Offset */
N//#define UCRXIE                                   EUSCI_B_IE_RXIE                 /*!< Receive interrupt enable */
N/* UCB0IE_SPI[UCTXIE] Bits */
N//#define UCTXIE_OFS                               EUSCI_B_IE_TXIE_OFS             /*!< UCTXIE Offset */
N//#define UCTXIE                                   EUSCI_B_IE_TXIE                 /*!< Transmit interrupt enable */
N/* UCB0IFG[UCRXIFG0] Bits */
N#define UCRXIFG0_OFS                             EUSCI_B_IFG_RXIFG0_OFS          /*!< UCRXIFG0 Offset */
N#define UCRXIFG0                                 EUSCI_B_IFG_RXIFG0              /*!< eUSCI_B receive interrupt flag 0 */
N/* UCB0IFG[UCTXIFG0] Bits */
N#define UCTXIFG0_OFS                             EUSCI_B_IFG_TXIFG0_OFS          /*!< UCTXIFG0 Offset */
N#define UCTXIFG0                                 EUSCI_B_IFG_TXIFG0              /*!< eUSCI_B transmit interrupt flag 0 */
N/* UCB0IFG[UCSTTIFG] Bits */
N//#define UCSTTIFG_OFS                             EUSCI_B_IFG_STTIFG_OFS          /*!< UCSTTIFG Offset */
N//#define UCSTTIFG                                 EUSCI_B_IFG_STTIFG              /*!< START condition interrupt flag */
N/* UCB0IFG[UCSTPIFG] Bits */
N#define UCSTPIFG_OFS                             EUSCI_B_IFG_STPIFG_OFS          /*!< UCSTPIFG Offset */
N#define UCSTPIFG                                 EUSCI_B_IFG_STPIFG              /*!< STOP condition interrupt flag */
N/* UCB0IFG[UCALIFG] Bits */
N#define UCALIFG_OFS                              EUSCI_B_IFG_ALIFG_OFS           /*!< UCALIFG Offset */
N#define UCALIFG                                  EUSCI_B_IFG_ALIFG               /*!< Arbitration lost interrupt flag */
N/* UCB0IFG[UCNACKIFG] Bits */
N#define UCNACKIFG_OFS                            EUSCI_B_IFG_NACKIFG_OFS         /*!< UCNACKIFG Offset */
N#define UCNACKIFG                                EUSCI_B_IFG_NACKIFG             /*!< Not-acknowledge received interrupt flag */
N/* UCB0IFG[UCBCNTIFG] Bits */
N#define UCBCNTIFG_OFS                            EUSCI_B_IFG_BCNTIFG_OFS         /*!< UCBCNTIFG Offset */
N#define UCBCNTIFG                                EUSCI_B_IFG_BCNTIFG             /*!< Byte counter interrupt flag */
N/* UCB0IFG[UCCLTOIFG] Bits */
N#define UCCLTOIFG_OFS                            EUSCI_B_IFG_CLTOIFG_OFS         /*!< UCCLTOIFG Offset */
N#define UCCLTOIFG                                EUSCI_B_IFG_CLTOIFG             /*!< Clock low timeout interrupt flag */
N/* UCB0IFG[UCRXIFG1] Bits */
N#define UCRXIFG1_OFS                             EUSCI_B_IFG_RXIFG1_OFS          /*!< UCRXIFG1 Offset */
N#define UCRXIFG1                                 EUSCI_B_IFG_RXIFG1              /*!< eUSCI_B receive interrupt flag 1 */
N/* UCB0IFG[UCTXIFG1] Bits */
N#define UCTXIFG1_OFS                             EUSCI_B_IFG_TXIFG1_OFS          /*!< UCTXIFG1 Offset */
N#define UCTXIFG1                                 EUSCI_B_IFG_TXIFG1              /*!< eUSCI_B transmit interrupt flag 1 */
N/* UCB0IFG[UCRXIFG2] Bits */
N#define UCRXIFG2_OFS                             EUSCI_B_IFG_RXIFG2_OFS          /*!< UCRXIFG2 Offset */
N#define UCRXIFG2                                 EUSCI_B_IFG_RXIFG2              /*!< eUSCI_B receive interrupt flag 2 */
N/* UCB0IFG[UCTXIFG2] Bits */
N#define UCTXIFG2_OFS                             EUSCI_B_IFG_TXIFG2_OFS          /*!< UCTXIFG2 Offset */
N#define UCTXIFG2                                 EUSCI_B_IFG_TXIFG2              /*!< eUSCI_B transmit interrupt flag 2 */
N/* UCB0IFG[UCRXIFG3] Bits */
N#define UCRXIFG3_OFS                             EUSCI_B_IFG_RXIFG3_OFS          /*!< UCRXIFG3 Offset */
N#define UCRXIFG3                                 EUSCI_B_IFG_RXIFG3              /*!< eUSCI_B receive interrupt flag 3 */
N/* UCB0IFG[UCTXIFG3] Bits */
N#define UCTXIFG3_OFS                             EUSCI_B_IFG_TXIFG3_OFS          /*!< UCTXIFG3 Offset */
N#define UCTXIFG3                                 EUSCI_B_IFG_TXIFG3              /*!< eUSCI_B transmit interrupt flag 3 */
N/* UCB0IFG[UCBIT9IFG] Bits */
N#define UCBIT9IFG_OFS                            EUSCI_B_IFG_BIT9IFG_OFS         /*!< UCBIT9IFG Offset */
N#define UCBIT9IFG                                EUSCI_B_IFG_BIT9IFG             /*!< Bit position 9 interrupt flag */
N/* UCB0IFG_SPI[UCRXIFG] Bits */
N//#define UCRXIFG_OFS                              EUSCI_B_IFG_RXIFG_OFS           /*!< UCRXIFG Offset */
N//#define UCRXIFG                                  EUSCI_B_IFG_RXIFG               /*!< Receive interrupt flag */
N/* UCB0IFG_SPI[UCTXIFG] Bits */
N//#define UCTXIFG_OFS                              EUSCI_B_IFG_TXIFG_OFS           /*!< UCTXIFG Offset */
N//#define UCTXIFG                                  EUSCI_B_IFG_TXIFG               /*!< Transmit interrupt flag */
N
N/******************************************************************************
N* PMAP Bits (legacy section)
N******************************************************************************/
N/* PMAPCTL[PMAPLOCKED] Bits */
N#define PMAPLOCKED_OFS                           PMAP_CTL_LOCKED_OFS             /*!< PMAPLOCKED Offset */
N#define PMAPLOCKED                               PMAP_CTL_LOCKED                 /*!< Port mapping lock bit */
N/* PMAPCTL[PMAPRECFG] Bits */
N#define PMAPRECFG_OFS                            PMAP_CTL_PRECFG_OFS             /*!< PMAPRECFG Offset */
N#define PMAPRECFG                                PMAP_CTL_PRECFG                 /*!< Port mapping reconfiguration control bit */
N/* Pre-defined bitfield values */
N/* PMAP_PMAPCTL[PMAPLOCKED] Bits */
N#define PMAPLOCKED_OFS                                     PMAP_CTL_LOCKED_OFS   /*!< PMAPLOCKED Offset */
N#define PMAPLOCKED                                         PMAP_CTL_LOCKED       /*!< Port mapping lock bit */
N/* PMAP_PMAPCTL[PMAPRECFG] Bits */
N#define PMAPRECFG_OFS                                      PMAP_CTL_PRECFG_OFS   /*!< PMAPRECFG Offset */
N#define PMAPRECFG                                          PMAP_CTL_PRECFG       /*!< Port mapping reconfiguration control bit */
N
N#define PM_NONE                                            PMAP_NONE
N#define PM_UCA0CLK                                         PMAP_UCA0CLK
N#define PM_UCA0RXD                                         PMAP_UCA0RXD
N#define PM_UCA0SOMI                                        PMAP_UCA0SOMI
N#define PM_UCA0TXD                                         PMAP_UCA0TXD
N#define PM_UCA0SIMO                                        PMAP_UCA0SIMO
N#define PM_UCB0CLK                                         PMAP_UCB0CLK
N#define PM_UCB0SDA                                         PMAP_UCB0SDA
N#define PM_UCB0SIMO                                        PMAP_UCB0SIMO
N#define PM_UCB0SCL                                         PMAP_UCB0SCL
N#define PM_UCB0SOMI                                        PMAP_UCB0SOMI
N#define PM_UCA1STE                                         PMAP_UCA1STE
N#define PM_UCA1CLK                                         PMAP_UCA1CLK
N#define PM_UCA1RXD                                         PMAP_UCA1RXD
N#define PM_UCA1SOMI                                        PMAP_UCA1SOMI
N#define PM_UCA1TXD                                         PMAP_UCA1TXD
N#define PM_UCA1SIMO                                        PMAP_UCA1SIMO
N#define PM_UCA2STE                                         PMAP_UCA2STE
N#define PM_UCA2CLK                                         PMAP_UCA2CLK
N#define PM_UCA2RXD                                         PMAP_UCA2RXD
N#define PM_UCA2SOMI                                        PMAP_UCA2SOMI
N#define PM_UCA2TXD                                         PMAP_UCA2TXD
N#define PM_UCA2SIMO                                        PMAP_UCA2SIMO
N#define PM_UCB2STE                                         PMAP_UCB2STE
N#define PM_UCB2CLK                                         PMAP_UCB2CLK
N#define PM_UCB2SDA                                         PMAP_UCB2SDA
N#define PM_UCB2SIMO                                        PMAP_UCB2SIMO
N#define PM_UCB2SCL                                         PMAP_UCB2SCL
N#define PM_UCB2SOMI                                        PMAP_UCB2SOMI
N#define PM_TA0CCR0A                                        PMAP_TA0CCR0A
N#define PM_TA0CCR1A                                        PMAP_TA0CCR1A
N#define PM_TA0CCR2A                                        PMAP_TA0CCR2A
N#define PM_TA0CCR3A                                        PMAP_TA0CCR3A
N#define PM_TA0CCR4A                                        PMAP_TA0CCR4A
N#define PM_TA1CCR1A                                        PMAP_TA1CCR1A
N#define PM_TA1CCR2A                                        PMAP_TA1CCR2A
N#define PM_TA1CCR3A                                        PMAP_TA1CCR3A
N#define PM_TA1CCR4A                                        PMAP_TA1CCR4A
N#define PM_TA0CLK                                          PMAP_TA0CLK
N#define PM_CE0OUT                                          PMAP_CE0OUT
N#define PM_TA1CLK                                          PMAP_TA1CLK
N#define PM_CE1OUT                                          PMAP_CE1OUT
N#define PM_DMAE0                                           PMAP_DMAE0
N#define PM_SMCLK                                           PMAP_SMCLK
N#define PM_ANALOG                                          PMAP_ANALOG
N
N#define PMAPKEY                                            PMAP_KEYID_VAL        /*!< Port Mapping Key */
N#define PMAPPWD                                            PMAP_KEYID_VAL        /*!< Legacy Definition: Mapping Key register */
N#define PMAPPW                                             PMAP_KEYID_VAL        /*!< Legacy Definition: Port Mapping Password */
N
N
N/******************************************************************************
N* REF_A Bits (legacy section)
N******************************************************************************/
N/* REFCTL0[REFON] Bits */
N#define REFON_OFS                                REF_A_CTL0_ON_OFS               /*!< REFON Offset */
N#define REFON                                    REF_A_CTL0_ON                   /*!< Reference enable */
N/* REFCTL0[REFOUT] Bits */
N#define REFOUT_OFS                               REF_A_CTL0_OUT_OFS              /*!< REFOUT Offset */
N#define REFOUT                                   REF_A_CTL0_OUT                  /*!< Reference output buffer */
N/* REFCTL0[REFTCOFF] Bits */
N#define REFTCOFF_OFS                             REF_A_CTL0_TCOFF_OFS            /*!< REFTCOFF Offset */
N#define REFTCOFF                                 REF_A_CTL0_TCOFF                /*!< Temperature sensor disabled */
N/* REFCTL0[REFVSEL] Bits */
N#define REFVSEL_OFS                              REF_A_CTL0_VSEL_OFS             /*!< REFVSEL Offset */
N#define REFVSEL_M                                REF_A_CTL0_VSEL_MASK            /*!< Reference voltage level select */
N#define REFVSEL0                                 REF_A_CTL0_VSEL0                /*!< REFVSEL Bit 0 */
N#define REFVSEL1                                 REF_A_CTL0_VSEL1                /*!< REFVSEL Bit 1 */
N#define REFVSEL_0                                REF_A_CTL0_VSEL_0               /*!< 1.2 V available when reference requested or REFON = 1 */
N#define REFVSEL_1                                REF_A_CTL0_VSEL_1               /*!< 1.45 V available when reference requested or REFON = 1 */
N#define REFVSEL_3                                REF_A_CTL0_VSEL_3               /*!< 2.5 V available when reference requested or REFON = 1 */
N/* REFCTL0[REFGENOT] Bits */
N#define REFGENOT_OFS                             REF_A_CTL0_GENOT_OFS            /*!< REFGENOT Offset */
N#define REFGENOT                                 REF_A_CTL0_GENOT                /*!< Reference generator one-time trigger */
N/* REFCTL0[REFBGOT] Bits */
N#define REFBGOT_OFS                              REF_A_CTL0_BGOT_OFS             /*!< REFBGOT Offset */
N#define REFBGOT                                  REF_A_CTL0_BGOT                 /*!< Bandgap and bandgap buffer one-time trigger */
N/* REFCTL0[REFGENACT] Bits */
N#define REFGENACT_OFS                            REF_A_CTL0_GENACT_OFS           /*!< REFGENACT Offset */
N#define REFGENACT                                REF_A_CTL0_GENACT               /*!< Reference generator active */
N/* REFCTL0[REFBGACT] Bits */
N#define REFBGACT_OFS                             REF_A_CTL0_BGACT_OFS            /*!< REFBGACT Offset */
N#define REFBGACT                                 REF_A_CTL0_BGACT                /*!< Reference bandgap active */
N/* REFCTL0[REFGENBUSY] Bits */
N#define REFGENBUSY_OFS                           REF_A_CTL0_GENBUSY_OFS          /*!< REFGENBUSY Offset */
N#define REFGENBUSY                               REF_A_CTL0_GENBUSY              /*!< Reference generator busy */
N/* REFCTL0[BGMODE] Bits */
N#define BGMODE_OFS                               REF_A_CTL0_BGMODE_OFS           /*!< BGMODE Offset */
N#define BGMODE                                   REF_A_CTL0_BGMODE               /*!< Bandgap mode */
N/* REFCTL0[REFGENRDY] Bits */
N#define REFGENRDY_OFS                            REF_A_CTL0_GENRDY_OFS           /*!< REFGENRDY Offset */
N#define REFGENRDY                                REF_A_CTL0_GENRDY               /*!< Variable reference voltage ready status */
N/* REFCTL0[REFBGRDY] Bits */
N#define REFBGRDY_OFS                             REF_A_CTL0_BGRDY_OFS            /*!< REFBGRDY Offset */
N#define REFBGRDY                                 REF_A_CTL0_BGRDY                /*!< Buffered bandgap voltage ready status */
N
N/******************************************************************************
N* RTC_C Bits (legacy section)
N******************************************************************************/
N/* RTCCTL0[RTCRDYIFG] Bits */
N#define RTCRDYIFG_OFS                            RTC_C_CTL0_RDYIFG_OFS           /*!< RTCRDYIFG Offset */
N#define RTCRDYIFG                                RTC_C_CTL0_RDYIFG               /*!< Real-time clock ready interrupt flag */
N/* RTCCTL0[RTCAIFG] Bits */
N#define RTCAIFG_OFS                              RTC_C_CTL0_AIFG_OFS             /*!< RTCAIFG Offset */
N#define RTCAIFG                                  RTC_C_CTL0_AIFG                 /*!< Real-time clock alarm interrupt flag */
N/* RTCCTL0[RTCTEVIFG] Bits */
N#define RTCTEVIFG_OFS                            RTC_C_CTL0_TEVIFG_OFS           /*!< RTCTEVIFG Offset */
N#define RTCTEVIFG                                RTC_C_CTL0_TEVIFG               /*!< Real-time clock time event interrupt flag */
N/* RTCCTL0[RTCOFIFG] Bits */
N#define RTCOFIFG_OFS                             RTC_C_CTL0_OFIFG_OFS            /*!< RTCOFIFG Offset */
N#define RTCOFIFG                                 RTC_C_CTL0_OFIFG                /*!< 32-kHz crystal oscillator fault interrupt flag */
N/* RTCCTL0[RTCRDYIE] Bits */
N#define RTCRDYIE_OFS                             RTC_C_CTL0_RDYIE_OFS            /*!< RTCRDYIE Offset */
N#define RTCRDYIE                                 RTC_C_CTL0_RDYIE                /*!< Real-time clock ready interrupt enable */
N/* RTCCTL0[RTCAIE] Bits */
N#define RTCAIE_OFS                               RTC_C_CTL0_AIE_OFS              /*!< RTCAIE Offset */
N#define RTCAIE                                   RTC_C_CTL0_AIE                  /*!< Real-time clock alarm interrupt enable */
N/* RTCCTL0[RTCTEVIE] Bits */
N#define RTCTEVIE_OFS                             RTC_C_CTL0_TEVIE_OFS            /*!< RTCTEVIE Offset */
N#define RTCTEVIE                                 RTC_C_CTL0_TEVIE                /*!< Real-time clock time event interrupt enable */
N/* RTCCTL0[RTCOFIE] Bits */
N#define RTCOFIE_OFS                              RTC_C_CTL0_OFIE_OFS             /*!< RTCOFIE Offset */
N#define RTCOFIE                                  RTC_C_CTL0_OFIE                 /*!< 32-kHz crystal oscillator fault interrupt enable */
N/* RTCCTL0[RTCKEY] Bits */
N#define RTCKEY_OFS                               RTC_C_CTL0_KEY_OFS              /*!< RTCKEY Offset */
N#define RTCKEY_M                                 RTC_C_CTL0_KEY_MASK             /*!< Real-time clock key */
N/* RTCCTL13[RTCTEV] Bits */
N#define RTCTEV_OFS                               RTC_C_CTL13_TEV_OFS             /*!< RTCTEV Offset */
N#define RTCTEV_M                                 RTC_C_CTL13_TEV_MASK            /*!< Real-time clock time event */
N#define RTCTEV0                                  RTC_C_CTL13_TEV0                /*!< RTCTEV Bit 0 */
N#define RTCTEV1                                  RTC_C_CTL13_TEV1                /*!< RTCTEV Bit 1 */
N#define RTCTEV_0                                 RTC_C_CTL13_TEV_0               /*!< Minute changed */
N#define RTCTEV_1                                 RTC_C_CTL13_TEV_1               /*!< Hour changed */
N#define RTCTEV_2                                 RTC_C_CTL13_TEV_2               /*!< Every day at midnight (00:00) */
N#define RTCTEV_3                                 RTC_C_CTL13_TEV_3               /*!< Every day at noon (12:00) */
N/* RTCCTL13[RTCSSEL] Bits */
N#define RTCSSEL_OFS                              RTC_C_CTL13_SSEL_OFS            /*!< RTCSSEL Offset */
N#define RTCSSEL_M                                RTC_C_CTL13_SSEL_MASK           /*!< Real-time clock source select */
N#define RTCSSEL0                                 RTC_C_CTL13_SSEL0               /*!< RTCSSEL Bit 0 */
N#define RTCSSEL1                                 RTC_C_CTL13_SSEL1               /*!< RTCSSEL Bit 1 */
N#define RTCSSEL_0                                RTC_C_CTL13_SSEL_0              /*!< BCLK */
N#define RTCSSEL__BCLK                            RTC_C_CTL13_SSEL__BCLK          /*!< BCLK */
N/* RTCCTL13[RTCRDY] Bits */
N#define RTCRDY_OFS                               RTC_C_CTL13_RDY_OFS             /*!< RTCRDY Offset */
N#define RTCRDY                                   RTC_C_CTL13_RDY                 /*!< Real-time clock ready */
N/* RTCCTL13[RTCMODE] Bits */
N#define RTCMODE_OFS                              RTC_C_CTL13_MODE_OFS            /*!< RTCMODE Offset */
N#define RTCMODE                                  RTC_C_CTL13_MODE                
N/* RTCCTL13[RTCHOLD] Bits */
N#define RTCHOLD_OFS                              RTC_C_CTL13_HOLD_OFS            /*!< RTCHOLD Offset */
N#define RTCHOLD                                  RTC_C_CTL13_HOLD                /*!< Real-time clock hold */
N/* RTCCTL13[RTCBCD] Bits */
N#define RTCBCD_OFS                               RTC_C_CTL13_BCD_OFS             /*!< RTCBCD Offset */
N#define RTCBCD                                   RTC_C_CTL13_BCD                 /*!< Real-time clock BCD select */
N/* RTCCTL13[RTCCALF] Bits */
N#define RTCCALF_OFS                              RTC_C_CTL13_CALF_OFS            /*!< RTCCALF Offset */
N#define RTCCALF_M                                RTC_C_CTL13_CALF_MASK           /*!< Real-time clock calibration frequency */
N#define RTCCALF0                                 RTC_C_CTL13_CALF0               /*!< RTCCALF Bit 0 */
N#define RTCCALF1                                 RTC_C_CTL13_CALF1               /*!< RTCCALF Bit 1 */
N#define RTCCALF_0                                RTC_C_CTL13_CALF_0              /*!< No frequency output to RTCCLK pin */
N#define RTCCALF_1                                RTC_C_CTL13_CALF_1              /*!< 512 Hz */
N#define RTCCALF_2                                RTC_C_CTL13_CALF_2              /*!< 256 Hz */
N#define RTCCALF_3                                RTC_C_CTL13_CALF_3              /*!< 1 Hz */
N#define RTCCALF__NONE                            RTC_C_CTL13_CALF__NONE          /*!< No frequency output to RTCCLK pin */
N#define RTCCALF__512                             RTC_C_CTL13_CALF__512           /*!< 512 Hz */
N#define RTCCALF__256                             RTC_C_CTL13_CALF__256           /*!< 256 Hz */
N#define RTCCALF__1                               RTC_C_CTL13_CALF__1             /*!< 1 Hz */
N/* RTCOCAL[RTCOCAL] Bits */
N#define RTCOCAL_OFS                              RTC_C_OCAL_OCAL_OFS             /*!< RTCOCAL Offset */
N#define RTCOCAL_M                                RTC_C_OCAL_OCAL_MASK            /*!< Real-time clock offset error calibration */
N/* RTCOCAL[RTCOCALS] Bits */
N#define RTCOCALS_OFS                             RTC_C_OCAL_OCALS_OFS            /*!< RTCOCALS Offset */
N#define RTCOCALS                                 RTC_C_OCAL_OCALS                /*!< Real-time clock offset error calibration sign */
N/* RTCTCMP[RTCTCMP] Bits */
N#define RTCTCMP_OFS                              RTC_C_TCMP_TCMPX_OFS            /*!< RTCTCMP Offset */
N#define RTCTCMP_M                                RTC_C_TCMP_TCMPX_MASK           /*!< Real-time clock temperature compensation */
N/* RTCTCMP[RTCTCOK] Bits */
N#define RTCTCOK_OFS                              RTC_C_TCMP_TCOK_OFS             /*!< RTCTCOK Offset */
N#define RTCTCOK                                  RTC_C_TCMP_TCOK                 /*!< Real-time clock temperature compensation write OK */
N/* RTCTCMP[RTCTCRDY] Bits */
N#define RTCTCRDY_OFS                             RTC_C_TCMP_TCRDY_OFS            /*!< RTCTCRDY Offset */
N#define RTCTCRDY                                 RTC_C_TCMP_TCRDY                /*!< Real-time clock temperature compensation ready */
N/* RTCTCMP[RTCTCMPS] Bits */
N#define RTCTCMPS_OFS                             RTC_C_TCMP_TCMPS_OFS            /*!< RTCTCMPS Offset */
N#define RTCTCMPS                                 RTC_C_TCMP_TCMPS                /*!< Real-time clock temperature compensation sign */
N/* RTCPS0CTL[RT0PSIFG] Bits */
N#define RT0PSIFG_OFS                             RTC_C_PS0CTL_RT0PSIFG_OFS       /*!< RT0PSIFG Offset */
N#define RT0PSIFG                                 RTC_C_PS0CTL_RT0PSIFG           /*!< Prescale timer 0 interrupt flag */
N/* RTCPS0CTL[RT0PSIE] Bits */
N#define RT0PSIE_OFS                              RTC_C_PS0CTL_RT0PSIE_OFS        /*!< RT0PSIE Offset */
N#define RT0PSIE                                  RTC_C_PS0CTL_RT0PSIE            /*!< Prescale timer 0 interrupt enable */
N/* RTCPS0CTL[RT0IP] Bits */
N#define RT0IP_OFS                                RTC_C_PS0CTL_RT0IP_OFS          /*!< RT0IP Offset */
N#define RT0IP_M                                  RTC_C_PS0CTL_RT0IP_MASK         /*!< Prescale timer 0 interrupt interval */
N#define RT0IP0                                   RTC_C_PS0CTL_RT0IP0             /*!< RT0IP Bit 0 */
N#define RT0IP1                                   RTC_C_PS0CTL_RT0IP1             /*!< RT0IP Bit 1 */
N#define RT0IP2                                   RTC_C_PS0CTL_RT0IP2             /*!< RT0IP Bit 2 */
N#define RT0IP_0                                  RTC_C_PS0CTL_RT0IP_0            /*!< Divide by 2 */
N#define RT0IP_1                                  RTC_C_PS0CTL_RT0IP_1            /*!< Divide by 4 */
N#define RT0IP_2                                  RTC_C_PS0CTL_RT0IP_2            /*!< Divide by 8 */
N#define RT0IP_3                                  RTC_C_PS0CTL_RT0IP_3            /*!< Divide by 16 */
N#define RT0IP_4                                  RTC_C_PS0CTL_RT0IP_4            /*!< Divide by 32 */
N#define RT0IP_5                                  RTC_C_PS0CTL_RT0IP_5            /*!< Divide by 64 */
N#define RT0IP_6                                  RTC_C_PS0CTL_RT0IP_6            /*!< Divide by 128 */
N#define RT0IP_7                                  RTC_C_PS0CTL_RT0IP_7            /*!< Divide by 256 */
N#define RT0IP__2                                 RTC_C_PS0CTL_RT0IP__2           /*!< Divide by 2 */
N#define RT0IP__4                                 RTC_C_PS0CTL_RT0IP__4           /*!< Divide by 4 */
N#define RT0IP__8                                 RTC_C_PS0CTL_RT0IP__8           /*!< Divide by 8 */
N#define RT0IP__16                                RTC_C_PS0CTL_RT0IP__16          /*!< Divide by 16 */
N#define RT0IP__32                                RTC_C_PS0CTL_RT0IP__32          /*!< Divide by 32 */
N#define RT0IP__64                                RTC_C_PS0CTL_RT0IP__64          /*!< Divide by 64 */
N#define RT0IP__128                               RTC_C_PS0CTL_RT0IP__128         /*!< Divide by 128 */
N#define RT0IP__256                               RTC_C_PS0CTL_RT0IP__256         /*!< Divide by 256 */
N/* RTCPS1CTL[RT1PSIFG] Bits */
N#define RT1PSIFG_OFS                             RTC_C_PS1CTL_RT1PSIFG_OFS       /*!< RT1PSIFG Offset */
N#define RT1PSIFG                                 RTC_C_PS1CTL_RT1PSIFG           /*!< Prescale timer 1 interrupt flag */
N/* RTCPS1CTL[RT1PSIE] Bits */
N#define RT1PSIE_OFS                              RTC_C_PS1CTL_RT1PSIE_OFS        /*!< RT1PSIE Offset */
N#define RT1PSIE                                  RTC_C_PS1CTL_RT1PSIE            /*!< Prescale timer 1 interrupt enable */
N/* RTCPS1CTL[RT1IP] Bits */
N#define RT1IP_OFS                                RTC_C_PS1CTL_RT1IP_OFS          /*!< RT1IP Offset */
N#define RT1IP_M                                  RTC_C_PS1CTL_RT1IP_MASK         /*!< Prescale timer 1 interrupt interval */
N#define RT1IP0                                   RTC_C_PS1CTL_RT1IP0             /*!< RT1IP Bit 0 */
N#define RT1IP1                                   RTC_C_PS1CTL_RT1IP1             /*!< RT1IP Bit 1 */
N#define RT1IP2                                   RTC_C_PS1CTL_RT1IP2             /*!< RT1IP Bit 2 */
N#define RT1IP_0                                  RTC_C_PS1CTL_RT1IP_0            /*!< Divide by 2 */
N#define RT1IP_1                                  RTC_C_PS1CTL_RT1IP_1            /*!< Divide by 4 */
N#define RT1IP_2                                  RTC_C_PS1CTL_RT1IP_2            /*!< Divide by 8 */
N#define RT1IP_3                                  RTC_C_PS1CTL_RT1IP_3            /*!< Divide by 16 */
N#define RT1IP_4                                  RTC_C_PS1CTL_RT1IP_4            /*!< Divide by 32 */
N#define RT1IP_5                                  RTC_C_PS1CTL_RT1IP_5            /*!< Divide by 64 */
N#define RT1IP_6                                  RTC_C_PS1CTL_RT1IP_6            /*!< Divide by 128 */
N#define RT1IP_7                                  RTC_C_PS1CTL_RT1IP_7            /*!< Divide by 256 */
N#define RT1IP__2                                 RTC_C_PS1CTL_RT1IP__2           /*!< Divide by 2 */
N#define RT1IP__4                                 RTC_C_PS1CTL_RT1IP__4           /*!< Divide by 4 */
N#define RT1IP__8                                 RTC_C_PS1CTL_RT1IP__8           /*!< Divide by 8 */
N#define RT1IP__16                                RTC_C_PS1CTL_RT1IP__16          /*!< Divide by 16 */
N#define RT1IP__32                                RTC_C_PS1CTL_RT1IP__32          /*!< Divide by 32 */
N#define RT1IP__64                                RTC_C_PS1CTL_RT1IP__64          /*!< Divide by 64 */
N#define RT1IP__128                               RTC_C_PS1CTL_RT1IP__128         /*!< Divide by 128 */
N#define RT1IP__256                               RTC_C_PS1CTL_RT1IP__256         /*!< Divide by 256 */
N/* RTCPS[RT0PS] Bits */
N#define RT0PS_OFS                                RTC_C_PS_RT0PS_OFS              /*!< RT0PS Offset */
N#define RT0PS_M                                  RTC_C_PS_RT0PS_MASK             /*!< Prescale timer 0 counter value */
N/* RTCPS[RT1PS] Bits */
N#define RT1PS_OFS                                RTC_C_PS_RT1PS_OFS              /*!< RT1PS Offset */
N#define RT1PS_M                                  RTC_C_PS_RT1PS_MASK             /*!< Prescale timer 1 counter value */
N/* RTCTIM0[SECONDS] Bits */
N#define SECONDS_OFS                              RTC_C_TIM0_SEC_OFS              /*!< Seconds Offset */
N#define SECONDS_M                                RTC_C_TIM0_SEC_MASK             /*!< Seconds (0 to 59) */
N/* RTCTIM0[MINUTES] Bits */
N#define MINUTES_OFS                              RTC_C_TIM0_MIN_OFS              /*!< Minutes Offset */
N#define MINUTES_M                                RTC_C_TIM0_MIN_MASK             /*!< Minutes (0 to 59) */
N/* RTCTIM0_BCD[SECONDSLOWDIGIT] Bits */
N#define SECONDSLOWDIGIT_OFS                      RTC_C_TIM0_SEC_LD_OFS           /*!< SecondsLowDigit Offset */
N#define SECONDSLOWDIGIT_M                        RTC_C_TIM0_SEC_LD_MASK          /*!< Seconds  low digit (0 to 9) */
N/* RTCTIM0_BCD[SECONDSHIGHDIGIT] Bits */
N#define SECONDSHIGHDIGIT_OFS                     RTC_C_TIM0_SEC_HD_OFS           /*!< SecondsHighDigit Offset */
N#define SECONDSHIGHDIGIT_M                       RTC_C_TIM0_SEC_HD_MASK          /*!< Seconds  high digit (0 to 5) */
N/* RTCTIM0_BCD[MINUTESLOWDIGIT] Bits */
N#define MINUTESLOWDIGIT_OFS                      RTC_C_TIM0_MIN_LD_OFS           /*!< MinutesLowDigit Offset */
N#define MINUTESLOWDIGIT_M                        RTC_C_TIM0_MIN_LD_MASK          /*!< Minutes  low digit (0 to 9) */
N/* RTCTIM0_BCD[MINUTESHIGHDIGIT] Bits */
N#define MINUTESHIGHDIGIT_OFS                     RTC_C_TIM0_MIN_HD_OFS           /*!< MinutesHighDigit Offset */
N#define MINUTESHIGHDIGIT_M                       RTC_C_TIM0_MIN_HD_MASK          /*!< Minutes  high digit (0 to 5) */
N/* RTCTIM1[HOURS] Bits */
N#define HOURS_OFS                                RTC_C_TIM1_HOUR_OFS             /*!< Hours Offset */
N#define HOURS_M                                  RTC_C_TIM1_HOUR_MASK            /*!< Hours (0 to 23) */
N/* RTCTIM1[DAYOFWEEK] Bits */
N#define DAYOFWEEK_OFS                            RTC_C_TIM1_DOW_OFS              /*!< DayofWeek Offset */
N#define DAYOFWEEK_M                              RTC_C_TIM1_DOW_MASK             /*!< Day of week (0 to 6) */
N/* RTCTIM1_BCD[HOURSLOWDIGIT] Bits */
N#define HOURSLOWDIGIT_OFS                        RTC_C_TIM1_HOUR_LD_OFS          /*!< HoursLowDigit Offset */
N#define HOURSLOWDIGIT_M                          RTC_C_TIM1_HOUR_LD_MASK         /*!< Hours  low digit (0 to 9) */
N/* RTCTIM1_BCD[HOURSHIGHDIGIT] Bits */
N#define HOURSHIGHDIGIT_OFS                       RTC_C_TIM1_HOUR_HD_OFS          /*!< HoursHighDigit Offset */
N#define HOURSHIGHDIGIT_M                         RTC_C_TIM1_HOUR_HD_MASK         /*!< Hours  high digit (0 to 2) */
N/* RTCTIM1_BCD[DAYOFWEEK] Bits */
N//#define DAYOFWEEK_OFS                            RTC_C_TIM1_DOW_OFS              /*!< DayofWeek Offset */
N//#define DAYOFWEEK_M                              RTC_C_TIM1_DOW_MASK             /*!< Day of week (0 to 6) */
N/* RTCDATE[DAY] Bits */
N#define DAY_OFS                                  RTC_C_DATE_DAY_OFS              /*!< Day Offset */
N#define DAY_M                                    RTC_C_DATE_DAY_MASK             /*!< Day of month (1 to 28, 29, 30, 31) */
N/* RTCDATE[MONTH] Bits */
N#define MONTH_OFS                                RTC_C_DATE_MON_OFS              /*!< Month Offset */
N#define MONTH_M                                  RTC_C_DATE_MON_MASK             /*!< Month (1 to 12) */
N/* RTCDATE_BCD[DAYLOWDIGIT] Bits */
N#define DAYLOWDIGIT_OFS                          RTC_C_DATE_DAY_LD_OFS           /*!< DayLowDigit Offset */
N#define DAYLOWDIGIT_M                            RTC_C_DATE_DAY_LD_MASK          /*!< Day of month  low digit (0 to 9) */
N/* RTCDATE_BCD[DAYHIGHDIGIT] Bits */
N#define DAYHIGHDIGIT_OFS                         RTC_C_DATE_DAY_HD_OFS           /*!< DayHighDigit Offset */
N#define DAYHIGHDIGIT_M                           RTC_C_DATE_DAY_HD_MASK          /*!< Day of month  high digit (0 to 3) */
N/* RTCDATE_BCD[MONTHLOWDIGIT] Bits */
N#define MONTHLOWDIGIT_OFS                        RTC_C_DATE_MON_LD_OFS           /*!< MonthLowDigit Offset */
N#define MONTHLOWDIGIT_M                          RTC_C_DATE_MON_LD_MASK          /*!< Month  low digit (0 to 9) */
N/* RTCDATE_BCD[MONTHHIGHDIGIT] Bits */
N#define MONTHHIGHDIGIT_OFS                       RTC_C_DATE_MON_HD_OFS           /*!< MonthHighDigit Offset */
N#define MONTHHIGHDIGIT                           RTC_C_DATE_MON_HD               /*!< Month  high digit (0 or 1) */
N/* RTCYEAR[YEARLOWBYTE] Bits */
N#define YEARLOWBYTE_OFS                          RTC_C_YEAR_YEAR_LB_OFS          /*!< YearLowByte Offset */
N#define YEARLOWBYTE_M                            RTC_C_YEAR_YEAR_LB_MASK         /*!< Year  low byte. Valid values for Year are 0 to 4095. */
N/* RTCYEAR[YEARHIGHBYTE] Bits */
N#define YEARHIGHBYTE_OFS                         RTC_C_YEAR_YEAR_HB_OFS          /*!< YearHighByte Offset */
N#define YEARHIGHBYTE_M                           RTC_C_YEAR_YEAR_HB_MASK         /*!< Year  high byte. Valid values for Year are 0 to 4095. */
N/* RTCYEAR_BCD[YEAR] Bits */
N#define YEAR_OFS                                 RTC_C_YEAR_YEAR_OFS             /*!< Year Offset */
N#define YEAR_M                                   RTC_C_YEAR_YEAR_MASK            /*!< Year  lowest digit (0 to 9) */
N/* RTCYEAR_BCD[DECADE] Bits */
N#define DECADE_OFS                               RTC_C_YEAR_DEC_OFS              /*!< Decade Offset */
N#define DECADE_M                                 RTC_C_YEAR_DEC_MASK             /*!< Decade (0 to 9) */
N/* RTCYEAR_BCD[CENTURYLOWDIGIT] Bits */
N#define CENTURYLOWDIGIT_OFS                      RTC_C_YEAR_CENT_LD_OFS          /*!< CenturyLowDigit Offset */
N#define CENTURYLOWDIGIT_M                        RTC_C_YEAR_CENT_LD_MASK         /*!< Century  low digit (0 to 9) */
N/* RTCYEAR_BCD[CENTURYHIGHDIGIT] Bits */
N#define CENTURYHIGHDIGIT_OFS                     RTC_C_YEAR_CENT_HD_OFS          /*!< CenturyHighDigit Offset */
N#define CENTURYHIGHDIGIT_M                       RTC_C_YEAR_CENT_HD_MASK         /*!< Century  high digit (0 to 4) */
N/* RTCAMINHR[MINUTES] Bits */
N//#define MINUTES_OFS                              RTC_C_AMINHR_MIN_OFS            /*!< Minutes Offset */
N//#define MINUTES_M                                RTC_C_AMINHR_MIN_MASK           /*!< Minutes (0 to 59) */
N/* RTCAMINHR[MINAE] Bits */
N#define MINAE_OFS                                RTC_C_AMINHR_MINAE_OFS          /*!< MINAE Offset */
N#define MINAE                                    RTC_C_AMINHR_MINAE              /*!< Alarm enable */
N/* RTCAMINHR[HOURS] Bits */
N//#define HOURS_OFS                                RTC_C_AMINHR_HOUR_OFS           /*!< Hours Offset */
N//#define HOURS_M                                  RTC_C_AMINHR_HOUR_MASK          /*!< Hours (0 to 23) */
N/* RTCAMINHR[HOURAE] Bits */
N#define HOURAE_OFS                               RTC_C_AMINHR_HOURAE_OFS         /*!< HOURAE Offset */
N#define HOURAE                                   RTC_C_AMINHR_HOURAE             /*!< Alarm enable */
N/* RTCAMINHR_BCD[MINUTESLOWDIGIT] Bits */
N//#define MINUTESLOWDIGIT_OFS                      RTC_C_AMINHR_MIN_LD_OFS         /*!< MinutesLowDigit Offset */
N//#define MINUTESLOWDIGIT_M                        RTC_C_AMINHR_MIN_LD_MASK        /*!< Minutes  low digit (0 to 9) */
N/* RTCAMINHR_BCD[MINUTESHIGHDIGIT] Bits */
N//#define MINUTESHIGHDIGIT_OFS                     RTC_C_AMINHR_MIN_HD_OFS         /*!< MinutesHighDigit Offset */
N//#define MINUTESHIGHDIGIT_M                       RTC_C_AMINHR_MIN_HD_MASK        /*!< Minutes  high digit (0 to 5) */
N/* RTCAMINHR_BCD[MINAE] Bits */
N//#define MINAE_OFS                                RTC_C_AMINHR_MINAE_OFS          /*!< MINAE Offset */
N//#define MINAE                                    RTC_C_AMINHR_MINAE              /*!< Alarm enable */
N/* RTCAMINHR_BCD[HOURSLOWDIGIT] Bits */
N//#define HOURSLOWDIGIT_OFS                        RTC_C_AMINHR_HOUR_LD_OFS        /*!< HoursLowDigit Offset */
N//#define HOURSLOWDIGIT_M                          RTC_C_AMINHR_HOUR_LD_MASK       /*!< Hours  low digit (0 to 9) */
N/* RTCAMINHR_BCD[HOURSHIGHDIGIT] Bits */
N//#define HOURSHIGHDIGIT_OFS                       RTC_C_AMINHR_HOUR_HD_OFS        /*!< HoursHighDigit Offset */
N//#define HOURSHIGHDIGIT_M                         RTC_C_AMINHR_HOUR_HD_MASK       /*!< Hours  high digit (0 to 2) */
N/* RTCAMINHR_BCD[HOURAE] Bits */
N//#define HOURAE_OFS                               RTC_C_AMINHR_HOURAE_OFS         /*!< HOURAE Offset */
N//#define HOURAE                                   RTC_C_AMINHR_HOURAE             /*!< Alarm enable */
N/* RTCADOWDAY[DAYOFWEEK] Bits */
N//#define DAYOFWEEK_OFS                            RTC_C_ADOWDAY_DOW_OFS           /*!< DayofWeek Offset */
N//#define DAYOFWEEK_M                              RTC_C_ADOWDAY_DOW_MASK          /*!< Day of week (0 to 6) */
N/* RTCADOWDAY[DOWAE] Bits */
N#define DOWAE_OFS                                RTC_C_ADOWDAY_DOWAE_OFS         /*!< DOWAE Offset */
N#define DOWAE                                    RTC_C_ADOWDAY_DOWAE             /*!< Alarm enable */
N/* RTCADOWDAY[DAYOFMONTH] Bits */
N#define DAYOFMONTH_OFS                           RTC_C_ADOWDAY_DAY_OFS           /*!< DayofMonth Offset */
N#define DAYOFMONTH_M                             RTC_C_ADOWDAY_DAY_MASK          /*!< Day of month (1 to 28, 29, 30, 31) */
N/* RTCADOWDAY[DAYAE] Bits */
N#define DAYAE_OFS                                RTC_C_ADOWDAY_DAYAE_OFS         /*!< DAYAE Offset */
N#define DAYAE                                    RTC_C_ADOWDAY_DAYAE             /*!< Alarm enable */
N/* RTCADOWDAY_BCD[DAYOFWEEK] Bits */
N//#define DAYOFWEEK_OFS                            RTC_C_ADOWDAY_DOW_OFS           /*!< DayofWeek Offset */
N//#define DAYOFWEEK_M                              RTC_C_ADOWDAY_DOW_MASK          /*!< Day of week (0 to 6) */
N/* RTCADOWDAY_BCD[DOWAE] Bits */
N//#define DOWAE_OFS                                RTC_C_ADOWDAY_DOWAE_OFS         /*!< DOWAE Offset */
N//#define DOWAE                                    RTC_C_ADOWDAY_DOWAE             /*!< Alarm enable */
N/* RTCADOWDAY_BCD[DAYLOWDIGIT] Bits */
N//#define DAYLOWDIGIT_OFS                          RTC_C_ADOWDAY_DAY_LD_OFS        /*!< DayLowDigit Offset */
N//#define DAYLOWDIGIT_M                            RTC_C_ADOWDAY_DAY_LD_MASK       /*!< Day of month  low digit (0 to 9) */
N/* RTCADOWDAY_BCD[DAYHIGHDIGIT] Bits */
N//#define DAYHIGHDIGIT_OFS                         RTC_C_ADOWDAY_DAY_HD_OFS        /*!< DayHighDigit Offset */
N//#define DAYHIGHDIGIT_M                           RTC_C_ADOWDAY_DAY_HD_MASK       /*!< Day of month  high digit (0 to 3) */
N/* RTCADOWDAY_BCD[DAYAE] Bits */
N//#define DAYAE_OFS                                RTC_C_ADOWDAY_DAYAE_OFS         /*!< DAYAE Offset */
N//#define DAYAE                                    RTC_C_ADOWDAY_DAYAE             /*!< Alarm enable */
N/* Pre-defined bitfield values */
N#define RTCKEY                                             RTC_C_KEY              /*!< RTC_C Key Value for RTC_C write access */
N#define RTCKEY_H                                           RTC_C_KEY_H            /*!< RTC_C Key Value for RTC_C write access */
N#define RTCKEY_VAL                                         RTC_C_KEY_VAL          /*!< RTC_C Key Value for RTC_C write access */
N
N
N/******************************************************************************
N* TIMER_A Bits (legacy section)
N******************************************************************************/
N/* TA0CTL[TAIFG] Bits */
N#define TAIFG_OFS                                TIMER_A_CTL_IFG_OFS             /*!< TAIFG Offset */
N#define TAIFG                                    TIMER_A_CTL_IFG                 /*!< TimerA interrupt flag */
N/* TA0CTL[TAIE] Bits */
N#define TAIE_OFS                                 TIMER_A_CTL_IE_OFS              /*!< TAIE Offset */
N#define TAIE                                     TIMER_A_CTL_IE                  /*!< TimerA interrupt enable */
N/* TA0CTL[TACLR] Bits */
N#define TACLR_OFS                                TIMER_A_CTL_CLR_OFS             /*!< TACLR Offset */
N#define TACLR                                    TIMER_A_CTL_CLR                 /*!< TimerA clear */
N/* TA0CTL[MC] Bits */
N#define MC_OFS                                   TIMER_A_CTL_MC_OFS              /*!< MC Offset */
N#define MC_M                                     TIMER_A_CTL_MC_MASK             /*!< Mode control */
N#define MC0                                      TIMER_A_CTL_MC0                 /*!< MC Bit 0 */
N#define MC1                                      TIMER_A_CTL_MC1                 /*!< MC Bit 1 */
N#define MC_0                                     TIMER_A_CTL_MC_0                /*!< Stop mode: Timer is halted */
N#define MC_1                                     TIMER_A_CTL_MC_1                /*!< Up mode: Timer counts up to TAxCCR0 */
N#define MC_2                                     TIMER_A_CTL_MC_2                /*!< Continuous mode: Timer counts up to 0FFFFh */
N#define MC_3                                     TIMER_A_CTL_MC_3                /*!< Up/down mode: Timer counts up to TAxCCR0 then down to 0000h */
N#define MC__STOP                                 TIMER_A_CTL_MC__STOP            /*!< Stop mode: Timer is halted */
N#define MC__UP                                   TIMER_A_CTL_MC__UP              /*!< Up mode: Timer counts up to TAxCCR0 */
N#define MC__CONTINUOUS                           TIMER_A_CTL_MC__CONTINUOUS      /*!< Continuous mode: Timer counts up to 0FFFFh */
N#define MC__UPDOWN                               TIMER_A_CTL_MC__UPDOWN          /*!< Up/down mode: Timer counts up to TAxCCR0 then down to 0000h */
N/* TA0CTL[ID] Bits */
N#define ID_OFS                                   TIMER_A_CTL_ID_OFS              /*!< ID Offset */
N#define ID_M                                     TIMER_A_CTL_ID_MASK             /*!< Input divider */
N#define ID0                                      TIMER_A_CTL_ID0                 /*!< ID Bit 0 */
N#define ID1                                      TIMER_A_CTL_ID1                 /*!< ID Bit 1 */
N#define ID_0                                     TIMER_A_CTL_ID_0                /*!< /1 */
N#define ID_1                                     TIMER_A_CTL_ID_1                /*!< /2 */
N#define ID_2                                     TIMER_A_CTL_ID_2                /*!< /4 */
N#define ID_3                                     TIMER_A_CTL_ID_3                /*!< /8 */
N#define ID__1                                    TIMER_A_CTL_ID__1               /*!< /1 */
N#define ID__2                                    TIMER_A_CTL_ID__2               /*!< /2 */
N#define ID__4                                    TIMER_A_CTL_ID__4               /*!< /4 */
N#define ID__8                                    TIMER_A_CTL_ID__8               /*!< /8 */
N/* TA0CTL[TASSEL] Bits */
N#define TASSEL_OFS                               TIMER_A_CTL_SSEL_OFS            /*!< TASSEL Offset */
N#define TASSEL_M                                 TIMER_A_CTL_SSEL_MASK           /*!< TimerA clock source select */
N#define TASSEL0                                  TIMER_A_CTL_SSEL0               /*!< TASSEL Bit 0 */
N#define TASSEL1                                  TIMER_A_CTL_SSEL1               /*!< TASSEL Bit 1 */
N#define TASSEL_0                                 TIMER_A_CTL_TASSEL_0            /*!< TAxCLK */
N#define TASSEL_1                                 TIMER_A_CTL_TASSEL_1            /*!< ACLK */
N#define TASSEL_2                                 TIMER_A_CTL_TASSEL_2            /*!< SMCLK */
N#define TASSEL_3                                 TIMER_A_CTL_TASSEL_3            /*!< INCLK */
N#define TASSEL__TACLK                            TIMER_A_CTL_SSEL__TACLK         /*!< TAxCLK */
N#define TASSEL__ACLK                             TIMER_A_CTL_SSEL__ACLK          /*!< ACLK */
N#define TASSEL__SMCLK                            TIMER_A_CTL_SSEL__SMCLK         /*!< SMCLK */
N#define TASSEL__INCLK                            TIMER_A_CTL_SSEL__INCLK         /*!< INCLK */
N/* TA0CCTLn[CCIFG] Bits */
N#define CCIFG_OFS                                TIMER_A_CCTLN_CCIFG_OFS         /*!< CCIFG Offset */
N#define CCIFG                                    TIMER_A_CCTLN_CCIFG             /*!< Capture/compare interrupt flag */
N/* TA0CCTLn[COV] Bits */
N#define COV_OFS                                  TIMER_A_CCTLN_COV_OFS           /*!< COV Offset */
N#define COV                                      TIMER_A_CCTLN_COV               /*!< Capture overflow */
N/* TA0CCTLn[OUT] Bits */
N#define OUT_OFS                                  TIMER_A_CCTLN_OUT_OFS           /*!< OUT Offset */
N//#define OUT                                      TIMER_A_CCTLN_OUT               /*!< Output */
N/* TA0CCTLn[CCI] Bits */
N#define CCI_OFS                                  TIMER_A_CCTLN_CCI_OFS           /*!< CCI Offset */
N#define CCI                                      TIMER_A_CCTLN_CCI               /*!< Capture/compare input */
N/* TA0CCTLn[CCIE] Bits */
N#define CCIE_OFS                                 TIMER_A_CCTLN_CCIE_OFS          /*!< CCIE Offset */
N#define CCIE                                     TIMER_A_CCTLN_CCIE              /*!< Capture/compare interrupt enable */
N/* TA0CCTLn[OUTMOD] Bits */
N#define OUTMOD_OFS                               TIMER_A_CCTLN_OUTMOD_OFS        /*!< OUTMOD Offset */
N#define OUTMOD_M                                 TIMER_A_CCTLN_OUTMOD_MASK       /*!< Output mode */
N#define OUTMOD0                                  TIMER_A_CCTLN_OUTMOD0           /*!< OUTMOD Bit 0 */
N#define OUTMOD1                                  TIMER_A_CCTLN_OUTMOD1           /*!< OUTMOD Bit 1 */
N#define OUTMOD2                                  TIMER_A_CCTLN_OUTMOD2           /*!< OUTMOD Bit 2 */
N#define OUTMOD_0                                 TIMER_A_CCTLN_OUTMOD_0          /*!< OUT bit value */
N#define OUTMOD_1                                 TIMER_A_CCTLN_OUTMOD_1          /*!< Set */
N#define OUTMOD_2                                 TIMER_A_CCTLN_OUTMOD_2          /*!< Toggle/reset */
N#define OUTMOD_3                                 TIMER_A_CCTLN_OUTMOD_3          /*!< Set/reset */
N#define OUTMOD_4                                 TIMER_A_CCTLN_OUTMOD_4          /*!< Toggle */
N#define OUTMOD_5                                 TIMER_A_CCTLN_OUTMOD_5          /*!< Reset */
N#define OUTMOD_6                                 TIMER_A_CCTLN_OUTMOD_6          /*!< Toggle/set */
N#define OUTMOD_7                                 TIMER_A_CCTLN_OUTMOD_7          /*!< Reset/set */
N/* TA0CCTLn[CAP] Bits */
N#define CAP_OFS                                  TIMER_A_CCTLN_CAP_OFS           /*!< CAP Offset */
N#define CAP                                      TIMER_A_CCTLN_CAP               /*!< Capture mode */
N/* TA0CCTLn[SCCI] Bits */
N#define SCCI_OFS                                 TIMER_A_CCTLN_SCCI_OFS          /*!< SCCI Offset */
N#define SCCI                                     TIMER_A_CCTLN_SCCI              /*!< Synchronized capture/compare input */
N/* TA0CCTLn[SCS] Bits */
N#define SCS_OFS                                  TIMER_A_CCTLN_SCS_OFS           /*!< SCS Offset */
N#define SCS                                      TIMER_A_CCTLN_SCS               /*!< Synchronize capture source */
N/* TA0CCTLn[CCIS] Bits */
N#define CCIS_OFS                                 TIMER_A_CCTLN_CCIS_OFS          /*!< CCIS Offset */
N#define CCIS_M                                   TIMER_A_CCTLN_CCIS_MASK         /*!< Capture/compare input select */
N#define CCIS0                                    TIMER_A_CCTLN_CCIS0             /*!< CCIS Bit 0 */
N#define CCIS1                                    TIMER_A_CCTLN_CCIS1             /*!< CCIS Bit 1 */
N#define CCIS_0                                   TIMER_A_CCTLN_CCIS_0            /*!< CCIxA */
N#define CCIS_1                                   TIMER_A_CCTLN_CCIS_1            /*!< CCIxB */
N#define CCIS_2                                   TIMER_A_CCTLN_CCIS_2            /*!< GND */
N#define CCIS_3                                   TIMER_A_CCTLN_CCIS_3            /*!< VCC */
N#define CCIS__CCIA                               TIMER_A_CCTLN_CCIS__CCIA        /*!< CCIxA */
N#define CCIS__CCIB                               TIMER_A_CCTLN_CCIS__CCIB        /*!< CCIxB */
N#define CCIS__GND                                TIMER_A_CCTLN_CCIS__GND         /*!< GND */
N#define CCIS__VCC                                TIMER_A_CCTLN_CCIS__VCC         /*!< VCC */
N/* TA0CCTLn[CM] Bits */
N#define CM_OFS                                   TIMER_A_CCTLN_CM_OFS            /*!< CM Offset */
N#define CM_M                                     TIMER_A_CCTLN_CM_MASK           /*!< Capture mode */
N#define CM0                                      TIMER_A_CCTLN_CM0               /*!< CM Bit 0 */
N#define CM1                                      TIMER_A_CCTLN_CM1               /*!< CM Bit 1 */
N#define CM_0                                     TIMER_A_CCTLN_CM_0              /*!< No capture */
N#define CM_1                                     TIMER_A_CCTLN_CM_1              /*!< Capture on rising edge */
N#define CM_2                                     TIMER_A_CCTLN_CM_2              /*!< Capture on falling edge */
N#define CM_3                                     TIMER_A_CCTLN_CM_3              /*!< Capture on both rising and falling edges */
N#define CM__NONE                                 TIMER_A_CCTLN_CM__NONE          /*!< No capture */
N#define CM__RISING                               TIMER_A_CCTLN_CM__RISING        /*!< Capture on rising edge */
N#define CM__FALLING                              TIMER_A_CCTLN_CM__FALLING       /*!< Capture on falling edge */
N#define CM__BOTH                                 TIMER_A_CCTLN_CM__BOTH          /*!< Capture on both rising and falling edges */
N/* TA0EX0[TAIDEX] Bits */
N#define TAIDEX_OFS                               TIMER_A_EX0_IDEX_OFS            /*!< TAIDEX Offset */
N#define TAIDEX_M                                 TIMER_A_EX0_IDEX_MASK           /*!< Input divider expansion */
N#define TAIDEX0                                  TIMER_A_EX0_IDEX0               /*!< TAIDEX Bit 0 */
N#define TAIDEX1                                  TIMER_A_EX0_IDEX1               /*!< TAIDEX Bit 1 */
N#define TAIDEX2                                  TIMER_A_EX0_IDEX2               /*!< TAIDEX Bit 2 */
N#define TAIDEX_0                                 TIMER_A_EX0_TAIDEX_0            /*!< Divide by 1 */
N#define TAIDEX_1                                 TIMER_A_EX0_TAIDEX_1            /*!< Divide by 2 */
N#define TAIDEX_2                                 TIMER_A_EX0_TAIDEX_2            /*!< Divide by 3 */
N#define TAIDEX_3                                 TIMER_A_EX0_TAIDEX_3            /*!< Divide by 4 */
N#define TAIDEX_4                                 TIMER_A_EX0_TAIDEX_4            /*!< Divide by 5 */
N#define TAIDEX_5                                 TIMER_A_EX0_TAIDEX_5            /*!< Divide by 6 */
N#define TAIDEX_6                                 TIMER_A_EX0_TAIDEX_6            /*!< Divide by 7 */
N#define TAIDEX_7                                 TIMER_A_EX0_TAIDEX_7            /*!< Divide by 8 */
N#define TAIDEX__1                                TIMER_A_EX0_IDEX__1             /*!< Divide by 1 */
N#define TAIDEX__2                                TIMER_A_EX0_IDEX__2             /*!< Divide by 2 */
N#define TAIDEX__3                                TIMER_A_EX0_IDEX__3             /*!< Divide by 3 */
N#define TAIDEX__4                                TIMER_A_EX0_IDEX__4             /*!< Divide by 4 */
N#define TAIDEX__5                                TIMER_A_EX0_IDEX__5             /*!< Divide by 5 */
N#define TAIDEX__6                                TIMER_A_EX0_IDEX__6             /*!< Divide by 6 */
N#define TAIDEX__7                                TIMER_A_EX0_IDEX__7             /*!< Divide by 7 */
N#define TAIDEX__8                                TIMER_A_EX0_IDEX__8             /*!< Divide by 8 */
N
N/******************************************************************************
N* WDT_A Bits (legacy section)
N******************************************************************************/
N/* WDTCTL[WDTIS] Bits */
N#define WDTIS_OFS                                WDT_A_CTL_IS_OFS                /*!< WDTIS Offset */
N#define WDTIS_M                                  WDT_A_CTL_IS_MASK               /*!< Watchdog timer interval select */
N#define WDTIS0                                   WDT_A_CTL_IS0                   /*!< WDTIS Bit 0 */
N#define WDTIS1                                   WDT_A_CTL_IS1                   /*!< WDTIS Bit 1 */
N#define WDTIS2                                   WDT_A_CTL_IS2                   /*!< WDTIS Bit 2 */
N#define WDTIS_0                                  WDT_A_CTL_IS_0                  /*!< Watchdog clock source / (2^(31)) (18:12:16 at 32.768 kHz) */
N#define WDTIS_1                                  WDT_A_CTL_IS_1                  /*!< Watchdog clock source /(2^(27)) (01:08:16 at 32.768 kHz) */
N#define WDTIS_2                                  WDT_A_CTL_IS_2                  /*!< Watchdog clock source /(2^(23)) (00:04:16 at 32.768 kHz) */
N#define WDTIS_3                                  WDT_A_CTL_IS_3                  /*!< Watchdog clock source /(2^(19)) (00:00:16 at 32.768 kHz) */
N#define WDTIS_4                                  WDT_A_CTL_IS_4                  /*!< Watchdog clock source /(2^(15)) (1 s at 32.768 kHz) */
N#define WDTIS_5                                  WDT_A_CTL_IS_5                  /*!< Watchdog clock source / (2^(13)) (250 ms at 32.768 kHz) */
N#define WDTIS_6                                  WDT_A_CTL_IS_6                  /*!< Watchdog clock source / (2^(9)) (15.625 ms at 32.768 kHz) */
N#define WDTIS_7                                  WDT_A_CTL_IS_7                  /*!< Watchdog clock source / (2^(6)) (1.95 ms at 32.768 kHz) */
N/* WDTCTL[WDTCNTCL] Bits */
N#define WDTCNTCL_OFS                             WDT_A_CTL_CNTCL_OFS             /*!< WDTCNTCL Offset */
N#define WDTCNTCL                                 WDT_A_CTL_CNTCL                 /*!< Watchdog timer counter clear */
N/* WDTCTL[WDTTMSEL] Bits */
N#define WDTTMSEL_OFS                             WDT_A_CTL_TMSEL_OFS             /*!< WDTTMSEL Offset */
N#define WDTTMSEL                                 WDT_A_CTL_TMSEL                 /*!< Watchdog timer mode select */
N/* WDTCTL[WDTSSEL] Bits */
N#define WDTSSEL_OFS                              WDT_A_CTL_SSEL_OFS              /*!< WDTSSEL Offset */
N#define WDTSSEL_M                                WDT_A_CTL_SSEL_MASK             /*!< Watchdog timer clock source select */
N#define WDTSSEL0                                 WDT_A_CTL_SSEL0                 /*!< WDTSSEL Bit 0 */
N#define WDTSSEL1                                 WDT_A_CTL_SSEL1                 /*!< WDTSSEL Bit 1 */
N#define WDTSSEL_0                                WDT_A_CTL_SSEL_0                /*!< SMCLK */
N#define WDTSSEL_1                                WDT_A_CTL_SSEL_1                /*!< ACLK */
N#define WDTSSEL_2                                WDT_A_CTL_SSEL_2                /*!< VLOCLK */
N#define WDTSSEL_3                                WDT_A_CTL_SSEL_3                /*!< BCLK */
N#define WDTSSEL__SMCLK                           WDT_A_CTL_SSEL__SMCLK           /*!< SMCLK */
N#define WDTSSEL__ACLK                            WDT_A_CTL_SSEL__ACLK            /*!< ACLK */
N#define WDTSSEL__VLOCLK                          WDT_A_CTL_SSEL__VLOCLK          /*!< VLOCLK */
N#define WDTSSEL__BCLK                            WDT_A_CTL_SSEL__BCLK            /*!< BCLK */
N/* WDTCTL[WDTHOLD] Bits */
N#define WDTHOLD_OFS                              WDT_A_CTL_HOLD_OFS              /*!< WDTHOLD Offset */
N#define WDTHOLD                                  WDT_A_CTL_HOLD                  /*!< Watchdog timer hold */
N/* WDTCTL[WDTPW] Bits */
N#define WDTPW_OFS                                WDT_A_CTL_PW_OFS                /*!< WDTPW Offset */
N#define WDTPW_M                                  WDT_A_CTL_PW_MASK               /*!< Watchdog timer password */
N/* Pre-defined bitfield values */
N#define WDTPW                                          WDT_A_CTL_PW              /*!< WDT Key Value for WDT write access */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MSP432P401R_CLASSIC_H__ */
L 75 "C:\ti\ccs930\ccs\ccs_base\arm\include\msp432p401r.h" 2
N#endif
N
N
N#ifndef __CMSIS_CONFIG__
N#define __CMSIS_CONFIG__
N
N/** @addtogroup MSP432P401R_Definitions MSP432P401R Definitions
N  This file defines all structures and symbols for MSP432P401R:
N    - components and registers
N    - peripheral base address
N    - peripheral ID
N    - Peripheral definitions
N  @{
N*/
N
N/******************************************************************************
N*                Processor and Core Peripherals                               *
N******************************************************************************/
N/** @addtogroup MSP432P401R_CMSIS Device CMSIS Definitions
N  Configuration of the Cortex-M4 Processor and Core Peripherals
N  @{
N*/
N
N/******************************************************************************
N* CMSIS-compatible Interrupt Number Definition                                *
N******************************************************************************/
Ntypedef enum IRQn
N{
N  /* Cortex-M4 Processor Exceptions Numbers */
N  NonMaskableInt_IRQn         = -14,    /*  2 Non Maskable Interrupt */
N  HardFault_IRQn              = -13,    /*  3 Hard Fault Interrupt */
N  MemoryManagement_IRQn       = -12,    /*  4 Memory Management Interrupt */
N  BusFault_IRQn               = -11,    /*  5 Bus Fault Interrupt */
N  UsageFault_IRQn             = -10,    /*  6 Usage Fault Interrupt */
N  SVCall_IRQn                 = -5,     /* 11 SV Call Interrupt */
N  DebugMonitor_IRQn           = -4,     /* 12 Debug Monitor Interrupt */
N  PendSV_IRQn                 = -2,     /* 14 Pend SV Interrupt */
N  SysTick_IRQn                = -1,     /* 15 System Tick Interrupt */
N  /*  Peripheral Exceptions Numbers */
N  PSS_IRQn                    = 0,     /* 16 PSS Interrupt             */
N  CS_IRQn                     = 1,     /* 17 CS Interrupt              */
N  PCM_IRQn                    = 2,     /* 18 PCM Interrupt             */
N  WDT_A_IRQn                  = 3,     /* 19 WDT_A Interrupt           */
N  FPU_IRQn                    = 4,     /* 20 FPU Interrupt             */
N  FLCTL_IRQn                  = 5,     /* 21 Flash Controller Interrupt*/
N  COMP_E0_IRQn                = 6,     /* 22 COMP_E0 Interrupt         */
N  COMP_E1_IRQn                = 7,     /* 23 COMP_E1 Interrupt         */
N  TA0_0_IRQn                  = 8,     /* 24 TA0_0 Interrupt           */
N  TA0_N_IRQn                  = 9,     /* 25 TA0_N Interrupt           */
N  TA1_0_IRQn                  = 10,     /* 26 TA1_0 Interrupt           */
N  TA1_N_IRQn                  = 11,     /* 27 TA1_N Interrupt           */
N  TA2_0_IRQn                  = 12,     /* 28 TA2_0 Interrupt           */
N  TA2_N_IRQn                  = 13,     /* 29 TA2_N Interrupt           */
N  TA3_0_IRQn                  = 14,     /* 30 TA3_0 Interrupt           */
N  TA3_N_IRQn                  = 15,     /* 31 TA3_N Interrupt           */
N  EUSCIA0_IRQn                = 16,     /* 32 EUSCIA0 Interrupt         */
N  EUSCIA1_IRQn                = 17,     /* 33 EUSCIA1 Interrupt         */
N  EUSCIA2_IRQn                = 18,     /* 34 EUSCIA2 Interrupt         */
N  EUSCIA3_IRQn                = 19,     /* 35 EUSCIA3 Interrupt         */
N  EUSCIB0_IRQn                = 20,     /* 36 EUSCIB0 Interrupt         */
N  EUSCIB1_IRQn                = 21,     /* 37 EUSCIB1 Interrupt         */
N  EUSCIB2_IRQn                = 22,     /* 38 EUSCIB2 Interrupt         */
N  EUSCIB3_IRQn                = 23,     /* 39 EUSCIB3 Interrupt         */
N  ADC14_IRQn                  = 24,     /* 40 ADC14 Interrupt           */
N  T32_INT1_IRQn               = 25,     /* 41 T32_INT1 Interrupt        */
N  T32_INT2_IRQn               = 26,     /* 42 T32_INT2 Interrupt        */
N  T32_INTC_IRQn               = 27,     /* 43 T32_INTC Interrupt        */
N  AES256_IRQn                 = 28,     /* 44 AES256 Interrupt          */
N  RTC_C_IRQn                  = 29,     /* 45 RTC_C Interrupt           */
N  DMA_ERR_IRQn                = 30,     /* 46 DMA_ERR Interrupt         */
N  DMA_INT3_IRQn               = 31,     /* 47 DMA_INT3 Interrupt        */
N  DMA_INT2_IRQn               = 32,     /* 48 DMA_INT2 Interrupt        */
N  DMA_INT1_IRQn               = 33,     /* 49 DMA_INT1 Interrupt        */
N  DMA_INT0_IRQn               = 34,     /* 50 DMA_INT0 Interrupt        */
N  PORT1_IRQn                  = 35,     /* 51 Port1 Interrupt           */
N  PORT2_IRQn                  = 36,     /* 52 Port2 Interrupt           */
N  PORT3_IRQn                  = 37,     /* 53 Port3 Interrupt           */
N  PORT4_IRQn                  = 38,     /* 54 Port4 Interrupt           */
N  PORT5_IRQn                  = 39,     /* 55 Port5 Interrupt           */
N  PORT6_IRQn                  = 40      /* 56 Port6 Interrupt           */
N} IRQn_Type;
N
N/******************************************************************************
N* Processor and Core Peripheral Section                                       *
N******************************************************************************/
N#define __CM4_REV               0x0001    /* Core revision r0p1 */
N#define __MPU_PRESENT           1         /* MPU present or not */
N#define __NVIC_PRIO_BITS        3         /* Number of Bits used for Prio Levels */
N#define __Vendor_SysTickConfig  0         /* Set to 1 if different SysTick Config is used */
N#define __FPU_PRESENT           1         /* FPU present or not */
N
N/******************************************************************************
N* Available Peripherals                                                       *
N******************************************************************************/
N#define __MCU_HAS_ADC14__                                                        /*!< Module ADC14 is available */
N#define __MCU_HAS_AES256__                                                       /*!< Module AES256 is available */
N#define __MCU_HAS_CAPTIO0__                                                      /*!< Module CAPTIO0 is available */
N#define __MCU_HAS_CAPTIO1__                                                      /*!< Module CAPTIO1 is available */
N#define __MCU_HAS_COMP_E0__                                                      /*!< Module COMP_E0 is available */
N#define __MCU_HAS_COMP_E1__                                                      /*!< Module COMP_E1 is available */
N#define __MCU_HAS_CRC32__                                                        /*!< Module CRC32 is available */
N#define __MCU_HAS_CS__                                                           /*!< Module CS is available */
N#define __MCU_HAS_DIO__                                                          /*!< Module DIO is available */
N#define __MCU_HAS_DMA__                                                          /*!< Module DMA is available */
N#define __MCU_HAS_EUSCI_A0__                                                     /*!< Module EUSCI_A0 is available */
N#define __MCU_HAS_EUSCI_A1__                                                     /*!< Module EUSCI_A1 is available */
N#define __MCU_HAS_EUSCI_A2__                                                     /*!< Module EUSCI_A2 is available */
N#define __MCU_HAS_EUSCI_A3__                                                     /*!< Module EUSCI_A3 is available */
N#define __MCU_HAS_EUSCI_B0__                                                     /*!< Module EUSCI_B0 is available */
N#define __MCU_HAS_EUSCI_B1__                                                     /*!< Module EUSCI_B1 is available */
N#define __MCU_HAS_EUSCI_B2__                                                     /*!< Module EUSCI_B2 is available */
N#define __MCU_HAS_EUSCI_B3__                                                     /*!< Module EUSCI_B3 is available */
N#define __MCU_HAS_FLCTL__                                                        /*!< Module FLCTL is available */
N#define __MCU_HAS_FL_BOOTOVER_MAILBOX__                                          /*!< Module FL_BOOTOVER_MAILBOX is available */
N#define __MCU_HAS_PCM__                                                          /*!< Module PCM is available */
N#define __MCU_HAS_PMAP__                                                         /*!< Module PMAP is available */
N#define __MCU_HAS_PSS__                                                          /*!< Module PSS is available */
N#define __MCU_HAS_REF_A__                                                        /*!< Module REF_A is available */
N#define __MCU_HAS_RSTCTL__                                                       /*!< Module RSTCTL is available */
N#define __MCU_HAS_RTC_C__                                                        /*!< Module RTC_C is available */
N#define __MCU_HAS_SYSCTL__                                                       /*!< Module SYSCTL is available */
N#define __MCU_HAS_TIMER32__                                                      /*!< Module TIMER32 is available */
N#define __MCU_HAS_TIMER_A0__                                                     /*!< Module TIMER_A0 is available */
N#define __MCU_HAS_TIMER_A1__                                                     /*!< Module TIMER_A1 is available */
N#define __MCU_HAS_TIMER_A2__                                                     /*!< Module TIMER_A2 is available */
N#define __MCU_HAS_TIMER_A3__                                                     /*!< Module TIMER_A3 is available */
N#define __MCU_HAS_TLV__                                                          /*!< Module TLV is available */
N#define __MCU_HAS_WDT_A__                                                        /*!< Module WDT_A is available */
N
N/* Definitions to show that specific ports are available */
N
N#define __MSP432_HAS_PORTA_R__
N#define __MSP432_HAS_PORTB_R__
N#define __MSP432_HAS_PORTC_R__
N#define __MSP432_HAS_PORTD_R__
N#define __MSP432_HAS_PORTE_R__
N#define __MSP432_HAS_PORTJ_R__
N
N#define __MSP432_HAS_PORT1_R__
N#define __MSP432_HAS_PORT2_R__
N#define __MSP432_HAS_PORT3_R__
N#define __MSP432_HAS_PORT4_R__
N#define __MSP432_HAS_PORT5_R__
N#define __MSP432_HAS_PORT6_R__
N#define __MSP432_HAS_PORT7_R__
N#define __MSP432_HAS_PORT8_R__
N#define __MSP432_HAS_PORT9_R__
N#define __MSP432_HAS_PORT10_R__
N
N
N/*@}*/ /* end of group MSP432P401R_CMSIS */
N
N/* Include CMSIS Cortex-M4 Core Peripheral Access Layer Header File */
N#ifdef __TI_ARM__
N/* disable the TI ULP advisor check for the core header file definitions */
N#pragma diag_push
N#pragma CHECK_ULP("none")
N#include "core_cm4.h"
L 1 "C:/ti/ccs930/ccs/ccs_base/arm/include/CMSIS/core_cm4.h" 1
N/**************************************************************************//**
N * @file     core_cm4.h
N * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
N * @version  V5.0.1
N * @date     30. January 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 0L && (__ARMCC_VERSION >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM4_H_GENERIC
N#define __CORE_CM4_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M4
N  @{
N */
N
N/*  CMSIS CM4 definitions */
N#define __CM4_CMSIS_VERSION_MAIN  ( 5U)                                  /*!< [31:16] CMSIS HAL main version */
N#define __CM4_CMSIS_VERSION_SUB   ( 0U)                                  /*!< [15:0]  CMSIS HAL sub version */
N#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM4_CMSIS_VERSION_SUB           )  /*!< CMSIS HAL version number */
X#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) |                                     __CM4_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and functions.
N*/
N#if defined ( __CC_ARM )
X#if 0L
S  #if defined __TARGET_FPU_VFP
S    #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 0L && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __GNUC__ )
X#elif 0L
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __ICCARM__ )
X#elif 0L
S  #if defined __ARMVFP__
S    #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
N#elif defined ( __TI_ARM__ )
X#elif 1L
N  #if defined __TI_VFP_SUPPORT__
X  #if 1L
N    #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
X    #if 1L && (1 == 1U)
N      #define __FPU_USED       1U
N    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
N    #endif
N  #else
S    #define __FPU_USED         0U
N  #endif
N
N#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
S      #define __FPU_USED       1U
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0U
S    #endif
S  #else
S    #define __FPU_USED         0U
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "C:\ti\ccs930\ccs\ccs_base\arm\include\CMSIS\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.0.1
N * @date     30. January 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * ARM Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   0L
S  #include "cmsis_armcc.h"
S
S
S/*
S * ARM Compiler 6 (armclang)
S */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 0L && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
X#elif 0L
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
X#elif 0L
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S
S  #include <cmsis_iar.h>
S
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __noreturn
S  #endif
S  #ifndef   __USED
S    #define __USED                    __root
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    __packed struct T_UINT32 { uint32_t v; };
S      #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           __packed struct
S  #endif
S
S
S/*
S * TI ARM Compiler
S */
N#elif defined ( __TI_ARM__ )
X#elif 1L
N  #include <cmsis_ccs.h>
L 1 "C:/ti/ccs930/ccs/ccs_base/arm/include/CMSIS/cmsis_ccs.h" 1
N//*****************************************************************************
N//
N// Copyright (C) 2012 - 2017 Texas Instruments Incorporated - http://www.ti.com/
N//
N// Redistribution and use in source and binary forms, with or without
N// modification, are permitted provided that the following conditions
N// are met:
N//
N//  Redistributions of source code must retain the above copyright
N//  notice, this list of conditions and the following disclaimer.
N//
N//  Redistributions in binary form must reproduce the above copyright
N//  notice, this list of conditions and the following disclaimer in the
N//  documentation and/or other materials provided with the
N//  distribution.
N//
N//  Neither the name of Texas Instruments Incorporated nor the names of
N//  its contributors may be used to endorse or promote products derived
N//  from this software without specific prior written permission.
N//
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N//
N// MSP432 Family CMSIS Definitions
N//
N//****************************************************************************
N
N#ifndef CMSIS_CCS_H_
N#define CMSIS_CCS_H_
N
N#ifndef __TI_ARM__
S  #error This file should only be compiled by TI compiler (minimum version 15.12.x)
N#endif
N
N/** CMSIS compiler control architecture macros */
N#if defined ( __TI_ARM_V6M0__ )
X#if 0L
S  #define __ARM_ARCH_6M__                   1
N#endif
N
N#if defined ( __TI_ARM_V7M3__ )
X#if 0L
S  #define __ARM_ARCH_7M__                   1
N#endif
N
N#if defined ( __TI_ARM_V7M4__ )
X#if 1L
N  #define __ARM_ARCH_7EM__                  1
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N *  \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N *  @{
N */
N
N/**
N * \brief   Enable IRQ Interrupts
N * \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N *          Can only be executed in Privileged modes.
N */
N#define __enable_irq                        _enable_IRQ
N
N/**
N * \brief   Disable IRQ Interrupts
N * \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N *          Can only be executed in Privileged modes.
N */
N#define __disable_irq                       _disable_IRQ
N
N/** @} */ /* end of CMSIS_Core_RegAccFunctions */
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N *  Access to dedicated instructions
N *  @{
N*/
N
N/**
N * \brief   Count leading zeros
N * \details Counts the number of leading zeros of a data value.
N * \param [in]  VAL  Value to count the leading zeros
N * \return           number of leading zeros in value
N */
N#define __CLZ(VAL)                          ((unsigned char)__clz(VAL))
N
N/**
N * \brief   Signed Saturate
N * \details Saturates a signed value.
N * \param [in]  VAL      Value to be saturated
N * \param [in]  BITPOS   Bit position to saturate to (1..32)
N * \return               Saturated value
N */
N#define __SSAT(VAL, BITPOS)                 _ssatl(VAL, 0, BITPOS)
N
N/**
N * \brief   No Operation
N * \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                               __nop
N
N/**
N * \brief   Wait For Interrupt
N * \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                               __wfi
N
N
N/**
N * \brief   Wait For Event
N * \details Wait For Event is a hint instruction that permits the processor to enter
N *          a low-power state until one of a number of events occurs.
N */
N#define __WFE                               __wfe
N
N/**
N * \brief   Data Synchronization Barrier
N * \details Acts as a special kind of Data Memory Barrier.
N *          It completes when all explicit memory accesses before this instruction complete.
N */
N 
N#define __DSB                               _dsb
N/**
N * \brief   Instruction Synchronization Barrier
N * \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N *          so that all instructions following the ISB are fetched from cache or memory,
N *          after the instruction has been completed.
N */
N#define __ISB                               _isb
N
N/**
N * \brief   Rotate Right in unsigned value (32 bit)
N * \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N * \param [in]  VAL     Value to rotate
N * \param [in]  SHIFT   Number of Bits to rotate
N * \return              Rotated value
N */
N#define __ROR(VAL, SHIFT)                   ((unsigned int)__ror(VAL, SHIFT))
N
N/** @} */ /* end of group CMSIS_Core_InstructionInterface */
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N *  Access to dedicated SIMD instructions
N *  @{
N*/
N#if (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))
X#if (1L && (1 == 1))
N
N#define __SADD8(VAL1, VAL2)                 ((unsigned int)_sadd8(VAL1, VAL2))
N#define __QADD8(VAL1, VAL2)                 ((unsigned int)_qadd8(VAL1, VAL2))
N#define __SHADD8(VAL1, VAL2)                ((unsigned int)_shadd8(VAL1, VAL2))
N#define __UADD8(VAL1, VAL2)                 ((unsigned int)_uadd8(VAL1, VAL2))
N#define __UQADD8(VAL1, VAL2)                ((unsigned int)_uqadd8(VAL1, VAL2))
N#define __UHADD8(VAL1, VAL2)                ((unsigned int)_uhadd8(VAL1, VAL2))
N#define __SSUB8(VAL1, VAL2)                 ((unsigned int)_ssub8(VAL1, VAL2))
N#define __QSUB8(VAL1, VAL2)                 ((unsigned int)_qsub8(VAL1, VAL2))
N#define __SHSUB8(VAL1, VAL2)                ((unsigned int)_shsub8(VAL1, VAL2))
N#define __USUB8(VAL1, VAL2)                 ((unsigned int)_usub8(VAL1, VAL2))
N#define __UQSUB8(VAL1, VAL2)                ((unsigned int)_uqsub8(VAL1, VAL2))
N#define __UHSUB8(VAL1, VAL2)                ((unsigned int)_uhsub8(VAL1, VAL2))
N#define __SADD16(VAL1, VAL2)                ((unsigned int)_sadd16(VAL1, VAL2))
N#define __QADD16(VAL1, VAL2)                ((unsigned int)_qadd16(VAL1, VAL2))
N#define __SHADD16(VAL1, VAL2)               ((unsigned int)_shadd16(VAL1, VAL2))
N#define __UADD16(VAL1, VAL2)                ((unsigned int)_uadd16(VAL1, VAL2))
N#define __UQADD16(VAL1, VAL2)               ((unsigned int)_uqadd16(VAL1, VAL2))
N#define __UHADD16(VAL1, VAL2)               ((unsigned int)_uhadd16(VAL1, VAL2))
N#define __SSUB16(VAL1, VAL2)                ((unsigned int)_ssub16(VAL1, VAL2))
N#define __QSUB16(VAL1, VAL2)                ((unsigned int)_qsub16(VAL1, VAL2))
N#define __SHSUB16(VAL1, VAL2)               ((unsigned int)_shsub16(VAL1, VAL2))
N#define __USUB16(VAL1, VAL2)                ((unsigned int)_usub16(VAL1, VAL2))
N#define __UQSUB16(VAL1, VAL2)               ((unsigned int)_uqsub16(VAL1, VAL2))
N#define __UHSUB16(VAL1, VAL2)               ((unsigned int)_uhsub16(VAL1, VAL2))
N#define __SASX(VAL1, VAL2)                  ((unsigned int)_saddsubx(VAL1, VAL2))
N#define __QASX(VAL1, VAL2)                  ((unsigned int)_qaddsubx(VAL1, VAL2))
N#define __SHASX(VAL1, VAL2)                 ((unsigned int)_shaddsubx(VAL1, VAL2))
N#define __UASX(VAL1, VAL2)                  ((unsigned int)_uaddsubx(VAL1, VAL2))
N#define __UQASX(VAL1, VAL2)                 ((unsigned int)_uqaddsubx(VAL1, VAL2))
N#define __UHASX(VAL1, VAL2)                 ((unsigned int)_uhaddsubx(VAL1, VAL2)))
N#define __SSAX(VAL1, VAL2)                  ((unsigned int)_ssubaddx(VAL1, VAL2))
N#define __QSAX(VAL1, VAL2)                  ((unsigned int)_qsubaddx(VAL1, VAL2))
N#define __SHSAX(VAL1, VAL2)                 ((unsigned int)_shsubaddx(VAL1, VAL2))
N#define __USAX(VAL1, VAL2)                  ((unsigned int)_usubaddx(VAL1, VAL2))
N#define __UQSAX(VAL1, VAL2)                 ((unsigned int)_uqsubaddx(VAL1, VAL2))
N#define __UHSAX(VAL1, VAL2)                 ((unsigned int)_uhsubaddx(VAL1, VAL2))
N#define __USAD8(VAL1, VAL2)                 ((unsigned int)_usad8(VAL1, VAL2))
N#define __USADA8(VAL1, VAL2, VAL3)          ((unsigned int)_usada8(VAL1, VAL2, VAL3))
N#define __SSAT16(VAL, BITPOS)               ((unsigned int)_ssat16(VAL, BITPOS))
N#define __USAT16(VAL, BITPOS)               ((unsigned int)_usat16(VAL, BITPOS))
N#define __UXTB16(VAL)                       ((unsigned int)_uxtb16(VAL, 0))
N#define __UXTAB16(VAL1, VAL2)               ((unsigned int)_uxtab16(VAL1, VAL2, 0))
N#define __SXTB16(VAL)                       ((unsigned int)_sxtb16(VAL, 0))
N#define __SXTAB16(VAL1, VAL2)               ((unsigned int)_sxtab16(VAL1, VAL2, 0))
N#define __SMUAD(VAL1, VAL2)                 ((unsigned int)_smuad(VAL1, VAL2))
N#define __SMUADX(VAL1, VAL2)                ((unsigned int)_smuadx(VAL1, VAL2))
N#define __SMLAD(VAL1, VAL2, ACCUMULATOR)    ((unsigned int)_smlad(VAL1, VAL2, ACCUMULATOR))
N#define __SMLADX(VAL1, VAL2, ACCUMULATOR)   ((unsigned int)_smladx(VAL1, VAL2, ACCUMULATOR))
N#define __SMLALD(VAL1, VAL2, ACCUMULATOR)   ((unsigned long long)_smlald(ACCUMULATOR, VAL1, VAL2))
N#define __SMLALDX(VAL1, VAL2, ACCUMULATOR)  ((unsigned long long)_smlaldx(ACCUMULATOR, VAL1, VAL2))
N#define __SMUSD(VAL1, VAL2)                 ((unsigned int)_smusd(VAL1, VAL2))
N#define __SMUSDX(VAL1, VAL2)                ((unsigned int)_smusdx(VAL1, VAL2))
N#define __SMLSD(VAL1, VAL2, ACCUMULATOR)    ((unsigned int)_smlsd(VAL1, VAL2, ACCUMULATOR))
N#define __SMLSDX(VAL1, VAL2, ACCUMULATOR)   ((unsigned int)_smlsdx(VAL1, VAL2, ACCUMULATOR))
N#define __SMLSLD(VAL1, VAL2, ACCUMULATOR)   ((unsigned long long)_smlsld(ACCUMULATOR, VAL1, VAL2))
N#define __SMLSLDX(VAL1, VAL2, ACCUMULATOR)  ((unsigned long long)_smlsldx(ACCUMULATOR, VAL1, VAL2))
N#define __SEL(VAL1, VAL2)                   ((unsigned int)_sel(VAL1, VAL2))
N#define __QADD                              _sadd
N#define __QSUB                              _ssub
N#define __PKHBT                             _pkhbt
N#define __PKHTB                             _pkhtb
N#define __SMMLA                             _smmla
N
N#define __QDADD                             _sdadd
N#define __QDSUB                             _sdsub
N#define __SMLABB                            _smlabb
N#define __SMLABT                            _smlabt
N#define __SMLALBB                           _smlalbb
N#define __SMLALBT                           _smlalbt
N#define __SMLALTB                           _smlaltb
N#define __SMLALTT                           _smlaltt
N#define __SMLATB                            _smlatb
N#define __SMLATT                            _smlatt
N#define __SMLAWB                            _smlawb
N#define __SMLAWT                            _smlawt
N#define __SMULBB                            _smulbb
N#define __SMULBT                            _smulbt
N#define __SMULTB                            _smultb
N#define __SMULTT                            _smultt
N#define __SMULWB                            _smulwb
N#define __SMULWT                            _smulwt
N#define __SMMLAR                            _smmlar
N#define __SMMLS                             _smmls
N#define __SMMLSR                            _smmlsr
N#define __SMMUL                             _smmul
N#define __SMMULR                            _smmulr
N#define __SXTAB                             _sxtab
N#define __SXTAH                             _sxtah
N#define __UMAAL                             _umaal
N#define __UXTAB                             _uxtab
N#define __UXTAH                             _uxtah
N#define __SUBC                              _subc
N
N#endif /* (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1)) */
N
N#if (defined (__ARM_ARCH_6M__) && (__ARM_ARCH_6M__ == 1))
X#if (0L && (__ARM_ARCH_6M__ == 1))
S
S#define __SXTB                              _sxtb
S#define __SXTH                              _sxth
S#define __UXTB                              _uxtb
S#define __UXTH                              _uxth
S
N#endif /* (defined (__ARM_ARCH_6M__) && (__ARM_ARCH_6M__ == 1)) */
N
N/** @} */ /* end of group CMSIS_SIMD_intrinsics */
N
N#endif /* CMSIS_CCS_H_ */
L 98 "C:\ti\ccs930\ccs\ccs_base\arm\include\CMSIS\cmsis_compiler.h" 2
N
N  #ifndef   __ASM
N    #define __ASM                     __asm
N  #endif
N  #ifndef   __INLINE
N    #define __INLINE                  inline
N  #endif
N  #ifndef   __STATIC_INLINE
N    #define __STATIC_INLINE           static inline
N  #endif
N  #ifndef   __NO_RETURN
N    #define __NO_RETURN               __attribute__((noreturn))
N  #endif
N  #ifndef   __USED
N    #define __USED                    __attribute__((used))
N  #endif
N  #ifndef   __WEAK
N    #define __WEAK                    __attribute__((weak))
N  #endif
N  #ifndef   __UNALIGNED_UINT32
N    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
N    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
N  #endif
N  #ifndef   __ALIGNED
N    #define __ALIGNED(x)              __attribute__((aligned(x)))
N  #endif
N  #ifndef   __PACKED
N    #define __PACKED                  __attribute__((packed))
N  #endif
N  #ifndef   __PACKED_STRUCT
N    #define __PACKED_STRUCT           struct __attribute__((packed))
N  #endif
N
N
N/*
N * TASKING Compiler
N */
N#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           struct __packed__
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                     _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           @packed struct
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 161 "C:/ti/ccs930/ccs/ccs_base/arm/include/CMSIS/core_cm4.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM4_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM4_H_DEPENDANT
N#define __CORE_CM4_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM4_REV
S    #define __CM4_REV               0x0000U
S    #warning "__CM4_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __FPU_PRESENT
S    #define __FPU_PRESENT             0U
S    #warning "__FPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          3U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M4 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N  - Core MPU Register
N  - Core FPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
N    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N#define APSR_Q_Pos                         27U                                            /*!< APSR: Q Position */
N#define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR: Q Mask */
N
N#define APSR_GE_Pos                        16U                                            /*!< APSR: GE Position */
N#define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR: GE Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
N    uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
N    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit */
N    uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_Q_Pos                         27U                                            /*!< xPSR: Q Position */
N#define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR: Q Mask */
N
N#define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR: ICI/IT part 2 Position */
N#define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR: ICI/IT part 2 Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_GE_Pos                        16U                                            /*!< xPSR: GE Position */
N#define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR: GE Mask */
N
N#define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR: ICI/IT part 1 Position */
N#define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR: ICI/IT part 1 Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
N    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_FPCA_Pos                    2U                                            /*!< CONTROL: FPCA Position */
N#define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONTROL: FPCA Mask */
N
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[8U];                
N        uint32_t RESERVED0[24U];
N  __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[8U];                
N        uint32_t RSERVED1[24U];
N  __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[8U];                
N        uint32_t RESERVED2[24U];
N  __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[8U];                
N        uint32_t RESERVED3[24U];
N  __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
X  volatile uint32_t IABR[8U];                
N        uint32_t RESERVED4[56U];
N  __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240U];                
N        uint32_t RESERVED5[644U];
N  __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register */
X  volatile  uint32_t STIR;                    
N}  NVIC_Type;
N
N/* Software Triggered Interrupt Register Definitions */
N#define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: INTLINESNUM Position */
N#define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: INTLINESNUM Mask */
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N  __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12U];                
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N  __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register */
X  volatile uint32_t CFSR;                    
N  __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
X  volatile uint32_t HFSR;                    
N  __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
X  volatile uint32_t DFSR;                    
N  __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register */
X  volatile uint32_t MMFAR;                   
N  __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
X  volatile uint32_t BFAR;                    
N  __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register */
X  volatile uint32_t AFSR;                    
N  __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
X  volatile const  uint32_t PFR[2U];                 
N  __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
X  volatile const  uint32_t DFR;                     
N  __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
X  volatile const  uint32_t ADR;                     
N  __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
X  volatile const  uint32_t MMFR[4U];                
N  __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register */
X  volatile const  uint32_t ISAR[5U];                
N        uint32_t RESERVED0[5U];
N  __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register */
X  volatile uint32_t CPACR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Vector Table Offset Register Definitions */
N#define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N
N#define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Register Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB CFSR (MMFSR): MMARVALID Position */
N#define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB CFSR (MMFSR): MMARVALID Mask */
N
N#define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB CFSR (MMFSR): MLSPERR Position */
N#define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB CFSR (MMFSR): MLSPERR Mask */
N
N#define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB CFSR (MMFSR): MSTKERR Position */
N#define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB CFSR (MMFSR): MSTKERR Mask */
N
N#define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB CFSR (MMFSR): MUNSTKERR Position */
N#define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB CFSR (MMFSR): MUNSTKERR Mask */
N
N#define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB CFSR (MMFSR): DACCVIOL Position */
N#define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB CFSR (MMFSR): DACCVIOL Mask */
N
N#define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB CFSR (MMFSR): IACCVIOL Position */
N#define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB CFSR (MMFSR): IACCVIOL Mask */
N
N/* BusFault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB CFSR (BFSR): BFARVALID Position */
N#define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB CFSR (BFSR): BFARVALID Mask */
N
N#define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB CFSR (BFSR): LSPERR Position */
N#define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB CFSR (BFSR): LSPERR Mask */
N
N#define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB CFSR (BFSR): STKERR Position */
N#define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB CFSR (BFSR): STKERR Mask */
N
N#define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB CFSR (BFSR): UNSTKERR Position */
N#define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB CFSR (BFSR): UNSTKERR Mask */
N
N#define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB CFSR (BFSR): IMPRECISERR Position */
N#define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB CFSR (BFSR): IMPRECISERR Mask */
N
N#define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB CFSR (BFSR): PRECISERR Position */
N#define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB CFSR (BFSR): PRECISERR Mask */
N
N#define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB CFSR (BFSR): IBUSERR Position */
N#define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB CFSR (BFSR): IBUSERR Mask */
N
N/* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB CFSR (UFSR): DIVBYZERO Position */
N#define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB CFSR (UFSR): DIVBYZERO Mask */
N
N#define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB CFSR (UFSR): UNALIGNED Position */
N#define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB CFSR (UFSR): UNALIGNED Mask */
N
N#define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB CFSR (UFSR): NOCP Position */
N#define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB CFSR (UFSR): NOCP Mask */
N
N#define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB CFSR (UFSR): INVPC Position */
N#define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB CFSR (UFSR): INVPC Mask */
N
N#define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB CFSR (UFSR): INVSTATE Position */
N#define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB CFSR (UFSR): INVSTATE Mask */
N
N#define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB CFSR (UFSR): UNDEFINSTR Position */
N#define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB CFSR (UFSR): UNDEFINSTR Mask */
N
N/* SCB Hard Fault Status Register Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
N  \brief    Type definitions for the System Control and ID Register not in the SCB
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control and ID Register not in the SCB.
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register */
X  volatile const  uint32_t ICTR;                    
N  __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
X  volatile uint32_t ACTLR;                   
N} SCnSCB_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: INTLINESNUM Position */
N#define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N#define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: DISOOFP Position */
N#define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: DISOOFP Mask */
N
N#define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: DISFPCA Position */
N#define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: DISFPCA Mask */
N
N#define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: DISFOLD Position */
N#define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */
N
N#define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: DISDEFWBUF Position */
N#define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */
N
N#define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: DISMCYCINT Position */
N#define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: DISMCYCINT Mask */
N
N/*@} end of group CMSIS_SCnotSCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
N  \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
N */
Ntypedef struct
N{
N  __OM  union
X  volatile  union
N  {
N    __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
X    volatile  uint8_t    u8;                  
N    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
X    volatile  uint16_t   u16;                 
N    __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
X    volatile  uint32_t   u32;                 
N  }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
N        uint32_t RESERVED0[864U];
N  __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
X  volatile uint32_t TER;                     
N        uint32_t RESERVED1[15U];
N  __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
X  volatile uint32_t TPR;                     
N        uint32_t RESERVED2[15U];
N  __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
X  volatile uint32_t TCR;                     
N        uint32_t RESERVED3[29U];
N  __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register */
X  volatile  uint32_t IWR;                     
N  __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
X  volatile const  uint32_t IRR;                     
N  __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register */
X  volatile uint32_t IMCR;                    
N        uint32_t RESERVED4[43U];
N  __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
X  volatile  uint32_t LAR;                     
N  __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
X  volatile const  uint32_t LSR;                     
N        uint32_t RESERVED5[6U];
N  __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                    
N  __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                    
N  __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                    
N  __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                    
N  __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                    
N  __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                    
N  __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                    
N  __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                    
N  __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                    
N  __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                    
N  __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                    
N  __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                    
N} ITM_Type;
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM TCR: Global timestamp frequency Position */
N#define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM TCR: Global timestamp frequency Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1U                                            /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0U                                            /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM LSR: Present Mask */
N
N/*@}*/ /* end of group CMSIS_ITM */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
N  \brief    Type definitions for the Data Watchpoint and Trace (DWT)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
X  volatile uint32_t CYCCNT;                  
N  __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
X  volatile uint32_t CPICNT;                  
N  __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register */
X  volatile uint32_t EXCCNT;                  
N  __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
X  volatile uint32_t SLEEPCNT;                
N  __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
X  volatile uint32_t LSUCNT;                  
N  __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register */
X  volatile uint32_t FOLDCNT;                 
N  __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register */
X  volatile const  uint32_t PCSR;                    
N  __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
X  volatile uint32_t COMP0;                   
N  __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
X  volatile uint32_t MASK0;                   
N  __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
X  volatile uint32_t FUNCTION0;               
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
X  volatile uint32_t COMP1;                   
N  __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
X  volatile uint32_t MASK1;                   
N  __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
X  volatile uint32_t FUNCTION1;               
N        uint32_t RESERVED1[1U];
N  __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
X  volatile uint32_t COMP2;                   
N  __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
X  volatile uint32_t MASK2;                   
N  __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
X  volatile uint32_t FUNCTION2;               
N        uint32_t RESERVED2[1U];
N  __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
X  volatile uint32_t COMP3;                   
N  __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
X  volatile uint32_t MASK3;                   
N  __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
X  volatile uint32_t FUNCTION3;               
N} DWT_Type;
N
N/* DWT Control Register Definitions */
N#define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTRL: NUMCOMP Position */
N#define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTRL: NUMCOMP Mask */
N
N#define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTRL: NOTRCPKT Position */
N#define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTRL: NOTRCPKT Mask */
N
N#define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTRL: NOEXTTRIG Position */
N#define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTRL: NOEXTTRIG Mask */
N
N#define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTRL: NOCYCCNT Position */
N#define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTRL: NOCYCCNT Mask */
N
N#define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTRL: NOPRFCNT Position */
N#define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTRL: NOPRFCNT Mask */
N
N#define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTRL: CYCEVTENA Position */
N#define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTRL: CYCEVTENA Mask */
N
N#define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTRL: FOLDEVTENA Position */
N#define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTRL: FOLDEVTENA Mask */
N
N#define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTRL: LSUEVTENA Position */
N#define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTRL: LSUEVTENA Mask */
N
N#define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTRL: SLEEPEVTENA Position */
N#define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTRL: SLEEPEVTENA Mask */
N
N#define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTRL: EXCEVTENA Position */
N#define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTRL: EXCEVTENA Mask */
N
N#define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTRL: CPIEVTENA Position */
N#define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTRL: CPIEVTENA Mask */
N
N#define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTRL: EXCTRCENA Position */
N#define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTRL: EXCTRCENA Mask */
N
N#define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTRL: PCSAMPLENA Position */
N#define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTRL: PCSAMPLENA Mask */
N
N#define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTRL: SYNCTAP Position */
N#define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTRL: SYNCTAP Mask */
N
N#define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTRL: CYCTAP Position */
N#define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTRL: CYCTAP Mask */
N
N#define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTRL: POSTINIT Position */
N#define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */
N
N#define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTRL: POSTPRESET Position */
N#define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */
N
N#define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTRL: CYCCNTENA Position */
N#define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTRL: CYCCNTENA Mask */
N
N/* DWT CPI Count Register Definitions */
N#define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPICNT: CPICNT Position */
N#define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPICNT: CPICNT Mask */
N
N/* DWT Exception Overhead Count Register Definitions */
N#define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXCCNT: EXCCNT Position */
N#define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXCCNT: EXCCNT Mask */
N
N/* DWT Sleep Count Register Definitions */
N#define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLEEPCNT: SLEEPCNT Position */
N#define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLEEPCNT: SLEEPCNT Mask */
N
N/* DWT LSU Count Register Definitions */
N#define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSUCNT: LSUCNT Position */
N#define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSUCNT: LSUCNT Mask */
N
N/* DWT Folded-instruction Count Register Definitions */
N#define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOLDCNT: FOLDCNT Position */
N#define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOLDCNT: FOLDCNT Mask */
N
N/* DWT Comparator Mask Register Definitions */
N#define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MASK: MASK Position */
N#define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MASK: MASK Mask */
N
N/* DWT Comparator Function Register Definitions */
N#define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUNCTION: MATCHED Position */
N#define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUNCTION: MATCHED Mask */
N
N#define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUNCTION: DATAVADDR1 Position */
N#define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUNCTION: DATAVADDR1 Mask */
N
N#define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUNCTION: DATAVADDR0 Position */
N#define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUNCTION: DATAVADDR0 Mask */
N
N#define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUNCTION: DATAVSIZE Position */
N#define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUNCTION: DATAVSIZE Mask */
N
N#define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUNCTION: LNK1ENA Position */
N#define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUNCTION: LNK1ENA Mask */
N
N#define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUNCTION: DATAVMATCH Position */
N#define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUNCTION: DATAVMATCH Mask */
N
N#define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUNCTION: CYCMATCH Position */
N#define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUNCTION: CYCMATCH Mask */
N
N#define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUNCTION: EMITRANGE Position */
N#define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUNCTION: EMITRANGE Mask */
N
N#define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUNCTION: FUNCTION Position */
N#define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUNCTION: FUNCTION Mask */
N
N/*@}*/ /* end of group CMSIS_DWT */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_TPI     Trace Port Interface (TPI)
N  \brief    Type definitions for the Trace Port Interface (TPI)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Trace Port Interface Register (TPI).
N */
Ntypedef struct
N{
N  __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register */
X  volatile uint32_t SSPSR;                   
N  __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
X  volatile uint32_t CSPSR;                   
N        uint32_t RESERVED0[2U];
N  __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
X  volatile uint32_t ACPR;                    
N        uint32_t RESERVED1[55U];
N  __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
X  volatile uint32_t SPPR;                    
N        uint32_t RESERVED2[131U];
N  __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
X  volatile const  uint32_t FFSR;                    
N  __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
X  volatile uint32_t FFCR;                    
N  __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
X  volatile const  uint32_t FSCR;                    
N        uint32_t RESERVED3[759U];
N  __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
X  volatile const  uint32_t TRIGGER;                 
N  __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
X  volatile const  uint32_t FIFO0;                   
N  __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
X  volatile const  uint32_t ITATBCTR2;               
N        uint32_t RESERVED4[1U];
N  __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
X  volatile const  uint32_t ITATBCTR0;               
N  __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
X  volatile const  uint32_t FIFO1;                   
N  __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
X  volatile uint32_t ITCTRL;                  
N        uint32_t RESERVED5[39U];
N  __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
X  volatile uint32_t CLAIMSET;                
N  __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
X  volatile uint32_t CLAIMCLR;                
N        uint32_t RESERVED7[8U];
N  __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
X  volatile const  uint32_t DEVID;                   
N  __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
X  volatile const  uint32_t DEVTYPE;                 
N} TPI_Type;
N
N/* TPI Asynchronous Clock Prescaler Register Definitions */
N#define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACPR: PRESCALER Position */
N#define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACPR: PRESCALER Mask */
N
N/* TPI Selected Pin Protocol Register Definitions */
N#define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPPR: TXMODE Position */
N#define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPPR: TXMODE Mask */
N
N/* TPI Formatter and Flush Status Register Definitions */
N#define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFSR: FtNonStop Position */
N#define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFSR: FtNonStop Mask */
N
N#define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFSR: TCPresent Position */
N#define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFSR: TCPresent Mask */
N
N#define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFSR: FtStopped Position */
N#define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFSR: FtStopped Mask */
N
N#define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFSR: FlInProg Position */
N#define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFSR: FlInProg Mask */
N
N/* TPI Formatter and Flush Control Register Definitions */
N#define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFCR: TrigIn Position */
N#define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFCR: TrigIn Mask */
N
N#define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFCR: EnFCont Position */
N#define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFCR: EnFCont Mask */
N
N/* TPI TRIGGER Register Definitions */
N#define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRIGGER: TRIGGER Position */
N#define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRIGGER: TRIGGER Mask */
N
N/* TPI Integration ETM Data Register Definitions (FIFO0) */
N#define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO0: ITM_ATVALID Position */
N#define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIFO0: ITM_ATVALID Mask */
N
N#define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO0: ITM_bytecount Position */
N#define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIFO0: ITM_bytecount Mask */
N
N#define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO0: ETM_ATVALID Position */
N#define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIFO0: ETM_ATVALID Mask */
N
N#define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO0: ETM_bytecount Position */
N#define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIFO0: ETM_bytecount Mask */
N
N#define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIFO0: ETM2 Position */
N#define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIFO0: ETM2 Mask */
N
N#define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIFO0: ETM1 Position */
N#define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIFO0: ETM1 Mask */
N
N#define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIFO0: ETM0 Position */
N#define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIFO0: ETM0 Mask */
N
N/* TPI ITATBCTR2 Register Definitions */
N#define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR2: ATREADY Position */
N#define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITATBCTR2: ATREADY Mask */
N
N/* TPI Integration ITM Data Register Definitions (FIFO1) */
N#define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO1: ITM_ATVALID Position */
N#define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIFO1: ITM_ATVALID Mask */
N
N#define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO1: ITM_bytecount Position */
N#define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIFO1: ITM_bytecount Mask */
N
N#define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO1: ETM_ATVALID Position */
N#define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIFO1: ETM_ATVALID Mask */
N
N#define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO1: ETM_bytecount Position */
N#define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIFO1: ETM_bytecount Mask */
N
N#define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIFO1: ITM2 Position */
N#define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIFO1: ITM2 Mask */
N
N#define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIFO1: ITM1 Position */
N#define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIFO1: ITM1 Mask */
N
N#define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIFO1: ITM0 Position */
N#define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIFO1: ITM0 Mask */
N
N/* TPI ITATBCTR0 Register Definitions */
N#define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR0: ATREADY Position */
N#define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITATBCTR0: ATREADY Mask */
N
N/* TPI Integration Mode Control Register Definitions */
N#define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITCTRL: Mode Position */
N#define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITCTRL: Mode Mask */
N
N/* TPI DEVID Register Definitions */
N#define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEVID: NRZVALID Position */
N#define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEVID: NRZVALID Mask */
N
N#define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEVID: MANCVALID Position */
N#define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEVID: MANCVALID Mask */
N
N#define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEVID: PTINVALID Position */
N#define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEVID: PTINVALID Mask */
N
N#define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEVID: MinBufSz Position */
N#define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEVID: MinBufSz Mask */
N
N#define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEVID: AsynClkIn Position */
N#define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEVID: AsynClkIn Mask */
N
N#define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEVID: NrTraceInput Position */
N#define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEVID: NrTraceInput Mask */
N
N/* TPI DEVTYPE Register Definitions */
N#define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEVTYPE: MajorType Position */
N#define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEVTYPE: MajorType Mask */
N
N#define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEVTYPE: SubType Position */
N#define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEVTYPE: SubType Mask */
N
N/*@}*/ /* end of group CMSIS_TPI */
N
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (1 == 1U)
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
N  \brief    Type definitions for the Memory Protection Unit (MPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Memory Protection Unit (MPU).
N */
Ntypedef struct
N{
N  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
X  volatile const  uint32_t TYPE;                    
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
X  volatile uint32_t RNR;                     
N  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
X  volatile uint32_t RBAR;                    
N  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
X  volatile uint32_t RASR;                    
N  __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register */
X  volatile uint32_t RBAR_A1;                 
N  __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
X  volatile uint32_t RASR_A1;                 
N  __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register */
X  volatile uint32_t RBAR_A2;                 
N  __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
X  volatile uint32_t RASR_A2;                 
N  __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register */
X  volatile uint32_t RBAR_A3;                 
N  __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
X  volatile uint32_t RASR_A3;                 
N} MPU_Type;
N
N/* MPU Type Register Definitions */
N#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
N#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
N
N#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
N#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
N
N#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
N#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
N
N/* MPU Control Register Definitions */
N#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
N#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
N
N#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
N#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
N
N#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
N#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
N
N/* MPU Region Number Register Definitions */
N#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
N#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
N
N/* MPU Region Base Address Register Definitions */
N#define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU RBAR: ADDR Position */
N#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
N
N#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
N#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
N
N#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
N#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
N
N/* MPU Region Attribute and Size Register Definitions */
N#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
N#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
N
N#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
N#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
N
N#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
N#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
N
N#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
N#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
N
N#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
N#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
N
N#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
N#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
N
N#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
N#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
N
N#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
N#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
N
N#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
N#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
N
N#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
N#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
N
N/*@} end of group CMSIS_MPU */
N#endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_FPU     Floating Point Unit (FPU)
N  \brief    Type definitions for the Floating Point Unit (FPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Floating Point Unit (FPU).
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control Register */
X  volatile uint32_t FPCCR;                   
N  __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address Register */
X  volatile uint32_t FPCAR;                   
N  __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Control Register */
X  volatile uint32_t FPDSCR;                  
N  __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 */
X  volatile const  uint32_t MVFR0;                   
N  __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 */
X  volatile const  uint32_t MVFR1;                   
N} FPU_Type;
N
N/* Floating-Point Context Control Register Definitions */
N#define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCCR: ASPEN bit Position */
N#define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCCR: ASPEN bit Mask */
N
N#define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCCR: LSPEN Position */
N#define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCCR: LSPEN bit Mask */
N
N#define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCCR: MONRDY Position */
N#define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCCR: MONRDY bit Mask */
N
N#define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCCR: BFRDY Position */
N#define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCCR: BFRDY bit Mask */
N
N#define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCCR: MMRDY Position */
N#define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCCR: MMRDY bit Mask */
N
N#define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCCR: HFRDY Position */
N#define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCCR: HFRDY bit Mask */
N
N#define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCCR: processor mode bit Position */
N#define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCCR: processor mode active bit Mask */
N
N#define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCCR: privilege level bit Position */
N#define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCCR: privilege level bit Mask */
N
N#define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCCR: Lazy state preservation active bit Position */
N#define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCCR: Lazy state preservation active bit Mask */
N
N/* Floating-Point Context Address Register Definitions */
N#define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCAR: ADDRESS bit Position */
N#define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCAR: ADDRESS bit Mask */
N
N/* Floating-Point Default Status Control Register Definitions */
N#define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDSCR: AHP bit Position */
N#define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDSCR: AHP bit Mask */
N
N#define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDSCR: DN bit Position */
N#define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDSCR: DN bit Mask */
N
N#define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDSCR: FZ bit Position */
N#define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDSCR: FZ bit Mask */
N
N#define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDSCR: RMode bit Position */
N#define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDSCR: RMode bit Mask */
N
N/* Media and FP Feature Register 0 Definitions */
N#define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR0: FP rounding modes bits Position */
N#define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR0: FP rounding modes bits Mask */
N
N#define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR0: Short vectors bits Position */
N#define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR0: Short vectors bits Mask */
N
N#define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR0: Square root bits Position */
N#define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR0: Square root bits Mask */
N
N#define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR0: Divide bits Position */
N#define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR0: Divide bits Mask */
N
N#define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR0: FP exception trapping bits Position */
N#define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR0: FP exception trapping bits Mask */
N
N#define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR0: Double-precision bits Position */
N#define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR0: Double-precision bits Mask */
N
N#define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR0: Single-precision bits Position */
N#define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR0: Single-precision bits Mask */
N
N#define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR0: A_SIMD registers bits Position */
N#define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR0: A_SIMD registers bits Mask */
N
N/* Media and FP Feature Register 1 Definitions */
N#define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR1: FP fused MAC bits Position */
N#define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR1: FP fused MAC bits Mask */
N
N#define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR1: FP HPFP bits Position */
N#define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR1: FP HPFP bits Mask */
N
N#define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR1: D_NaN mode bits Position */
N#define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR1: D_NaN mode bits Mask */
N
N#define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR1: FtZ mode bits Position */
N#define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR1: FtZ mode bits Mask */
N
N/*@} end of group CMSIS_FPU */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Type definitions for the Core Debug Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register */
X  volatile uint32_t DHCSR;                   
N  __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register */
X  volatile  uint32_t DCRSR;                   
N  __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register */
X  volatile uint32_t DCRDR;                   
N  __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                   
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register Definitions */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register Definitions */
N#define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register Definitions */
N#define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
N#define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
N#define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register not in SCB */
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N#define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct */
N#define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct */
N#define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
N  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N#define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
N#define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Debug Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifdef CMSIS_NVIC_VIRTUAL
S  #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
S    #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
S  #endif
S  #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
N  #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N  #define NVIC_GetActive              __NVIC_GetActive
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N  #define NVIC_SystemReset            __NVIC_SystemReset
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifdef CMSIS_VECTAB_VIRTUAL
S  #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
S   #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
S  #endif
S  #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N
N/**
N  \brief   Set Priority Grouping
N  \details Sets the priority grouping field using the required unlock sequence.
N           The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
N           Only values from 0..7 are used.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]      PriorityGroup  Priority grouping field.
N */
N__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
N
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
N  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
X  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));  
N  reg_value  =  (reg_value                                   |
N                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X                ((uint32_t)0x5FAUL << 16U) |
N                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
N}
N
N
N/**
N  \brief   Get Priority Grouping
N  \details Reads the priority grouping field from the NVIC Interrupt Controller.
N  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
Xstatic inline uint32_t __NVIC_GetPriorityGrouping(void)
N{
N  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
X  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
N}
N
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N    __DSB();
X    _dsb();
N    __ISB();
X    _isb();
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Active Interrupt
N  \details Reads the active register in the NVIC and returns the active bit for the device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not active.
N  \return             1  Interrupt status is active.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
Xstatic inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N  else
N  {
N    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - 3)));
N  }
N  else
N  {
N    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           VTOR must been relocated to SRAM before.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
X  vectors[(int32_t)IRQn + 16] = vector;
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N  return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
X  return vectors[(int32_t)IRQn + 16];
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void __NVIC_SystemReset(void)
Xstatic inline void __NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  _dsb();                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = (uint32_t)((0x5FAUL << 16U)    |
N                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
X                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
N                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
X                            (1UL << 2U)    );          
N  __DSB();                                                          /* Ensure completion of memory access */
X  _dsb();                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic inline uint32_t SCB_GetFPUType(void)
N{
N  uint32_t mvfr0;
N
N  mvfr0 = FPU->MVFR0;
X  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
N  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
X  if      ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
N  {
N    return 1U;           /* Single precision FPU */
N  }
N  else
N  {
N    return 0U;           /* No FPU */
N  }
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_core_DebugFunctions ITM Functions
N  \brief    Functions that access the ITM debug interface.
N  @{
N */
N
Nextern volatile int32_t ITM_RxBuffer;                              /*!< External variable to receive characters. */
N#define                 ITM_RXBUFFER_EMPTY  ((int32_t)0x5AA55AA5U) /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */
N
N
N/**
N  \brief   ITM Send Character
N  \details Transmits a character via the ITM channel 0, and
N           \li Just returns when no debugger is connected that has booked the output.
N           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
N  \param [in]     ch  Character to transmit.
N  \returns            Character to transmit.
N */
N__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
X  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&       
N      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
X      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL               ) != 0UL)   )      
N  {
N    while (ITM->PORT[0U].u32 == 0UL)
X    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
N    {
N      __NOP();
X      __nop();
N    }
N    ITM->PORT[0U].u8 = (uint8_t)ch;
X    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
N  }
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Receive Character
N  \details Inputs a character via the external variable \ref ITM_RxBuffer.
N  \return             Received character.
N  \return         -1  No character pending.
N */
N__STATIC_INLINE int32_t ITM_ReceiveChar (void)
Xstatic inline int32_t ITM_ReceiveChar (void)
N{
N  int32_t ch = -1;                           /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
N  {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);        
N  }
N
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Check Character
N  \details Checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
N  \return          0  No character available.
N  \return          1  Character available.
N */
N__STATIC_INLINE int32_t ITM_CheckChar (void)
Xstatic inline int32_t ITM_CheckChar (void)
N{
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
N  {
N    return (0);                              /* no character available */
N  }
N  else
N  {
N    return (1);                              /*    character available */
N  }
N}
N
N/*@} end of CMSIS_core_DebugFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM4_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 233 "C:\ti\ccs930\ccs\ccs_base\arm\include\msp432p401r.h" 2
N#pragma diag_pop
N#else
S#include "core_cm4.h"
N#endif
N
N/* System Header */
N#include "system_msp432p401r.h"
L 1 "C:\ti\ccs930\ccs\ccs_base\arm\include\system_msp432p401r.h" 1
N/**************************************************************************//**
N* @file     system_msp432p401r.h
N* @brief    CMSIS Cortex-M4F Device Peripheral Access Layer Header File for
N*           MSP432P401R
N* @version  3.230
N* @date     12/06/17
N*
N* @note     View configuration instructions embedded in comments
N*
N******************************************************************************/
N//*****************************************************************************
N//
N// Copyright (C) 2015 Texas Instruments Incorporated - http://www.ti.com/
N//
N// Redistribution and use in source and binary forms, with or without
N// modification, are permitted provided that the following conditions
N// are met:
N//
N//  Redistributions of source code must retain the above copyright
N//  notice, this list of conditions and the following disclaimer.
N//
N//  Redistributions in binary form must reproduce the above copyright
N//  notice, this list of conditions and the following disclaimer in the
N//  documentation and/or other materials provided with the
N//  distribution.
N//
N//  Neither the name of Texas Instruments Incorporated nor the names of
N//  its contributors may be used to endorse or promote products derived
N//  from this software without specific prior written permission.
N//
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N//
N//*****************************************************************************
N
N#ifndef SYSTEM_MSP432P401R_H
N#define SYSTEM_MSP432P401R_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
Nextern uint32_t SystemCoreClock;     /*!< System Clock Frequency (Core Clock)  */
N
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *
N * Performs the following initialization steps:
N *     1. Enables the FPU
N *     2. Halts the WDT
N *     3. Enables all SRAM banks
N *     4. Sets up power __REGULATOR and VCORE
N *     5. Enable Flash wait states if needed
N *     6. Change MCLK to desired frequency
N *     7. Enable Flash read buffering
N */
Nextern void SystemInit (void);
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock
N *         retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* SYSTEM_MSP432P401R_H */
N
L 240 "C:\ti\ccs930\ccs\ccs_base\arm\include\msp432p401r.h" 2
N
N/******************************************************************************
N* Definition of standard bits                                                 *
N******************************************************************************/
N#define BIT0                                     (uint16_t)(0x0001)
N#define BIT1                                     (uint16_t)(0x0002)
N#define BIT2                                     (uint16_t)(0x0004)
N#define BIT3                                     (uint16_t)(0x0008)
N#define BIT4                                     (uint16_t)(0x0010)
N#define BIT5                                     (uint16_t)(0x0020)
N#define BIT6                                     (uint16_t)(0x0040)
N#define BIT7                                     (uint16_t)(0x0080)
N#define BIT8                                     (uint16_t)(0x0100)
N#define BIT9                                     (uint16_t)(0x0200)
N#define BITA                                     (uint16_t)(0x0400)
N#define BITB                                     (uint16_t)(0x0800)
N#define BITC                                     (uint16_t)(0x1000)
N#define BITD                                     (uint16_t)(0x2000)
N#define BITE                                     (uint16_t)(0x4000)
N#define BITF                                     (uint16_t)(0x8000)
N#define BIT(x)                                 ((uint16_t)1 << (x))
N
N/******************************************************************************
N* Device and peripheral memory map                                            *
N******************************************************************************/
N/** @addtogroup MSP432P401R_MemoryMap MSP432P401R Memory Mapping
N  @{
N*/
N
N#define FLASH_BASE                               ((uint32_t)0x00000000)          /*!< Main Flash memory start address */
N#define SRAM_BASE                                ((uint32_t)0x20000000)          /*!< SRAM memory start address */
N#define PERIPH_BASE                              ((uint32_t)0x40000000)          /*!< Peripherals start address */
N#define PERIPH_BASE2                             ((uint32_t)0xE0000000)          /*!< Peripherals start address */
N
N#define ADC14_BASE                            (PERIPH_BASE +0x00012000)          /*!< Base address of module ADC14 registers */
N#define AES256_BASE                           (PERIPH_BASE +0x00003C00)          /*!< Base address of module AES256 registers */
N#define CAPTIO0_BASE                          (PERIPH_BASE +0x00005400)          /*!< Base address of module CAPTIO0 registers */
N#define CAPTIO1_BASE                          (PERIPH_BASE +0x00005800)          /*!< Base address of module CAPTIO1 registers */
N#define COMP_E0_BASE                          (PERIPH_BASE +0x00003400)          /*!< Base address of module COMP_E0 registers */
N#define COMP_E1_BASE                          (PERIPH_BASE +0x00003800)          /*!< Base address of module COMP_E1 registers */
N#define CRC32_BASE                            (PERIPH_BASE +0x00004000)          /*!< Base address of module CRC32 registers */
N#define CS_BASE                               (PERIPH_BASE +0x00010400)          /*!< Base address of module CS registers */
N#define DIO_BASE                              (PERIPH_BASE +0x00004C00)          /*!< Base address of module DIO registers */
N#define DMA_BASE                              (PERIPH_BASE +0x0000E000)          /*!< Base address of module DMA registers */
N#define EUSCI_A0_BASE                         (PERIPH_BASE +0x00001000)          /*!< Base address of module EUSCI_A0 registers */
N#define EUSCI_A0_SPI_BASE                     (PERIPH_BASE +0x00001000)          /*!< Base address of module EUSCI_A0 registers */
N#define EUSCI_A1_BASE                         (PERIPH_BASE +0x00001400)          /*!< Base address of module EUSCI_A1 registers */
N#define EUSCI_A1_SPI_BASE                     (PERIPH_BASE +0x00001400)          /*!< Base address of module EUSCI_A1 registers */
N#define EUSCI_A2_BASE                         (PERIPH_BASE +0x00001800)          /*!< Base address of module EUSCI_A2 registers */
N#define EUSCI_A2_SPI_BASE                     (PERIPH_BASE +0x00001800)          /*!< Base address of module EUSCI_A2 registers */
N#define EUSCI_A3_BASE                         (PERIPH_BASE +0x00001C00)          /*!< Base address of module EUSCI_A3 registers */
N#define EUSCI_A3_SPI_BASE                     (PERIPH_BASE +0x00001C00)          /*!< Base address of module EUSCI_A3 registers */
N#define EUSCI_B0_BASE                         (PERIPH_BASE +0x00002000)          /*!< Base address of module EUSCI_B0 registers */
N#define EUSCI_B0_SPI_BASE                     (PERIPH_BASE +0x00002000)          /*!< Base address of module EUSCI_B0 registers */
N#define EUSCI_B1_BASE                         (PERIPH_BASE +0x00002400)          /*!< Base address of module EUSCI_B1 registers */
N#define EUSCI_B1_SPI_BASE                     (PERIPH_BASE +0x00002400)          /*!< Base address of module EUSCI_B1 registers */
N#define EUSCI_B2_BASE                         (PERIPH_BASE +0x00002800)          /*!< Base address of module EUSCI_B2 registers */
N#define EUSCI_B2_SPI_BASE                     (PERIPH_BASE +0x00002800)          /*!< Base address of module EUSCI_B2 registers */
N#define EUSCI_B3_BASE                         (PERIPH_BASE +0x00002C00)          /*!< Base address of module EUSCI_B3 registers */
N#define EUSCI_B3_SPI_BASE                     (PERIPH_BASE +0x00002C00)          /*!< Base address of module EUSCI_B3 registers */
N#define FLCTL_BASE                            (PERIPH_BASE +0x00011000)          /*!< Base address of module FLCTL registers */
N#define FL_BOOTOVER_MAILBOX_BASE                 ((uint32_t)0x00200000)          /*!< Base address of module FL_BOOTOVER_MAILBOX registers */
N#define PCM_BASE                              (PERIPH_BASE +0x00010000)          /*!< Base address of module PCM registers */
N#define PMAP_BASE                             (PERIPH_BASE +0x00005000)          /*!< Base address of module PMAP registers */
N#define PSS_BASE                              (PERIPH_BASE +0x00010800)          /*!< Base address of module PSS registers */
N#define REF_A_BASE                            (PERIPH_BASE +0x00003000)          /*!< Base address of module REF_A registers */
N#define RSTCTL_BASE                           (PERIPH_BASE2+0x00042000)          /*!< Base address of module RSTCTL registers */
N#define RTC_C_BASE                            (PERIPH_BASE +0x00004400)          /*!< Base address of module RTC_C registers */
N#define RTC_C_BCD_BASE                        (PERIPH_BASE +0x00004400)          /*!< Base address of module RTC_C registers */
N#define SYSCTL_BASE                           (PERIPH_BASE2+0x00043000)          /*!< Base address of module SYSCTL registers */
N#define TIMER32_BASE                          (PERIPH_BASE +0x0000C000)          /*!< Base address of module TIMER32 registers */
N#define TIMER_A0_BASE                         (PERIPH_BASE +0x00000000)          /*!< Base address of module TIMER_A0 registers */
N#define TIMER_A1_BASE                         (PERIPH_BASE +0x00000400)          /*!< Base address of module TIMER_A1 registers */
N#define TIMER_A2_BASE                         (PERIPH_BASE +0x00000800)          /*!< Base address of module TIMER_A2 registers */
N#define TIMER_A3_BASE                         (PERIPH_BASE +0x00000C00)          /*!< Base address of module TIMER_A3 registers */
N#define TLV_BASE                                 ((uint32_t)0x00201000)          /*!< Base address of module TLV registers */
N#define WDT_A_BASE                            (PERIPH_BASE +0x00004800)          /*!< Base address of module WDT_A registers */
N
N
N/*@}*/ /* end of group MSP432P401R_MemoryMap */
N
N/******************************************************************************
N* Definitions for bit band access                                             *
N******************************************************************************/
N#define BITBAND_SRAM_BASE                     ((uint32_t)(0x22000000))
N#define BITBAND_PERI_BASE                     ((uint32_t)(0x42000000))
N
N/* SRAM allows 32 bit bit band access */
N#define BITBAND_SRAM(x, b)  (*((__IO uint32_t *) (BITBAND_SRAM_BASE +  (((uint32_t)(volatile const uint32_t *)&(x)) - SRAM_BASE  )*32 + (b)*4)))
N/* peripherals with 8 bit or 16 bit register access allow only 8 bit or 16 bit bit band access, so cast to 8 bit always */
N#define BITBAND_PERI(x, b)  (*((__IO  uint8_t *) (BITBAND_PERI_BASE +  (((uint32_t)(volatile const uint32_t *)&(x)) - PERIPH_BASE)*32 + (b)*4)))
N
N/******************************************************************************
N* Peripheral register definitions                                             *
N******************************************************************************/
N/** @addtogroup MSP432P401R_Peripherals MSP432P401R Peripherals
N  MSP432P401R Device Specific Peripheral registers structures
N  @{
N*/
N
N/* -------  Start of section using anonymous unions and disabling warnings  ------- */
N#if defined (__CC_ARM)
X#if 0L
S  #pragma push
S  #pragma anon_unions
S#elif defined (__ICCARM__)
X#elif 0L
S  #pragma language=extended
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 0L && (__ARMCC_VERSION >= 6010050)
S  #pragma clang diagnostic push
S  #pragma clang diagnostic ignored "-Wc11-extensions"
S#elif defined (__GNUC__)
X#elif 0L
S  /* anonymous unions are enabled by default */
N#elif defined (__TI_ARM__)
X#elif 1L
N  /* anonymous unions are enabled by default */
N#else
S  #warning Not supported compiler type
N#endif
N
N
N/******************************************************************************
N* ADC14 Registers
N******************************************************************************/
N/** @addtogroup ADC14 MSP432P401R (ADC14)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t CTL0;                                                            /*!< Control 0 Register */
X  volatile uint32_t CTL0;                                                             
N  __IO uint32_t CTL1;                                                            /*!< Control 1 Register */
X  volatile uint32_t CTL1;                                                             
N  __IO uint32_t LO0;                                                             /*!< Window Comparator Low Threshold 0 Register */
X  volatile uint32_t LO0;                                                              
N  __IO uint32_t HI0;                                                             /*!< Window Comparator High Threshold 0 Register */
X  volatile uint32_t HI0;                                                              
N  __IO uint32_t LO1;                                                             /*!< Window Comparator Low Threshold 1 Register */
X  volatile uint32_t LO1;                                                              
N  __IO uint32_t HI1;                                                             /*!< Window Comparator High Threshold 1 Register */
X  volatile uint32_t HI1;                                                              
N  __IO uint32_t MCTL[32];                                                        /*!< Conversion Memory Control Register */
X  volatile uint32_t MCTL[32];                                                         
N  __IO uint32_t MEM[32];                                                         /*!< Conversion Memory Register */
X  volatile uint32_t MEM[32];                                                          
N       uint32_t RESERVED0[9];
N  __IO uint32_t IER0;                                                            /*!< Interrupt Enable 0 Register */
X  volatile uint32_t IER0;                                                             
N  __IO uint32_t IER1;                                                            /*!< Interrupt Enable 1 Register */
X  volatile uint32_t IER1;                                                             
N  __I  uint32_t IFGR0;                                                           /*!< Interrupt Flag 0 Register */
X  volatile const  uint32_t IFGR0;                                                            
N  __I  uint32_t IFGR1;                                                           /*!< Interrupt Flag 1 Register */
X  volatile const  uint32_t IFGR1;                                                            
N  __O  uint32_t CLRIFGR0;                                                        /*!< Clear Interrupt Flag 0 Register */
X  volatile  uint32_t CLRIFGR0;                                                         
N  __IO uint32_t CLRIFGR1;                                                        /*!< Clear Interrupt Flag 1 Register */
X  volatile uint32_t CLRIFGR1;                                                         
N  __IO uint32_t IV;                                                              /*!< Interrupt Vector Register */
X  volatile uint32_t IV;                                                               
N} ADC14_Type;
N
N/*@}*/ /* end of group ADC14 */
N
N
N/******************************************************************************
N* AES256 Registers
N******************************************************************************/
N/** @addtogroup AES256 MSP432P401R (AES256)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTL0;                                                            /*!< AES Accelerator Control Register 0 */
X  volatile uint16_t CTL0;                                                             
N  __IO uint16_t CTL1;                                                            /*!< AES Accelerator Control Register 1 */
X  volatile uint16_t CTL1;                                                             
N  __IO uint16_t STAT;                                                            /*!< AES Accelerator Status Register */
X  volatile uint16_t STAT;                                                             
N  __O  uint16_t KEY;                                                             /*!< AES Accelerator Key Register */
X  volatile  uint16_t KEY;                                                              
N  __O  uint16_t DIN;                                                             /*!< AES Accelerator Data In Register */
X  volatile  uint16_t DIN;                                                              
N  __O  uint16_t DOUT;                                                            /*!< AES Accelerator Data Out Register */
X  volatile  uint16_t DOUT;                                                             
N  __O  uint16_t XDIN;                                                            /*!< AES Accelerator XORed Data In Register */
X  volatile  uint16_t XDIN;                                                             
N  __O  uint16_t XIN;                                                             /*!< AES Accelerator XORed Data In Register */
X  volatile  uint16_t XIN;                                                              
N} AES256_Type;
N
N/*@}*/ /* end of group AES256 */
N
N
N/******************************************************************************
N* CAPTIO Registers
N******************************************************************************/
N/** @addtogroup CAPTIO MSP432P401R (CAPTIO)
N  @{
N*/
Ntypedef struct {
N       uint16_t RESERVED0[7];
N  __IO uint16_t CTL;                                                             /*!< Capacitive Touch IO x Control Register */
X  volatile uint16_t CTL;                                                              
N} CAPTIO_Type;
N
N/*@}*/ /* end of group CAPTIO */
N
N
N/******************************************************************************
N* COMP_E Registers
N******************************************************************************/
N/** @addtogroup COMP_E MSP432P401R (COMP_E)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTL0;                                                            /*!< Comparator Control Register 0 */
X  volatile uint16_t CTL0;                                                             
N  __IO uint16_t CTL1;                                                            /*!< Comparator Control Register 1 */
X  volatile uint16_t CTL1;                                                             
N  __IO uint16_t CTL2;                                                            /*!< Comparator Control Register 2 */
X  volatile uint16_t CTL2;                                                             
N  __IO uint16_t CTL3;                                                            /*!< Comparator Control Register 3 */
X  volatile uint16_t CTL3;                                                             
N       uint16_t RESERVED0[2];
N  __IO uint16_t INT;                                                             /*!< Comparator Interrupt Control Register */
X  volatile uint16_t INT;                                                              
N  __I  uint16_t IV;                                                              /*!< Comparator Interrupt Vector Word Register */
X  volatile const  uint16_t IV;                                                               
N} COMP_E_Type;
N
N/*@}*/ /* end of group COMP_E */
N
N
N/******************************************************************************
N* CRC32 Registers
N******************************************************************************/
N/** @addtogroup CRC32 MSP432P401R (CRC32)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t DI32;                                                            /*!< Data Input for CRC32 Signature Computation */
X  volatile uint16_t DI32;                                                             
N       uint16_t RESERVED0;
N  __IO uint16_t DIRB32;                                                          /*!< Data In Reverse for CRC32 Computation */
X  volatile uint16_t DIRB32;                                                           
N       uint16_t RESERVED1;
N  __IO uint16_t INIRES32_LO;                                                     /*!< CRC32 Initialization and Result, lower 16 bits */
X  volatile uint16_t INIRES32_LO;                                                      
N  __IO uint16_t INIRES32_HI;                                                     /*!< CRC32 Initialization and Result, upper 16 bits */
X  volatile uint16_t INIRES32_HI;                                                      
N  __IO uint16_t RESR32_LO;                                                       /*!< CRC32 Result Reverse, lower 16 bits */
X  volatile uint16_t RESR32_LO;                                                        
N  __IO uint16_t RESR32_HI;                                                       /*!< CRC32 Result Reverse, Upper 16 bits */
X  volatile uint16_t RESR32_HI;                                                        
N  __IO uint16_t DI16;                                                            /*!< Data Input for CRC16 computation */
X  volatile uint16_t DI16;                                                             
N       uint16_t RESERVED2;
N  __IO uint16_t DIRB16;                                                          /*!< CRC16 Data In Reverse */
X  volatile uint16_t DIRB16;                                                           
N       uint16_t RESERVED3;
N  __IO uint16_t INIRES16;                                                        /*!< CRC16 Initialization and Result register */
X  volatile uint16_t INIRES16;                                                         
N       uint16_t RESERVED4[2];
N  __IO uint16_t RESR16;                                                          /*!< CRC16 Result Reverse */
X  volatile uint16_t RESR16;                                                           
N} CRC32_Type;
N
N/*@}*/ /* end of group CRC32 */
N
N
N/******************************************************************************
N* CS Registers
N******************************************************************************/
N/** @addtogroup CS MSP432P401R (CS)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t KEY;                                                             /*!< Key Register */
X  volatile uint32_t KEY;                                                              
N  __IO uint32_t CTL0;                                                            /*!< Control 0 Register */
X  volatile uint32_t CTL0;                                                             
N  __IO uint32_t CTL1;                                                            /*!< Control 1 Register */
X  volatile uint32_t CTL1;                                                             
N  __IO uint32_t CTL2;                                                            /*!< Control 2 Register */
X  volatile uint32_t CTL2;                                                             
N  __IO uint32_t CTL3;                                                            /*!< Control 3 Register */
X  volatile uint32_t CTL3;                                                             
N       uint32_t RESERVED0[7];
N  __IO uint32_t CLKEN;                                                           /*!< Clock Enable Register */
X  volatile uint32_t CLKEN;                                                            
N  __I  uint32_t STAT;                                                            /*!< Status Register */
X  volatile const  uint32_t STAT;                                                             
N       uint32_t RESERVED1[2];
N  __IO uint32_t IE;                                                              /*!< Interrupt Enable Register */
X  volatile uint32_t IE;                                                               
N       uint32_t RESERVED2;
N  __I  uint32_t IFG;                                                             /*!< Interrupt Flag Register */
X  volatile const  uint32_t IFG;                                                              
N       uint32_t RESERVED3;
N  __O  uint32_t CLRIFG;                                                          /*!< Clear Interrupt Flag Register */
X  volatile  uint32_t CLRIFG;                                                           
N       uint32_t RESERVED4;
N  __O  uint32_t SETIFG;                                                          /*!< Set Interrupt Flag Register */
X  volatile  uint32_t SETIFG;                                                           
N       uint32_t RESERVED5;
N  __IO uint32_t DCOERCAL0;                                                       /*!< DCO External Resistor Cailbration 0 Register */
X  volatile uint32_t DCOERCAL0;                                                        
N  __IO uint32_t DCOERCAL1;                                                       /*!< DCO External Resistor Calibration 1 Register */
X  volatile uint32_t DCOERCAL1;                                                        
N} CS_Type;
N
N/*@}*/ /* end of group CS */
N
N
N/******************************************************************************
N* DIO Registers
N******************************************************************************/
N/** @addtogroup DIO MSP432P401R (DIO)
N  @{
N*/
Ntypedef struct {
N  union {
N    __I uint16_t IN;                                                              /*!< Port Pair Input */
X    volatile const uint16_t IN;                                                               
N    struct {
N      __I uint8_t IN_L;                                                           /*!< Low Port Input */
X      volatile const uint8_t IN_L;                                                            
N      __I uint8_t IN_H;                                                           /*!< High Port Input */
X      volatile const uint8_t IN_H;                                                            
N    };
N  };
N  union {
N    __IO uint16_t OUT;                                                            /*!< Port Pair Output */
X    volatile uint16_t OUT;                                                             
N    struct {
N      __IO uint8_t OUT_L;                                                         /*!< Low Port Output */
X      volatile uint8_t OUT_L;                                                          
N      __IO uint8_t OUT_H;                                                         /*!< High Port Output */
X      volatile uint8_t OUT_H;                                                          
N    };
N  };
N  union {
N    __IO uint16_t DIR;                                                            /*!< Port Pair Direction */
X    volatile uint16_t DIR;                                                             
N    struct {
N      __IO uint8_t DIR_L;                                                         /*!< Low Port Direction */
X      volatile uint8_t DIR_L;                                                          
N      __IO uint8_t DIR_H;                                                         /*!< High Port Direction */
X      volatile uint8_t DIR_H;                                                          
N    };
N  };
N  union {
N    __IO uint16_t REN;                                                            /*!< Port Pair Resistor Enable */
X    volatile uint16_t REN;                                                             
N    struct {
N      __IO uint8_t REN_L;                                                         /*!< Low Port Resistor Enable */
X      volatile uint8_t REN_L;                                                          
N      __IO uint8_t REN_H;                                                         /*!< High Port Resistor Enable */
X      volatile uint8_t REN_H;                                                          
N    };
N  };
N  union {
N    __IO uint16_t DS;                                                             /*!< Port Pair Drive Strength */
X    volatile uint16_t DS;                                                              
N    struct {
N      __IO uint8_t DS_L;                                                          /*!< Low Port Drive Strength */
X      volatile uint8_t DS_L;                                                           
N      __IO uint8_t DS_H;                                                          /*!< High Port Drive Strength */
X      volatile uint8_t DS_H;                                                           
N    };
N  };
N  union {
N    __IO uint16_t SEL0;                                                           /*!< Port Pair Select 0 */
X    volatile uint16_t SEL0;                                                            
N    struct {
N      __IO uint8_t SEL0_L;                                                        /*!< Low Port Select 0 */
X      volatile uint8_t SEL0_L;                                                         
N      __IO uint8_t SEL0_H;                                                        /*!< High Port Select 0 */
X      volatile uint8_t SEL0_H;                                                         
N    };
N  };
N  union {
N    __IO uint16_t SEL1;                                                           /*!< Port Pair Select 1 */
X    volatile uint16_t SEL1;                                                            
N    struct {
N      __IO uint8_t SEL1_L;                                                        /*!< Low Port Select 1 */
X      volatile uint8_t SEL1_L;                                                         
N      __IO uint8_t SEL1_H;                                                        /*!< High Port Select 1 */
X      volatile uint8_t SEL1_H;                                                         
N    };
N  };
N  __I  uint16_t IV_L;                                                             /*!< Low Port Interrupt Vector Value */
X  volatile const  uint16_t IV_L;                                                              
N  uint16_t  RESERVED0[3];
N  union {
N    __IO uint16_t SELC;                                                           /*!< Port Pair Complement Select */
X    volatile uint16_t SELC;                                                            
N    struct {
N      __IO uint8_t SELC_L;                                                        /*!< Low Port Complement Select */
X      volatile uint8_t SELC_L;                                                         
N      __IO uint8_t SELC_H;                                                        /*!< High Port Complement Select */
X      volatile uint8_t SELC_H;                                                         
N    };
N  };
N  union {
N    __IO uint16_t IES;                                                            /*!< Port Pair Interrupt Edge Select */
X    volatile uint16_t IES;                                                             
N    struct {
N      __IO uint8_t IES_L;                                                         /*!< Low Port Interrupt Edge Select */
X      volatile uint8_t IES_L;                                                          
N      __IO uint8_t IES_H;                                                         /*!< High Port Interrupt Edge Select */
X      volatile uint8_t IES_H;                                                          
N    };
N  };
N  union {
N    __IO uint16_t IE;                                                             /*!< Port Pair Interrupt Enable */
X    volatile uint16_t IE;                                                              
N    struct {
N      __IO uint8_t IE_L;                                                          /*!< Low Port Interrupt Enable */
X      volatile uint8_t IE_L;                                                           
N      __IO uint8_t IE_H;                                                          /*!< High Port Interrupt Enable */
X      volatile uint8_t IE_H;                                                           
N    };
N  };
N  union {
N    __IO uint16_t IFG;                                                            /*!< Port Pair Interrupt Flag */
X    volatile uint16_t IFG;                                                             
N    struct {
N      __IO uint8_t IFG_L;                                                         /*!< Low Port Interrupt Flag */
X      volatile uint8_t IFG_L;                                                          
N      __IO uint8_t IFG_H;                                                         /*!< High Port Interrupt Flag */
X      volatile uint8_t IFG_H;                                                          
N    };
N  };
N  __I uint16_t IV_H;                                                              /*!< High Port Interrupt Vector Value */
X  volatile const uint16_t IV_H;                                                               
N} DIO_PORT_Interruptable_Type;
N
Ntypedef struct {
N  union {
N    __I uint16_t IN;                                                              /*!< Port Pair Input */
X    volatile const uint16_t IN;                                                               
N    struct {
N      __I uint8_t IN_L;                                                           /*!< Low Port Input */
X      volatile const uint8_t IN_L;                                                            
N      __I uint8_t IN_H;                                                           /*!< High Port Input */
X      volatile const uint8_t IN_H;                                                            
N    };
N  };
N  union {
N    __IO uint16_t OUT;                                                            /*!< Port Pair Output */
X    volatile uint16_t OUT;                                                             
N    struct {
N      __IO uint8_t OUT_L;                                                         /*!< Low Port Output */
X      volatile uint8_t OUT_L;                                                          
N      __IO uint8_t OUT_H;                                                         /*!< High Port Output */
X      volatile uint8_t OUT_H;                                                          
N    };
N  };
N  union {
N    __IO uint16_t DIR;                                                            /*!< Port Pair Direction */
X    volatile uint16_t DIR;                                                             
N    struct {
N      __IO uint8_t DIR_L;                                                         /*!< Low Port Direction */
X      volatile uint8_t DIR_L;                                                          
N      __IO uint8_t DIR_H;                                                         /*!< High Port Direction */
X      volatile uint8_t DIR_H;                                                          
N    };
N  };
N  union {
N    __IO uint16_t REN;                                                            /*!< Port Pair Resistor Enable */
X    volatile uint16_t REN;                                                             
N    struct {
N      __IO uint8_t REN_L;                                                         /*!< Low Port Resistor Enable */
X      volatile uint8_t REN_L;                                                          
N      __IO uint8_t REN_H;                                                         /*!< High Port Resistor Enable */
X      volatile uint8_t REN_H;                                                          
N    };
N  };
N  union {
N    __IO uint16_t DS;                                                             /*!< Port Pair Drive Strength */
X    volatile uint16_t DS;                                                              
N    struct {
N      __IO uint8_t DS_L;                                                          /*!< Low Port Drive Strength */
X      volatile uint8_t DS_L;                                                           
N      __IO uint8_t DS_H;                                                          /*!< High Port Drive Strength */
X      volatile uint8_t DS_H;                                                           
N    };
N  };
N  union {
N    __IO uint16_t SEL0;                                                           /*!< Port Pair Select 0 */
X    volatile uint16_t SEL0;                                                            
N    struct {
N      __IO uint8_t SEL0_L;                                                        /*!< Low Port Select 0 */
X      volatile uint8_t SEL0_L;                                                         
N      __IO uint8_t SEL0_H;                                                        /*!< High Port Select 0 */
X      volatile uint8_t SEL0_H;                                                         
N    };
N  };
N  union {
N    __IO uint16_t SEL1;                                                           /*!< Port Pair Select 1 */
X    volatile uint16_t SEL1;                                                            
N    struct {
N      __IO uint8_t SEL1_L;                                                        /*!< Low Port Select 1 */
X      volatile uint8_t SEL1_L;                                                         
N      __IO uint8_t SEL1_H;                                                        /*!< High Port Select 1 */
X      volatile uint8_t SEL1_H;                                                         
N    };
N  };
N  uint16_t  RESERVED0[4];
N  union {
N    __IO uint16_t SELC;                                                           /*!< Port Pair Complement Select */
X    volatile uint16_t SELC;                                                            
N    struct {
N      __IO uint8_t SELC_L;                                                        /*!< Low Port Complement Select */
X      volatile uint8_t SELC_L;                                                         
N      __IO uint8_t SELC_H;                                                        /*!< High Port Complement Select */
X      volatile uint8_t SELC_H;                                                         
N    };
N  };
N} DIO_PORT_Not_Interruptable_Type;
N
N
Ntypedef struct {
N  __I uint8_t IN;                                                                 /*!< Port Input */
X  volatile const uint8_t IN;                                                                  
N  uint8_t RESERVED0;
N  __IO uint8_t OUT;                                                               /*!< Port Output */
X  volatile uint8_t OUT;                                                                
N  uint8_t RESERVED1;
N  __IO uint8_t DIR;                                                               /*!< Port Direction */
X  volatile uint8_t DIR;                                                                
N  uint8_t RESERVED2;
N  __IO uint8_t REN;                                                               /*!< Port Resistor Enable */
X  volatile uint8_t REN;                                                                
N  uint8_t RESERVED3;
N  __IO uint8_t DS;                                                                /*!< Port Drive Strength */
X  volatile uint8_t DS;                                                                 
N  uint8_t RESERVED4;
N  __IO uint8_t SEL0;                                                              /*!< Port Select 0 */
X  volatile uint8_t SEL0;                                                               
N  uint8_t RESERVED5;
N  __IO uint8_t SEL1;                                                              /*!< Port Select 1 */
X  volatile uint8_t SEL1;                                                               
N  uint8_t RESERVED6;
N  __I  uint16_t IV;                                                               /*!< Port Interrupt Vector Value */
X  volatile const  uint16_t IV;                                                                
N  uint8_t RESERVED7[6];
N  __IO uint8_t SELC;                                                              /*!< Port Complement Select */
X  volatile uint8_t SELC;                                                               
N  uint8_t RESERVED8;
N  __IO uint8_t IES;                                                               /*!< Port Interrupt Edge Select */
X  volatile uint8_t IES;                                                                
N  uint8_t RESERVED9;
N  __IO uint8_t IE;                                                                /*!< Port Interrupt Enable */
X  volatile uint8_t IE;                                                                 
N  uint8_t RESERVED10;
N  __IO uint8_t IFG;                                                               /*!< Port Interrupt Flag */
X  volatile uint8_t IFG;                                                                
N  uint8_t RESERVED11;
N} DIO_PORT_Odd_Interruptable_Type;
N
Ntypedef struct {
N  uint8_t RESERVED0;
N  __I uint8_t IN;                                                                 /*!< Port Input */
X  volatile const uint8_t IN;                                                                  
N  uint8_t RESERVED1;
N  __IO uint8_t OUT;                                                               /*!< Port Output */
X  volatile uint8_t OUT;                                                                
N  uint8_t RESERVED2;
N  __IO uint8_t DIR;                                                               /*!< Port Direction */
X  volatile uint8_t DIR;                                                                
N  uint8_t RESERVED3;
N  __IO uint8_t REN;                                                               /*!< Port Resistor Enable */
X  volatile uint8_t REN;                                                                
N  uint8_t RESERVED4;
N  __IO uint8_t DS;                                                                /*!< Port Drive Strength */
X  volatile uint8_t DS;                                                                 
N  uint8_t RESERVED5;
N  __IO uint8_t SEL0;                                                              /*!< Port Select 0 */
X  volatile uint8_t SEL0;                                                               
N  uint8_t RESERVED6;
N  __IO uint8_t SEL1;                                                              /*!< Port Select 1 */
X  volatile uint8_t SEL1;                                                               
N  uint8_t RESERVED7[9];
N  __IO uint8_t SELC;                                                              /*!< Port Complement Select */
X  volatile uint8_t SELC;                                                               
N  uint8_t RESERVED8;
N  __IO uint8_t IES;                                                               /*!< Port Interrupt Edge Select */
X  volatile uint8_t IES;                                                                
N  uint8_t RESERVED9;
N  __IO uint8_t IE;                                                                /*!< Port Interrupt Enable */
X  volatile uint8_t IE;                                                                 
N  uint8_t RESERVED10;
N  __IO uint8_t IFG;                                                               /*!< Port Interrupt Flag */
X  volatile uint8_t IFG;                                                                
N  __I uint16_t IV;                                                                /*!< Port Interrupt Vector Value */
X  volatile const uint16_t IV;                                                                 
N} DIO_PORT_Even_Interruptable_Type;
N
N/*@}*/ /* end of group MSP432P401R_DIO */
N
N
N/******************************************************************************
N* DMA Registers
N******************************************************************************/
N/** @addtogroup DMA MSP432P401R (DMA)
N  @{
N*/
Ntypedef struct {
N  __I  uint32_t DEVICE_CFG;                                                      /*!< Device Configuration Status */
X  volatile const  uint32_t DEVICE_CFG;                                                       
N  __IO uint32_t SW_CHTRIG;                                                       /*!< Software Channel Trigger Register */
X  volatile uint32_t SW_CHTRIG;                                                        
N       uint32_t RESERVED0[2];
N  __IO uint32_t CH_SRCCFG[32];                                                   /*!< Channel n Source Configuration Register */
X  volatile uint32_t CH_SRCCFG[32];                                                    
N       uint32_t RESERVED1[28];
N  __IO uint32_t INT1_SRCCFG;                                                     /*!< Interrupt 1 Source Channel Configuration */
X  volatile uint32_t INT1_SRCCFG;                                                      
N  __IO uint32_t INT2_SRCCFG;                                                     /*!< Interrupt 2 Source Channel Configuration Register */
X  volatile uint32_t INT2_SRCCFG;                                                      
N  __IO uint32_t INT3_SRCCFG;                                                     /*!< Interrupt 3 Source Channel Configuration Register */
X  volatile uint32_t INT3_SRCCFG;                                                      
N       uint32_t RESERVED2;
N  __I  uint32_t INT0_SRCFLG;                                                     /*!< Interrupt 0 Source Channel Flag Register */
X  volatile const  uint32_t INT0_SRCFLG;                                                      
N  __O  uint32_t INT0_CLRFLG;                                                     /*!< Interrupt 0 Source Channel Clear Flag Register */
X  volatile  uint32_t INT0_CLRFLG;                                                      
N} DMA_Channel_Type;
N
Ntypedef struct {
N  __I  uint32_t STAT;                                                            /*!< Status Register */
X  volatile const  uint32_t STAT;                                                             
N  __O  uint32_t CFG;                                                             /*!< Configuration Register */
X  volatile  uint32_t CFG;                                                              
N  __IO uint32_t CTLBASE;                                                         /*!< Channel Control Data Base Pointer Register */
X  volatile uint32_t CTLBASE;                                                          
N  __I  uint32_t ALTBASE;                                                         /*!< Channel Alternate Control Data Base Pointer Register */
X  volatile const  uint32_t ALTBASE;                                                          
N  __I  uint32_t WAITSTAT;                                                        /*!< Channel Wait on Request Status Register */
X  volatile const  uint32_t WAITSTAT;                                                         
N  __O  uint32_t SWREQ;                                                           /*!< Channel Software Request Register */
X  volatile  uint32_t SWREQ;                                                            
N  __IO uint32_t USEBURSTSET;                                                     /*!< Channel Useburst Set Register */
X  volatile uint32_t USEBURSTSET;                                                      
N  __O  uint32_t USEBURSTCLR;                                                     /*!< Channel Useburst Clear Register */
X  volatile  uint32_t USEBURSTCLR;                                                      
N  __IO uint32_t REQMASKSET;                                                      /*!< Channel Request Mask Set Register */
X  volatile uint32_t REQMASKSET;                                                       
N  __O  uint32_t REQMASKCLR;                                                      /*!< Channel Request Mask Clear Register */
X  volatile  uint32_t REQMASKCLR;                                                       
N  __IO uint32_t ENASET;                                                          /*!< Channel Enable Set Register */
X  volatile uint32_t ENASET;                                                           
N  __O  uint32_t ENACLR;                                                          /*!< Channel Enable Clear Register */
X  volatile  uint32_t ENACLR;                                                           
N  __IO uint32_t ALTSET;                                                          /*!< Channel Primary-Alternate Set Register */
X  volatile uint32_t ALTSET;                                                           
N  __O  uint32_t ALTCLR;                                                          /*!< Channel Primary-Alternate Clear Register */
X  volatile  uint32_t ALTCLR;                                                           
N  __IO uint32_t PRIOSET;                                                         /*!< Channel Priority Set Register */
X  volatile uint32_t PRIOSET;                                                          
N  __O  uint32_t PRIOCLR;                                                         /*!< Channel Priority Clear Register */
X  volatile  uint32_t PRIOCLR;                                                          
N       uint32_t RESERVED4[3];
N  __IO uint32_t ERRCLR;                                                          /*!< Bus Error Clear Register */
X  volatile uint32_t ERRCLR;                                                           
N} DMA_Control_Type;
N
N/*@}*/ /* end of group DMA */
N
N
N/******************************************************************************
N* EUSCI_A Registers
N******************************************************************************/
N/** @addtogroup EUSCI_A MSP432P401R (EUSCI_A)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTLW0;                                                           /*!< eUSCI_Ax Control Word Register 0 */
X  volatile uint16_t CTLW0;                                                            
N  __IO uint16_t CTLW1;                                                           /*!< eUSCI_Ax Control Word Register 1 */
X  volatile uint16_t CTLW1;                                                            
N       uint16_t RESERVED0;
N  __IO uint16_t BRW;                                                             /*!< eUSCI_Ax Baud Rate Control Word Register */
X  volatile uint16_t BRW;                                                              
N  __IO uint16_t MCTLW;                                                           /*!< eUSCI_Ax Modulation Control Word Register */
X  volatile uint16_t MCTLW;                                                            
N  __IO uint16_t STATW;                                                           /*!< eUSCI_Ax Status Register */
X  volatile uint16_t STATW;                                                            
N  __I  uint16_t RXBUF;                                                           /*!< eUSCI_Ax Receive Buffer Register */
X  volatile const  uint16_t RXBUF;                                                            
N  __IO uint16_t TXBUF;                                                           /*!< eUSCI_Ax Transmit Buffer Register */
X  volatile uint16_t TXBUF;                                                            
N  __IO uint16_t ABCTL;                                                           /*!< eUSCI_Ax Auto Baud Rate Control Register */
X  volatile uint16_t ABCTL;                                                            
N  __IO uint16_t IRCTL;                                                           /*!< eUSCI_Ax IrDA Control Word Register */
X  volatile uint16_t IRCTL;                                                            
N       uint16_t RESERVED1[3];
N  __IO uint16_t IE;                                                              /*!< eUSCI_Ax Interrupt Enable Register */
X  volatile uint16_t IE;                                                               
N  __IO uint16_t IFG;                                                             /*!< eUSCI_Ax Interrupt Flag Register */
X  volatile uint16_t IFG;                                                              
N  __I  uint16_t IV;                                                              /*!< eUSCI_Ax Interrupt Vector Register */
X  volatile const  uint16_t IV;                                                               
N} EUSCI_A_Type;
N
N/*@}*/ /* end of group EUSCI_A */
N
N/** @addtogroup EUSCI_A_SPI MSP432P401R (EUSCI_A_SPI)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTLW0;                                                           /*!< eUSCI_Ax Control Word Register 0 */
X  volatile uint16_t CTLW0;                                                            
N       uint16_t RESERVED0[2];
N  __IO uint16_t BRW;                                                             /*!< eUSCI_Ax Bit Rate Control Register 1 */
X  volatile uint16_t BRW;                                                              
N       uint16_t RESERVED1;
N  __IO uint16_t STATW; 
X  volatile uint16_t STATW; 
N  __I  uint16_t RXBUF;                                                           /*!< eUSCI_Ax Receive Buffer Register */
X  volatile const  uint16_t RXBUF;                                                            
N  __IO uint16_t TXBUF;                                                           /*!< eUSCI_Ax Transmit Buffer Register */
X  volatile uint16_t TXBUF;                                                            
N       uint16_t RESERVED2[5];
N  __IO uint16_t IE;                                                              /*!< eUSCI_Ax Interrupt Enable Register */
X  volatile uint16_t IE;                                                               
N  __IO uint16_t IFG;                                                             /*!< eUSCI_Ax Interrupt Flag Register */
X  volatile uint16_t IFG;                                                              
N  __I  uint16_t IV;                                                              /*!< eUSCI_Ax Interrupt Vector Register */
X  volatile const  uint16_t IV;                                                               
N} EUSCI_A_SPI_Type;
N
N/*@}*/ /* end of group EUSCI_A_SPI */
N
N
N/******************************************************************************
N* EUSCI_B Registers
N******************************************************************************/
N/** @addtogroup EUSCI_B MSP432P401R (EUSCI_B)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTLW0;                                                           /*!< eUSCI_Bx Control Word Register 0 */
X  volatile uint16_t CTLW0;                                                            
N  __IO uint16_t CTLW1;                                                           /*!< eUSCI_Bx Control Word Register 1 */
X  volatile uint16_t CTLW1;                                                            
N       uint16_t RESERVED0;
N  __IO uint16_t BRW;                                                             /*!< eUSCI_Bx Baud Rate Control Word Register */
X  volatile uint16_t BRW;                                                              
N  __IO uint16_t STATW;                                                           /*!< eUSCI_Bx Status Register */
X  volatile uint16_t STATW;                                                            
N  __IO uint16_t TBCNT;                                                           /*!< eUSCI_Bx Byte Counter Threshold Register */
X  volatile uint16_t TBCNT;                                                            
N  __I  uint16_t RXBUF;                                                           /*!< eUSCI_Bx Receive Buffer Register */
X  volatile const  uint16_t RXBUF;                                                            
N  __IO uint16_t TXBUF;                                                           /*!< eUSCI_Bx Transmit Buffer Register */
X  volatile uint16_t TXBUF;                                                            
N       uint16_t RESERVED1[2];
N  __IO uint16_t I2COA0;                                                          /*!< eUSCI_Bx I2C Own Address 0 Register */
X  volatile uint16_t I2COA0;                                                           
N  __IO uint16_t I2COA1;                                                          /*!< eUSCI_Bx I2C Own Address 1 Register */
X  volatile uint16_t I2COA1;                                                           
N  __IO uint16_t I2COA2;                                                          /*!< eUSCI_Bx I2C Own Address 2 Register */
X  volatile uint16_t I2COA2;                                                           
N  __IO uint16_t I2COA3;                                                          /*!< eUSCI_Bx I2C Own Address 3 Register */
X  volatile uint16_t I2COA3;                                                           
N  __I  uint16_t ADDRX;                                                           /*!< eUSCI_Bx I2C Received Address Register */
X  volatile const  uint16_t ADDRX;                                                            
N  __IO uint16_t ADDMASK;                                                         /*!< eUSCI_Bx I2C Address Mask Register */
X  volatile uint16_t ADDMASK;                                                          
N  __IO uint16_t I2CSA;                                                           /*!< eUSCI_Bx I2C Slave Address Register */
X  volatile uint16_t I2CSA;                                                            
N       uint16_t RESERVED2[4];
N  __IO uint16_t IE;                                                              /*!< eUSCI_Bx Interrupt Enable Register */
X  volatile uint16_t IE;                                                               
N  __IO uint16_t IFG;                                                             /*!< eUSCI_Bx Interrupt Flag Register */
X  volatile uint16_t IFG;                                                              
N  __I  uint16_t IV;                                                              /*!< eUSCI_Bx Interrupt Vector Register */
X  volatile const  uint16_t IV;                                                               
N} EUSCI_B_Type;
N
N/*@}*/ /* end of group EUSCI_B */
N
N/** @addtogroup EUSCI_B_SPI MSP432P401R (EUSCI_B_SPI)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTLW0;                                                           /*!< eUSCI_Bx Control Word Register 0 */
X  volatile uint16_t CTLW0;                                                            
N       uint16_t RESERVED0[2];
N  __IO uint16_t BRW;                                                             /*!< eUSCI_Bx Bit Rate Control Register 1 */
X  volatile uint16_t BRW;                                                              
N  __IO uint16_t STATW; 
X  volatile uint16_t STATW; 
N       uint16_t RESERVED1;
N  __I  uint16_t RXBUF;                                                           /*!< eUSCI_Bx Receive Buffer Register */
X  volatile const  uint16_t RXBUF;                                                            
N  __IO uint16_t TXBUF;                                                           /*!< eUSCI_Bx Transmit Buffer Register */
X  volatile uint16_t TXBUF;                                                            
N       uint16_t RESERVED2[13];
N  __IO uint16_t IE;                                                              /*!< eUSCI_Bx Interrupt Enable Register */
X  volatile uint16_t IE;                                                               
N  __IO uint16_t IFG;                                                             /*!< eUSCI_Bx Interrupt Flag Register */
X  volatile uint16_t IFG;                                                              
N  __I  uint16_t IV;                                                              /*!< eUSCI_Bx Interrupt Vector Register */
X  volatile const  uint16_t IV;                                                               
N} EUSCI_B_SPI_Type;
N
N/*@}*/ /* end of group EUSCI_B_SPI */
N
N
N/******************************************************************************
N* FLCTL Registers
N******************************************************************************/
N/** @addtogroup FLCTL MSP432P401R (FLCTL)
N  @{
N*/
Ntypedef struct {
N  __I  uint32_t POWER_STAT;                                                      /*!< Power Status Register */
X  volatile const  uint32_t POWER_STAT;                                                       
N       uint32_t RESERVED0[3];
N  __IO uint32_t BANK0_RDCTL;                                                     /*!< Bank0 Read Control Register */
X  volatile uint32_t BANK0_RDCTL;                                                      
N  __IO uint32_t BANK1_RDCTL;                                                     /*!< Bank1 Read Control Register */
X  volatile uint32_t BANK1_RDCTL;                                                      
N       uint32_t RESERVED1[2];
N  __IO uint32_t RDBRST_CTLSTAT;                                                  /*!< Read Burst/Compare Control and Status Register */
X  volatile uint32_t RDBRST_CTLSTAT;                                                   
N  __IO uint32_t RDBRST_STARTADDR;                                                /*!< Read Burst/Compare Start Address Register */
X  volatile uint32_t RDBRST_STARTADDR;                                                 
N  __IO uint32_t RDBRST_LEN;                                                      /*!< Read Burst/Compare Length Register */
X  volatile uint32_t RDBRST_LEN;                                                       
N       uint32_t RESERVED2[4];
N  __IO uint32_t RDBRST_FAILADDR;                                                 /*!< Read Burst/Compare Fail Address Register */
X  volatile uint32_t RDBRST_FAILADDR;                                                  
N  __IO uint32_t RDBRST_FAILCNT;                                                  /*!< Read Burst/Compare Fail Count Register */
X  volatile uint32_t RDBRST_FAILCNT;                                                   
N       uint32_t RESERVED3[3];
N  __IO uint32_t PRG_CTLSTAT;                                                     /*!< Program Control and Status Register */
X  volatile uint32_t PRG_CTLSTAT;                                                      
N  __IO uint32_t PRGBRST_CTLSTAT;                                                 /*!< Program Burst Control and Status Register */
X  volatile uint32_t PRGBRST_CTLSTAT;                                                  
N  __IO uint32_t PRGBRST_STARTADDR;                                               /*!< Program Burst Start Address Register */
X  volatile uint32_t PRGBRST_STARTADDR;                                                
N       uint32_t RESERVED4;
N  __IO uint32_t PRGBRST_DATA0_0;                                                 /*!< Program Burst Data0 Register0 */
X  volatile uint32_t PRGBRST_DATA0_0;                                                  
N  __IO uint32_t PRGBRST_DATA0_1;                                                 /*!< Program Burst Data0 Register1 */
X  volatile uint32_t PRGBRST_DATA0_1;                                                  
N  __IO uint32_t PRGBRST_DATA0_2;                                                 /*!< Program Burst Data0 Register2 */
X  volatile uint32_t PRGBRST_DATA0_2;                                                  
N  __IO uint32_t PRGBRST_DATA0_3;                                                 /*!< Program Burst Data0 Register3 */
X  volatile uint32_t PRGBRST_DATA0_3;                                                  
N  __IO uint32_t PRGBRST_DATA1_0;                                                 /*!< Program Burst Data1 Register0 */
X  volatile uint32_t PRGBRST_DATA1_0;                                                  
N  __IO uint32_t PRGBRST_DATA1_1;                                                 /*!< Program Burst Data1 Register1 */
X  volatile uint32_t PRGBRST_DATA1_1;                                                  
N  __IO uint32_t PRGBRST_DATA1_2;                                                 /*!< Program Burst Data1 Register2 */
X  volatile uint32_t PRGBRST_DATA1_2;                                                  
N  __IO uint32_t PRGBRST_DATA1_3;                                                 /*!< Program Burst Data1 Register3 */
X  volatile uint32_t PRGBRST_DATA1_3;                                                  
N  __IO uint32_t PRGBRST_DATA2_0;                                                 /*!< Program Burst Data2 Register0 */
X  volatile uint32_t PRGBRST_DATA2_0;                                                  
N  __IO uint32_t PRGBRST_DATA2_1;                                                 /*!< Program Burst Data2 Register1 */
X  volatile uint32_t PRGBRST_DATA2_1;                                                  
N  __IO uint32_t PRGBRST_DATA2_2;                                                 /*!< Program Burst Data2 Register2 */
X  volatile uint32_t PRGBRST_DATA2_2;                                                  
N  __IO uint32_t PRGBRST_DATA2_3;                                                 /*!< Program Burst Data2 Register3 */
X  volatile uint32_t PRGBRST_DATA2_3;                                                  
N  __IO uint32_t PRGBRST_DATA3_0;                                                 /*!< Program Burst Data3 Register0 */
X  volatile uint32_t PRGBRST_DATA3_0;                                                  
N  __IO uint32_t PRGBRST_DATA3_1;                                                 /*!< Program Burst Data3 Register1 */
X  volatile uint32_t PRGBRST_DATA3_1;                                                  
N  __IO uint32_t PRGBRST_DATA3_2;                                                 /*!< Program Burst Data3 Register2 */
X  volatile uint32_t PRGBRST_DATA3_2;                                                  
N  __IO uint32_t PRGBRST_DATA3_3;                                                 /*!< Program Burst Data3 Register3 */
X  volatile uint32_t PRGBRST_DATA3_3;                                                  
N  __IO uint32_t ERASE_CTLSTAT;                                                   /*!< Erase Control and Status Register */
X  volatile uint32_t ERASE_CTLSTAT;                                                    
N  __IO uint32_t ERASE_SECTADDR;                                                  /*!< Erase Sector Address Register */
X  volatile uint32_t ERASE_SECTADDR;                                                   
N       uint32_t RESERVED5[2];
N  __IO uint32_t BANK0_INFO_WEPROT;                                               /*!< Information Memory Bank0 Write/Erase Protection Register */
X  volatile uint32_t BANK0_INFO_WEPROT;                                                
N  __IO uint32_t BANK0_MAIN_WEPROT;                                               /*!< Main Memory Bank0 Write/Erase Protection Register */
X  volatile uint32_t BANK0_MAIN_WEPROT;                                                
N       uint32_t RESERVED6[2];
N  __IO uint32_t BANK1_INFO_WEPROT;                                               /*!< Information Memory Bank1 Write/Erase Protection Register */
X  volatile uint32_t BANK1_INFO_WEPROT;                                                
N  __IO uint32_t BANK1_MAIN_WEPROT;                                               /*!< Main Memory Bank1 Write/Erase Protection Register */
X  volatile uint32_t BANK1_MAIN_WEPROT;                                                
N       uint32_t RESERVED7[2];
N  __IO uint32_t BMRK_CTLSTAT;                                                    /*!< Benchmark Control and Status Register */
X  volatile uint32_t BMRK_CTLSTAT;                                                     
N  __IO uint32_t BMRK_IFETCH;                                                     /*!< Benchmark Instruction Fetch Count Register */
X  volatile uint32_t BMRK_IFETCH;                                                      
N  __IO uint32_t BMRK_DREAD;                                                      /*!< Benchmark Data Read Count Register */
X  volatile uint32_t BMRK_DREAD;                                                       
N  __IO uint32_t BMRK_CMP;                                                        /*!< Benchmark Count Compare Register */
X  volatile uint32_t BMRK_CMP;                                                         
N       uint32_t RESERVED8[4];
N  __IO uint32_t IFG;                                                             /*!< Interrupt Flag Register */
X  volatile uint32_t IFG;                                                              
N  __IO uint32_t IE;                                                              /*!< Interrupt Enable Register */
X  volatile uint32_t IE;                                                               
N  __IO uint32_t CLRIFG;                                                          /*!< Clear Interrupt Flag Register */
X  volatile uint32_t CLRIFG;                                                           
N  __IO uint32_t SETIFG;                                                          /*!< Set Interrupt Flag Register */
X  volatile uint32_t SETIFG;                                                           
N  __I  uint32_t READ_TIMCTL;                                                     /*!< Read Timing Control Register */
X  volatile const  uint32_t READ_TIMCTL;                                                      
N  __I  uint32_t READMARGIN_TIMCTL;                                               /*!< Read Margin Timing Control Register */
X  volatile const  uint32_t READMARGIN_TIMCTL;                                                
N  __I  uint32_t PRGVER_TIMCTL;                                                   /*!< Program Verify Timing Control Register */
X  volatile const  uint32_t PRGVER_TIMCTL;                                                    
N  __I  uint32_t ERSVER_TIMCTL;                                                   /*!< Erase Verify Timing Control Register */
X  volatile const  uint32_t ERSVER_TIMCTL;                                                    
N  __I  uint32_t LKGVER_TIMCTL;                                                   /*!< Leakage Verify Timing Control Register */
X  volatile const  uint32_t LKGVER_TIMCTL;                                                    
N  __I  uint32_t PROGRAM_TIMCTL;                                                  /*!< Program Timing Control Register */
X  volatile const  uint32_t PROGRAM_TIMCTL;                                                   
N  __I  uint32_t ERASE_TIMCTL;                                                    /*!< Erase Timing Control Register */
X  volatile const  uint32_t ERASE_TIMCTL;                                                     
N  __I  uint32_t MASSERASE_TIMCTL;                                                /*!< Mass Erase Timing Control Register */
X  volatile const  uint32_t MASSERASE_TIMCTL;                                                 
N  __I  uint32_t BURSTPRG_TIMCTL;                                                 /*!< Burst Program Timing Control Register */
X  volatile const  uint32_t BURSTPRG_TIMCTL;                                                  
N} FLCTL_Type;
N
N/*@}*/ /* end of group FLCTL */
N
N
N/******************************************************************************
N* FL_BOOTOVER_MAILBOX Registers
N******************************************************************************/
N/** @addtogroup SEC_ZONE_PARAMS MSP432P401R (FL_BOOTOVER_MAILBOX)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t SEC_ZONE_SECEN;                                                  /*!< IP Protection Secure Zone Enable. */
X  volatile uint32_t SEC_ZONE_SECEN;                                                   
N  __IO uint32_t SEC_ZONE_START_ADDR;                                             /*!< Start address of IP protected secure zone. */
X  volatile uint32_t SEC_ZONE_START_ADDR;                                              
N  __IO uint32_t SEC_ZONE_LENGTH;                                                 /*!< Length of IP protected secure zone in number of bytes. */
X  volatile uint32_t SEC_ZONE_LENGTH;                                                  
N  __IO uint32_t SEC_ZONE_AESINIT_VECT[4];                                        /*!< IP protected secure zone 0 AES initialization vector */
X  volatile uint32_t SEC_ZONE_AESINIT_VECT[4];                                         
N  __IO uint32_t SEC_ZONE_SECKEYS[8];                                             /*!< AES-CBC security keys. */
X  volatile uint32_t SEC_ZONE_SECKEYS[8];                                              
N  __IO uint32_t SEC_ZONE_UNENC_PWD[4];                                           /*!< Unencrypted password for authentication. */
X  volatile uint32_t SEC_ZONE_UNENC_PWD[4];                                            
N  __IO uint32_t SEC_ZONE_ENCUPDATE_EN;                                           /*!< IP Protected Secure Zone Encrypted In-field Update Enable */
X  volatile uint32_t SEC_ZONE_ENCUPDATE_EN;                                            
N  __IO uint32_t SEC_ZONE_DATA_EN;                                                /*!< IP Protected Secure Zone Data Access Enable */
X  volatile uint32_t SEC_ZONE_DATA_EN;                                                 
N  __IO uint32_t SEC_ZONE_ACK;                                                    /*!< Acknowledgment for IP Protection Secure Zone Enable Command. */
X  volatile uint32_t SEC_ZONE_ACK;                                                     
N       uint32_t RESERVED0[2];
N} SEC_ZONE_PARAMS_Type;
N
N/*@}*/ /* end of group SEC_ZONE_PARAMS */
N
N/** @addtogroup SEC_ZONE_UPDATE MSP432P401R (FL_BOOTOVER_MAILBOX)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t SEC_ZONE_PAYLOADADDR;                                            /*!< Start address where the payload is loaded in the device. */
X  volatile uint32_t SEC_ZONE_PAYLOADADDR;                                             
N  __IO uint32_t SEC_ZONE_PAYLOADLEN;                                             /*!< Length of the payload in bytes. */
X  volatile uint32_t SEC_ZONE_PAYLOADLEN;                                              
N  __IO uint32_t SEC_ZONE_UPDATE_ACK;                                             /*!< Acknowledgment for the IP Protected Secure Zone Update Command */
X  volatile uint32_t SEC_ZONE_UPDATE_ACK;                                              
N       uint32_t RESERVED0;
N} SEC_ZONE_UPDATE_Type;
N
N/*@}*/ /* end of group SEC_ZONE_UPDATE */
N
N/** @addtogroup FL_BOOTOVER_MAILBOX MSP432P401R (FL_BOOTOVER_MAILBOX)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t MB_START;                                                        /*!< Flash MailBox start: 0x0115ACF6 */
X  volatile uint32_t MB_START;                                                         
N  __IO uint32_t CMD;                                                             /*!< Command for Boot override operations. */
X  volatile uint32_t CMD;                                                              
N       uint32_t RESERVED0[2];
N  __IO uint32_t JTAG_SWD_LOCK_SECEN;                                             /*!< JTAG and SWD Lock Enable */
X  volatile uint32_t JTAG_SWD_LOCK_SECEN;                                              
N  __IO uint32_t JTAG_SWD_LOCK_AES_INIT_VECT[4];                                  /*!< JTAG and SWD lock AES initialization vector for AES-CBC */
X  volatile uint32_t JTAG_SWD_LOCK_AES_INIT_VECT[4];                                   
N  __IO uint32_t JTAG_SWD_LOCK_AES_SECKEYS[8];                                    /*!< JTAG and SWD lock AES CBC security Keys 0-7. */
X  volatile uint32_t JTAG_SWD_LOCK_AES_SECKEYS[8];                                     
N  __IO uint32_t JTAG_SWD_LOCK_UNENC_PWD[4];                                      /*!< JTAG and SWD lock unencrypted password */
X  volatile uint32_t JTAG_SWD_LOCK_UNENC_PWD[4];                                       
N  __IO uint32_t JTAG_SWD_LOCK_ACK;                                               /*!< Acknowledgment for JTAG and SWD Lock command */
X  volatile uint32_t JTAG_SWD_LOCK_ACK;                                                
N       uint32_t RESERVED1[2];
N  SEC_ZONE_PARAMS_Type SEC_ZONE_PARAMS[4];                                              
N  __IO uint32_t BSL_ENABLE;                                                      /*!< BSL Enable. */
X  volatile uint32_t BSL_ENABLE;                                                       
N  __IO uint32_t BSL_START_ADDRESS;                                               /*!< Contains the pointer to the BSL function. */
X  volatile uint32_t BSL_START_ADDRESS;                                                
N  __IO uint32_t BSL_PARAMETERS;                                                  /*!< BSL hardware invoke conifguration field. */
X  volatile uint32_t BSL_PARAMETERS;                                                   
N       uint32_t RESERVED2[2];
N  __IO uint32_t BSL_ACK;                                                         /*!< Acknowledgment for the BSL Configuration Command */
X  volatile uint32_t BSL_ACK;                                                          
N  __IO uint32_t JTAG_SWD_LOCK_ENCPAYLOADADD;                                     /*!< Start address where the payload is loaded in the device. */
X  volatile uint32_t JTAG_SWD_LOCK_ENCPAYLOADADD;                                      
N  __IO uint32_t JTAG_SWD_LOCK_ENCPAYLOADLEN;                                     /*!< Length of the encrypted payload in bytes */
X  volatile uint32_t JTAG_SWD_LOCK_ENCPAYLOADLEN;                                      
N  __IO uint32_t JTAG_SWD_LOCK_DST_ADDR;                                          /*!< Destination address where the final data needs to be stored into the device. */
X  volatile uint32_t JTAG_SWD_LOCK_DST_ADDR;                                           
N  __IO uint32_t ENC_UPDATE_ACK;                                                  /*!< Acknowledgment for JTAG and SWD Lock Encrypted Update Command */
X  volatile uint32_t ENC_UPDATE_ACK;                                                   
N       uint32_t RESERVED3;
N  SEC_ZONE_UPDATE_Type SEC_ZONE_UPDATE[4];                                              
N       uint32_t RESERVED4;
N  __IO uint32_t FACTORY_RESET_ENABLE;                                            /*!< Enable/Disable Factory Reset */
X  volatile uint32_t FACTORY_RESET_ENABLE;                                             
N  __IO uint32_t FACTORY_RESET_PWDEN;                                             /*!< Factory reset password enable */
X  volatile uint32_t FACTORY_RESET_PWDEN;                                              
N  __IO uint32_t FACTORY_RESET_PWD[4];                                            /*!< 128-bit Password for factory reset to be saved into the device. */
X  volatile uint32_t FACTORY_RESET_PWD[4];                                             
N  __IO uint32_t FACTORY_RESET_PARAMS_ACK;                                        /*!< Acknowledgment for the Factory Reset Params Command */
X  volatile uint32_t FACTORY_RESET_PARAMS_ACK;                                         
N       uint32_t RESERVED5;
N  __IO uint32_t FACTORY_RESET_PASSWORD[4];                                       /*!< 128-bit Password for factory reset. */
X  volatile uint32_t FACTORY_RESET_PASSWORD[4];                                        
N  __IO uint32_t FACTORY_RESET_ACK;                                               /*!< Acknowledgment for the Factory Reset Command */
X  volatile uint32_t FACTORY_RESET_ACK;                                                
N       uint32_t RESERVED6[2];
N  __IO uint32_t MB_END;                                                          /*!< Mailbox end */
X  volatile uint32_t MB_END;                                                           
N} FL_BOOTOVER_MAILBOX_Type;
N
N/*@}*/ /* end of group FL_BOOTOVER_MAILBOX */
N
N
N/******************************************************************************
N* PCM Registers
N******************************************************************************/
N/** @addtogroup PCM MSP432P401R (PCM)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t CTL0;                                                            /*!< Control 0 Register */
X  volatile uint32_t CTL0;                                                             
N  __IO uint32_t CTL1;                                                            /*!< Control 1 Register */
X  volatile uint32_t CTL1;                                                             
N  __IO uint32_t IE;                                                              /*!< Interrupt Enable Register */
X  volatile uint32_t IE;                                                               
N  __I  uint32_t IFG;                                                             /*!< Interrupt Flag Register */
X  volatile const  uint32_t IFG;                                                              
N  __O  uint32_t CLRIFG;                                                          /*!< Clear Interrupt Flag Register */
X  volatile  uint32_t CLRIFG;                                                           
N} PCM_Type;
N
N/*@}*/ /* end of group PCM */
N
N
N/******************************************************************************
N* PMAP Registers
N******************************************************************************/
N/** @addtogroup PMAP MSP432P401R (PMAP)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t KEYID;
X  volatile uint16_t KEYID;
N  __IO uint16_t CTL;
X  volatile uint16_t CTL;
N} PMAP_COMMON_Type;
N
Ntypedef struct {
N  union {
N    __IO uint16_t PMAP_REGISTER[4];
X    volatile uint16_t PMAP_REGISTER[4];
N    struct {
N      __IO uint8_t PMAP_REGISTER0;
X      volatile uint8_t PMAP_REGISTER0;
N      __IO uint8_t PMAP_REGISTER1;
X      volatile uint8_t PMAP_REGISTER1;
N      __IO uint8_t PMAP_REGISTER2;
X      volatile uint8_t PMAP_REGISTER2;
N      __IO uint8_t PMAP_REGISTER3;
X      volatile uint8_t PMAP_REGISTER3;
N      __IO uint8_t PMAP_REGISTER4;
X      volatile uint8_t PMAP_REGISTER4;
N      __IO uint8_t PMAP_REGISTER5;
X      volatile uint8_t PMAP_REGISTER5;
N      __IO uint8_t PMAP_REGISTER6;
X      volatile uint8_t PMAP_REGISTER6;
N      __IO uint8_t PMAP_REGISTER7;
X      volatile uint8_t PMAP_REGISTER7;
N    };
N  };
N} PMAP_REGISTER_Type;
N
N/*@}*/ /* end of group PMAP */
N
N
N/******************************************************************************
N* PSS Registers
N******************************************************************************/
N/** @addtogroup PSS MSP432P401R (PSS)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t KEY;                                                             /*!< Key Register */
X  volatile uint32_t KEY;                                                              
N  __IO uint32_t CTL0;                                                            /*!< Control 0 Register */
X  volatile uint32_t CTL0;                                                             
N       uint32_t RESERVED0[11];
N  __IO uint32_t IE;                                                              /*!< Interrupt Enable Register */
X  volatile uint32_t IE;                                                               
N  __I  uint32_t IFG;                                                             /*!< Interrupt Flag Register */
X  volatile const  uint32_t IFG;                                                              
N  __IO uint32_t CLRIFG;                                                          /*!< Clear Interrupt Flag Register */
X  volatile uint32_t CLRIFG;                                                           
N} PSS_Type;
N
N/*@}*/ /* end of group PSS */
N
N
N/******************************************************************************
N* REF_A Registers
N******************************************************************************/
N/** @addtogroup REF_A MSP432P401R (REF_A)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTL0;                                                            /*!< REF Control Register 0 */
X  volatile uint16_t CTL0;                                                             
N} REF_A_Type;
N
N/*@}*/ /* end of group REF_A */
N
N
N/******************************************************************************
N* RSTCTL Registers
N******************************************************************************/
N/** @addtogroup RSTCTL MSP432P401R (RSTCTL)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t RESET_REQ;                                                       /*!< Reset Request Register */
X  volatile uint32_t RESET_REQ;                                                        
N  __I  uint32_t HARDRESET_STAT;                                                  /*!< Hard Reset Status Register */
X  volatile const  uint32_t HARDRESET_STAT;                                                   
N  __IO uint32_t HARDRESET_CLR;                                                   /*!< Hard Reset Status Clear Register */
X  volatile uint32_t HARDRESET_CLR;                                                    
N  __IO uint32_t HARDRESET_SET;                                                   /*!< Hard Reset Status Set Register */
X  volatile uint32_t HARDRESET_SET;                                                    
N  __I  uint32_t SOFTRESET_STAT;                                                  /*!< Soft Reset Status Register */
X  volatile const  uint32_t SOFTRESET_STAT;                                                   
N  __IO uint32_t SOFTRESET_CLR;                                                   /*!< Soft Reset Status Clear Register */
X  volatile uint32_t SOFTRESET_CLR;                                                    
N  __IO uint32_t SOFTRESET_SET;                                                   /*!< Soft Reset Status Set Register */
X  volatile uint32_t SOFTRESET_SET;                                                    
N       uint32_t RESERVED0[57];
N  __I  uint32_t PSSRESET_STAT;                                                   /*!< PSS Reset Status Register */
X  volatile const  uint32_t PSSRESET_STAT;                                                    
N  __IO uint32_t PSSRESET_CLR;                                                    /*!< PSS Reset Status Clear Register */
X  volatile uint32_t PSSRESET_CLR;                                                     
N  __I  uint32_t PCMRESET_STAT;                                                   /*!< PCM Reset Status Register */
X  volatile const  uint32_t PCMRESET_STAT;                                                    
N  __IO uint32_t PCMRESET_CLR;                                                    /*!< PCM Reset Status Clear Register */
X  volatile uint32_t PCMRESET_CLR;                                                     
N  __I  uint32_t PINRESET_STAT;                                                   /*!< Pin Reset Status Register */
X  volatile const  uint32_t PINRESET_STAT;                                                    
N  __IO uint32_t PINRESET_CLR;                                                    /*!< Pin Reset Status Clear Register */
X  volatile uint32_t PINRESET_CLR;                                                     
N  __I  uint32_t REBOOTRESET_STAT;                                                /*!< Reboot Reset Status Register */
X  volatile const  uint32_t REBOOTRESET_STAT;                                                 
N  __IO uint32_t REBOOTRESET_CLR;                                                 /*!< Reboot Reset Status Clear Register */
X  volatile uint32_t REBOOTRESET_CLR;                                                  
N  __I  uint32_t CSRESET_STAT;                                                    /*!< CS Reset Status Register */
X  volatile const  uint32_t CSRESET_STAT;                                                     
N  __IO uint32_t CSRESET_CLR;                                                     /*!< CS Reset Status Clear Register */
X  volatile uint32_t CSRESET_CLR;                                                      
N} RSTCTL_Type;
N
N/*@}*/ /* end of group RSTCTL */
N
N
N/******************************************************************************
N* RTC_C Registers
N******************************************************************************/
N/** @addtogroup RTC_C MSP432P401R (RTC_C)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTL0;                                                            /*!< RTCCTL0 Register */
X  volatile uint16_t CTL0;                                                             
N  __IO uint16_t CTL13;                                                           /*!< RTCCTL13 Register */
X  volatile uint16_t CTL13;                                                            
N  __IO uint16_t OCAL;                                                            /*!< RTCOCAL Register */
X  volatile uint16_t OCAL;                                                             
N  __IO uint16_t TCMP;                                                            /*!< RTCTCMP Register */
X  volatile uint16_t TCMP;                                                             
N  __IO uint16_t PS0CTL;                                                          /*!< Real-Time Clock Prescale Timer 0 Control Register */
X  volatile uint16_t PS0CTL;                                                           
N  __IO uint16_t PS1CTL;                                                          /*!< Real-Time Clock Prescale Timer 1 Control Register */
X  volatile uint16_t PS1CTL;                                                           
N  __IO uint16_t PS;                                                              /*!< Real-Time Clock Prescale Timer Counter Register */
X  volatile uint16_t PS;                                                               
N  __I  uint16_t IV;                                                              /*!< Real-Time Clock Interrupt Vector Register */
X  volatile const  uint16_t IV;                                                               
N  __IO uint16_t TIM0;                                                            /*!< RTCTIM0 Register  Hexadecimal Format */
X  volatile uint16_t TIM0;                                                             
N  __IO uint16_t TIM1;                                                            /*!< Real-Time Clock Hour, Day of Week */
X  volatile uint16_t TIM1;                                                             
N  __IO uint16_t DATE;                                                            /*!< RTCDATE - Hexadecimal Format */
X  volatile uint16_t DATE;                                                             
N  __IO uint16_t YEAR;                                                            /*!< RTCYEAR Register  Hexadecimal Format */
X  volatile uint16_t YEAR;                                                             
N  __IO uint16_t AMINHR;                                                          /*!< RTCMINHR - Hexadecimal Format */
X  volatile uint16_t AMINHR;                                                           
N  __IO uint16_t ADOWDAY;                                                         /*!< RTCADOWDAY - Hexadecimal Format */
X  volatile uint16_t ADOWDAY;                                                          
N  __IO uint16_t BIN2BCD;                                                         /*!< Binary-to-BCD Conversion Register */
X  volatile uint16_t BIN2BCD;                                                          
N  __IO uint16_t BCD2BIN;                                                         /*!< BCD-to-Binary Conversion Register */
X  volatile uint16_t BCD2BIN;                                                          
N} RTC_C_Type;
N
N/*@}*/ /* end of group RTC_C */
N
N/** @addtogroup RTC_C_BCD MSP432P401R (RTC_C_BCD)
N  @{
N*/
Ntypedef struct {
N       uint16_t RESERVED0[8];
N  __IO uint16_t TIM0;                                                            /*!< Real-Time Clock Seconds, Minutes Register - BCD Format */
X  volatile uint16_t TIM0;                                                             
N  __IO uint16_t TIM1;                                                            /*!< Real-Time Clock Hour, Day of Week - BCD Format */
X  volatile uint16_t TIM1;                                                             
N  __IO uint16_t DATE;                                                            /*!< Real-Time Clock Date - BCD Format */
X  volatile uint16_t DATE;                                                             
N  __IO uint16_t YEAR;                                                            /*!< Real-Time Clock Year Register - BCD Format */
X  volatile uint16_t YEAR;                                                             
N  __IO uint16_t AMINHR;                                                          /*!< Real-Time Clock Minutes, Hour Alarm - BCD Format */
X  volatile uint16_t AMINHR;                                                           
N  __IO uint16_t ADOWDAY;                                                         /*!< Real-Time Clock Day of Week, Day of Month Alarm - BCD Format */
X  volatile uint16_t ADOWDAY;                                                          
N} RTC_C_BCD_Type;
N
N/*@}*/ /* end of group RTC_C_BCD */
N
N
N/******************************************************************************
N* SYSCTL Registers
N******************************************************************************/
N/** @addtogroup SYSCTL MSP432P401R (SYSCTL)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t REBOOT_CTL;                                                      /*!< Reboot Control Register */
X  volatile uint32_t REBOOT_CTL;                                                       
N  __IO uint32_t NMI_CTLSTAT;                                                     /*!< NMI Control and Status Register */
X  volatile uint32_t NMI_CTLSTAT;                                                      
N  __IO uint32_t WDTRESET_CTL;                                                    /*!< Watchdog Reset Control Register */
X  volatile uint32_t WDTRESET_CTL;                                                     
N  __IO uint32_t PERIHALT_CTL;                                                    /*!< Peripheral Halt Control Register */
X  volatile uint32_t PERIHALT_CTL;                                                     
N  __I  uint32_t SRAM_SIZE;                                                       /*!< SRAM Size Register */
X  volatile const  uint32_t SRAM_SIZE;                                                        
N  __IO uint32_t SRAM_BANKEN;                                                     /*!< SRAM Bank Enable Register */
X  volatile uint32_t SRAM_BANKEN;                                                      
N  __IO uint32_t SRAM_BANKRET;                                                    /*!< SRAM Bank Retention Control Register */
X  volatile uint32_t SRAM_BANKRET;                                                     
N       uint32_t RESERVED0;
N  __I  uint32_t FLASH_SIZE;                                                      /*!< Flash Size Register */
X  volatile const  uint32_t FLASH_SIZE;                                                       
N       uint32_t RESERVED1[3];
N  __IO uint32_t DIO_GLTFLT_CTL;                                                  /*!< Digital I/O Glitch Filter Control Register */
X  volatile uint32_t DIO_GLTFLT_CTL;                                                   
N       uint32_t RESERVED2[3];
N  __IO uint32_t SECDATA_UNLOCK;                                                  /*!< IP Protected Secure Zone Data Access Unlock Register */
X  volatile uint32_t SECDATA_UNLOCK;                                                   
N} SYSCTL_Type;
N
Ntypedef struct {
N  __IO uint32_t MASTER_UNLOCK;                                                   /*!< Master Unlock Register */
X  volatile uint32_t MASTER_UNLOCK;                                                    
N  __IO uint32_t BOOTOVER_REQ[2];                                                 /*!< Boot Override Request Register */
X  volatile uint32_t BOOTOVER_REQ[2];                                                  
N  __IO uint32_t BOOTOVER_ACK;                                                    /*!< Boot Override Acknowledge Register */
X  volatile uint32_t BOOTOVER_ACK;                                                     
N  __IO uint32_t RESET_REQ;                                                       /*!< Reset Request Register */
X  volatile uint32_t RESET_REQ;                                                        
N  __IO uint32_t RESET_STATOVER;                                                  /*!< Reset Status and Override Register */
X  volatile uint32_t RESET_STATOVER;                                                   
N       uint32_t RESERVED7[2];
N  __I  uint32_t SYSTEM_STAT;                                                     /*!< System Status Register */
X  volatile const  uint32_t SYSTEM_STAT;                                                      
N} SYSCTL_Boot_Type;
N
N/*@}*/ /* end of group SYSCTL */
N
N
N/******************************************************************************
N* Timer32 Registers
N******************************************************************************/
N/** @addtogroup Timer32 MSP432P401R (Timer32)
N  @{
N*/
Ntypedef struct {
N  __IO uint32_t LOAD;                                                            /*!< Timer Load Register */
X  volatile uint32_t LOAD;                                                             
N  __I  uint32_t VALUE;                                                           /*!< Timer Current Value Register */
X  volatile const  uint32_t VALUE;                                                            
N  __IO uint32_t CONTROL;                                                         /*!< Timer Control Register */
X  volatile uint32_t CONTROL;                                                          
N  __O  uint32_t INTCLR;                                                          /*!< Timer Interrupt Clear Register */
X  volatile  uint32_t INTCLR;                                                           
N  __I  uint32_t RIS;                                                             /*!< Timer Raw Interrupt Status Register */
X  volatile const  uint32_t RIS;                                                              
N  __I  uint32_t MIS;                                                             /*!< Timer Interrupt Status Register */
X  volatile const  uint32_t MIS;                                                              
N  __IO uint32_t BGLOAD;                                                          /*!< Timer Background Load Register */
X  volatile uint32_t BGLOAD;                                                           
N} Timer32_Type;
N
N/*@}*/ /* end of group Timer32 */
N
N
N/******************************************************************************
N* Timer_A Registers
N******************************************************************************/
N/** @addtogroup Timer_A MSP432P401R (Timer_A)
N  @{
N*/
Ntypedef struct {
N  __IO uint16_t CTL;                                                             /*!< TimerAx Control Register */
X  volatile uint16_t CTL;                                                              
N  __IO uint16_t CCTL[5];                                                         /*!< Timer_A Capture/Compare Control Register */
X  volatile uint16_t CCTL[5];                                                          
N       uint16_t RESERVED0[2];
N  __IO uint16_t R;                                                               /*!< TimerA register */
X  volatile uint16_t R;                                                                
N  __IO uint16_t CCR[5];                                                          /*!< Timer_A Capture/Compare  Register */
X  volatile uint16_t CCR[5];                                                           
N       uint16_t RESERVED1[2];
N  __IO uint16_t EX0;                                                             /*!< TimerAx Expansion 0 Register */
X  volatile uint16_t EX0;                                                              
N       uint16_t RESERVED2[6];
N  __I  uint16_t IV;                                                              /*!< TimerAx Interrupt Vector Register */
X  volatile const  uint16_t IV;                                                               
N} Timer_A_Type;
N
N/*@}*/ /* end of group Timer_A */
N
N
N/******************************************************************************
N* TLV Registers
N******************************************************************************/
N/** @addtogroup TLV MSP432P401R (TLV)
N  @{
N*/
Ntypedef struct {
N  __I  uint32_t TLV_CHECKSUM;                                                    /*!< TLV Checksum */
X  volatile const  uint32_t TLV_CHECKSUM;                                                     
N  __I  uint32_t DEVICE_INFO_TAG;                                                 /*!< Device Info Tag */
X  volatile const  uint32_t DEVICE_INFO_TAG;                                                  
N  __I  uint32_t DEVICE_INFO_LEN;                                                 /*!< Device Info Length */
X  volatile const  uint32_t DEVICE_INFO_LEN;                                                  
N  __I  uint32_t DEVICE_ID;                                                       /*!< Device ID */
X  volatile const  uint32_t DEVICE_ID;                                                        
N  __I  uint32_t HWREV;                                                           /*!< HW Revision */
X  volatile const  uint32_t HWREV;                                                            
N  __I  uint32_t BCREV;                                                           /*!< Boot Code Revision */
X  volatile const  uint32_t BCREV;                                                            
N  __I  uint32_t ROM_DRVLIB_REV;                                                  /*!< ROM Driver Library Revision */
X  volatile const  uint32_t ROM_DRVLIB_REV;                                                   
N  __I  uint32_t DIE_REC_TAG;                                                     /*!< Die Record Tag */
X  volatile const  uint32_t DIE_REC_TAG;                                                      
N  __I  uint32_t DIE_REC_LEN;                                                     /*!< Die Record Length */
X  volatile const  uint32_t DIE_REC_LEN;                                                      
N  __I  uint32_t DIE_XPOS;                                                        /*!< Die X-Position */
X  volatile const  uint32_t DIE_XPOS;                                                         
N  __I  uint32_t DIE_YPOS;                                                        /*!< Die Y-Position */
X  volatile const  uint32_t DIE_YPOS;                                                         
N  __I  uint32_t WAFER_ID;                                                        /*!< Wafer ID */
X  volatile const  uint32_t WAFER_ID;                                                         
N  __I  uint32_t LOT_ID;                                                          /*!< Lot ID */
X  volatile const  uint32_t LOT_ID;                                                           
N  __I  uint32_t RESERVED0;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED0;                                                        
N  __I  uint32_t RESERVED1;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED1;                                                        
N  __I  uint32_t RESERVED2;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED2;                                                        
N  __I  uint32_t TEST_RESULTS;                                                    /*!< Test Results */
X  volatile const  uint32_t TEST_RESULTS;                                                     
N  __I  uint32_t CS_CAL_TAG;                                                      /*!< Clock System Calibration Tag */
X  volatile const  uint32_t CS_CAL_TAG;                                                       
N  __I  uint32_t CS_CAL_LEN;                                                      /*!< Clock System Calibration Length */
X  volatile const  uint32_t CS_CAL_LEN;                                                       
N  __I  uint32_t DCOIR_FCAL_RSEL04;                                               /*!< DCO IR mode: Frequency calibration for DCORSEL 0 to 4 */
X  volatile const  uint32_t DCOIR_FCAL_RSEL04;                                                
N  __I  uint32_t DCOIR_FCAL_RSEL5;                                                /*!< DCO IR mode: Frequency calibration for DCORSEL 5 */
X  volatile const  uint32_t DCOIR_FCAL_RSEL5;                                                 
N  __I  uint32_t RESERVED3;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED3;                                                        
N  __I  uint32_t RESERVED4;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED4;                                                        
N  __I  uint32_t RESERVED5;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED5;                                                        
N  __I  uint32_t RESERVED6;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED6;                                                        
N  __I  uint32_t DCOIR_CONSTK_RSEL04;                                             /*!< DCO IR mode: DCO Constant (K) for DCORSEL 0 to 4 */
X  volatile const  uint32_t DCOIR_CONSTK_RSEL04;                                              
N  __I  uint32_t DCOIR_CONSTK_RSEL5;                                              /*!< DCO IR mode: DCO Constant (K) for DCORSEL 5 */
X  volatile const  uint32_t DCOIR_CONSTK_RSEL5;                                               
N  __I  uint32_t DCOER_FCAL_RSEL04;                                               /*!< DCO ER mode: Frequency calibration for DCORSEL 0 to 4 */
X  volatile const  uint32_t DCOER_FCAL_RSEL04;                                                
N  __I  uint32_t DCOER_FCAL_RSEL5;                                                /*!< DCO ER mode: Frequency calibration for DCORSEL 5 */
X  volatile const  uint32_t DCOER_FCAL_RSEL5;                                                 
N  __I  uint32_t RESERVED7;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED7;                                                        
N  __I  uint32_t RESERVED8;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED8;                                                        
N  __I  uint32_t RESERVED9;                                                       /*!< Reserved */
X  volatile const  uint32_t RESERVED9;                                                        
N  __I  uint32_t RESERVED10;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED10;                                                       
N  __I  uint32_t DCOER_CONSTK_RSEL04;                                             /*!< DCO ER mode: DCO Constant (K) for DCORSEL 0 to 4 */
X  volatile const  uint32_t DCOER_CONSTK_RSEL04;                                              
N  __I  uint32_t DCOER_CONSTK_RSEL5;                                              /*!< DCO ER mode: DCO Constant (K) for DCORSEL 5 */
X  volatile const  uint32_t DCOER_CONSTK_RSEL5;                                               
N  __I  uint32_t ADC14_CAL_TAG;                                                   /*!< ADC14 Calibration Tag */
X  volatile const  uint32_t ADC14_CAL_TAG;                                                    
N  __I  uint32_t ADC14_CAL_LEN;                                                   /*!< ADC14 Calibration Length */
X  volatile const  uint32_t ADC14_CAL_LEN;                                                    
N  __I  uint32_t ADC_GAIN_FACTOR;                                                 /*!< ADC Gain Factor */
X  volatile const  uint32_t ADC_GAIN_FACTOR;                                                  
N  __I  uint32_t ADC_OFFSET;                                                      /*!< ADC Offset */
X  volatile const  uint32_t ADC_OFFSET;                                                       
N  __I  uint32_t RESERVED11;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED11;                                                       
N  __I  uint32_t RESERVED12;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED12;                                                       
N  __I  uint32_t RESERVED13;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED13;                                                       
N  __I  uint32_t RESERVED14;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED14;                                                       
N  __I  uint32_t RESERVED15;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED15;                                                       
N  __I  uint32_t RESERVED16;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED16;                                                       
N  __I  uint32_t RESERVED17;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED17;                                                       
N  __I  uint32_t RESERVED18;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED18;                                                       
N  __I  uint32_t RESERVED19;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED19;                                                       
N  __I  uint32_t RESERVED20;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED20;                                                       
N  __I  uint32_t RESERVED21;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED21;                                                       
N  __I  uint32_t RESERVED22;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED22;                                                       
N  __I  uint32_t RESERVED23;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED23;                                                       
N  __I  uint32_t RESERVED24;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED24;                                                       
N  __I  uint32_t RESERVED25;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED25;                                                       
N  __I  uint32_t RESERVED26;                                                      /*!< Reserved */
X  volatile const  uint32_t RESERVED26;                                                       
N  __I  uint32_t ADC14_REF1P2V_TS30C;                                             /*!< ADC14 1.2V Reference Temp. Sensor 30C */
X  volatile const  uint32_t ADC14_REF1P2V_TS30C;                                              
N  __I  uint32_t ADC14_REF1P2V_TS85C;                                             /*!< ADC14 1.2V Reference Temp. Sensor 85C */
X  volatile const  uint32_t ADC14_REF1P2V_TS85C;                                              
N  __I  uint32_t ADC14_REF1P45V_TS30C;                                            /*!< ADC14 1.45V Reference Temp. Sensor 30C */
X  volatile const  uint32_t ADC14_REF1P45V_TS30C;                                             
N  __I  uint32_t ADC14_REF1P45V_TS85C;                                            /*!< ADC14 1.45V Reference Temp. Sensor 85C */
X  volatile const  uint32_t ADC14_REF1P45V_TS85C;                                             
N  __I  uint32_t ADC14_REF2P5V_TS30C;                                             /*!< ADC14 2.5V Reference Temp. Sensor 30C */
X  volatile const  uint32_t ADC14_REF2P5V_TS30C;                                              
N  __I  uint32_t ADC14_REF2P5V_TS85C;                                             /*!< ADC14 2.5V Reference Temp. Sensor 85C */
X  volatile const  uint32_t ADC14_REF2P5V_TS85C;                                              
N  __I  uint32_t REF_CAL_TAG;                                                     /*!< REF Calibration Tag */
X  volatile const  uint32_t REF_CAL_TAG;                                                      
N  __I  uint32_t REF_CAL_LEN;                                                     /*!< REF Calibration Length */
X  volatile const  uint32_t REF_CAL_LEN;                                                      
N  __I  uint32_t REF_1P2V;                                                        /*!< REF 1.2V Reference */
X  volatile const  uint32_t REF_1P2V;                                                         
N  __I  uint32_t REF_1P45V;                                                       /*!< REF 1.45V Reference */
X  volatile const  uint32_t REF_1P45V;                                                        
N  __I  uint32_t REF_2P5V;                                                        /*!< REF 2.5V Reference */
X  volatile const  uint32_t REF_2P5V;                                                         
N  __I  uint32_t FLASH_INFO_TAG;                                                  /*!< Flash Info Tag */
X  volatile const  uint32_t FLASH_INFO_TAG;                                                   
N  __I  uint32_t FLASH_INFO_LEN;                                                  /*!< Flash Info Length */
X  volatile const  uint32_t FLASH_INFO_LEN;                                                   
N  __I  uint32_t FLASH_MAX_PROG_PULSES;                                           /*!< Flash Maximum Programming Pulses */
X  volatile const  uint32_t FLASH_MAX_PROG_PULSES;                                            
N  __I  uint32_t FLASH_MAX_ERASE_PULSES;                                          /*!< Flash Maximum Erase Pulses */
X  volatile const  uint32_t FLASH_MAX_ERASE_PULSES;                                           
N  __I  uint32_t RANDOM_NUM_TAG;                                                  /*!< 128-bit Random Number Tag */
X  volatile const  uint32_t RANDOM_NUM_TAG;                                                   
N  __I  uint32_t RANDOM_NUM_LEN;                                                  /*!< 128-bit Random Number Length */
X  volatile const  uint32_t RANDOM_NUM_LEN;                                                   
N  __I  uint32_t RANDOM_NUM_1;                                                    /*!< 32-bit Random Number 1 */
X  volatile const  uint32_t RANDOM_NUM_1;                                                     
N  __I  uint32_t RANDOM_NUM_2;                                                    /*!< 32-bit Random Number 2 */
X  volatile const  uint32_t RANDOM_NUM_2;                                                     
N  __I  uint32_t RANDOM_NUM_3;                                                    /*!< 32-bit Random Number 3 */
X  volatile const  uint32_t RANDOM_NUM_3;                                                     
N  __I  uint32_t RANDOM_NUM_4;                                                    /*!< 32-bit Random Number 4 */
X  volatile const  uint32_t RANDOM_NUM_4;                                                     
N  __I  uint32_t BSL_CFG_TAG;                                                     /*!< BSL Configuration Tag */
X  volatile const  uint32_t BSL_CFG_TAG;                                                      
N  __I  uint32_t BSL_CFG_LEN;                                                     /*!< BSL Configuration Length */
X  volatile const  uint32_t BSL_CFG_LEN;                                                      
N  __I  uint32_t BSL_PERIPHIF_SEL;                                                /*!< BSL Peripheral Interface Selection */
X  volatile const  uint32_t BSL_PERIPHIF_SEL;                                                 
N  __I  uint32_t BSL_PORTIF_CFG_UART;                                             /*!< BSL Port Interface Configuration for UART */
X  volatile const  uint32_t BSL_PORTIF_CFG_UART;                                              
N  __I  uint32_t BSL_PORTIF_CFG_SPI;                                              /*!< BSL Port Interface Configuration for SPI */
X  volatile const  uint32_t BSL_PORTIF_CFG_SPI;                                               
N  __I  uint32_t BSL_PORTIF_CFG_I2C;                                              /*!< BSL Port Interface Configuration for I2C */
X  volatile const  uint32_t BSL_PORTIF_CFG_I2C;                                               
N  __I  uint32_t TLV_END;                                                         /*!< TLV End Word */
X  volatile const  uint32_t TLV_END;                                                          
N} TLV_Type;
N
N/*@}*/ /* end of group TLV */
N
N
N/******************************************************************************
N* WDT_A Registers
N******************************************************************************/
N/** @addtogroup WDT_A MSP432P401R (WDT_A)
N  @{
N*/
Ntypedef struct {
N       uint16_t RESERVED0[6];
N  __IO uint16_t CTL;                                                             /*!< Watchdog Timer Control Register */
X  volatile uint16_t CTL;                                                              
N} WDT_A_Type;
N
N/*@}*/ /* end of group WDT_A */
N
N
N/* --------------------  End of section using anonymous unions  ------------------- */
N#if defined(__CC_ARM)
X#if 0L
S  #pragma pop
S#elif defined(__ICCARM__)
X#elif 0L
S  /* leave anonymous unions enabled */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 0L && (__ARMCC_VERSION >= 6010050)
S  #pragma clang diagnostic pop
S#elif defined(__GNUC__)
X#elif 0L
S  /* anonymous unions are enabled by default */
N#elif defined(__TI_ARM__)
X#elif 1L
N  /* anonymous unions are enabled by default */
N#else
S  #warning Not supported compiler type
N#endif
N
N/*@}*/ /* end of group MSP432P401R_Peripherals */
N
N/******************************************************************************
N* Peripheral declaration                                                      *
N******************************************************************************/
N/** @addtogroup MSP432P401R_PeripheralDecl MSP432P401R Peripheral Declaration
N  @{
N*/
N
N#define ADC14                            ((ADC14_Type *) ADC14_BASE)   
N#define AES256                           ((AES256_Type *) AES256_BASE) 
N#define CAPTIO0                          ((CAPTIO_Type *) CAPTIO0_BASE)
N#define CAPTIO1                          ((CAPTIO_Type *) CAPTIO1_BASE)
N#define COMP_E0                          ((COMP_E_Type *) COMP_E0_BASE)
N#define COMP_E1                          ((COMP_E_Type *) COMP_E1_BASE)
N#define CRC32                            ((CRC32_Type *) CRC32_BASE)   
N#define CS                               ((CS_Type *) CS_BASE)         
N#define PA                               ((DIO_PORT_Interruptable_Type*) (DIO_BASE + 0x0000))
N#define PB                               ((DIO_PORT_Interruptable_Type*) (DIO_BASE + 0x0020))
N#define PC                               ((DIO_PORT_Interruptable_Type*) (DIO_BASE + 0x0040))
N#define PD                               ((DIO_PORT_Interruptable_Type*) (DIO_BASE + 0x0060))
N#define PE                               ((DIO_PORT_Interruptable_Type*) (DIO_BASE + 0x0080))
N#define PJ                               ((DIO_PORT_Not_Interruptable_Type*) (DIO_BASE + 0x0120))
N#define P1                               ((DIO_PORT_Odd_Interruptable_Type*)  (DIO_BASE + 0x0000))
N#define P2                               ((DIO_PORT_Even_Interruptable_Type*) (DIO_BASE + 0x0000))
N#define P3                               ((DIO_PORT_Odd_Interruptable_Type*)  (DIO_BASE + 0x0020))
N#define P4                               ((DIO_PORT_Even_Interruptable_Type*) (DIO_BASE + 0x0020))
N#define P5                               ((DIO_PORT_Odd_Interruptable_Type*)  (DIO_BASE + 0x0040))
N#define P6                               ((DIO_PORT_Even_Interruptable_Type*) (DIO_BASE + 0x0040))
N#define P7                               ((DIO_PORT_Odd_Interruptable_Type*)  (DIO_BASE + 0x0060))
N#define P8                               ((DIO_PORT_Even_Interruptable_Type*) (DIO_BASE + 0x0060))
N#define P9                               ((DIO_PORT_Odd_Interruptable_Type*)  (DIO_BASE + 0x0080))
N#define P10                              ((DIO_PORT_Even_Interruptable_Type*) (DIO_BASE + 0x0080))
N#define DMA_Channel                      ((DMA_Channel_Type *) DMA_BASE)
N#define DMA_Control                      ((DMA_Control_Type *) (DMA_BASE + 0x1000))
N#define EUSCI_A0                         ((EUSCI_A_Type *) EUSCI_A0_BASE)
N#define EUSCI_A0_SPI                     ((EUSCI_A_SPI_Type *) EUSCI_A0_SPI_BASE)
N#define EUSCI_A1                         ((EUSCI_A_Type *) EUSCI_A1_BASE)
N#define EUSCI_A1_SPI                     ((EUSCI_A_SPI_Type *) EUSCI_A1_SPI_BASE)
N#define EUSCI_A2                         ((EUSCI_A_Type *) EUSCI_A2_BASE)
N#define EUSCI_A2_SPI                     ((EUSCI_A_SPI_Type *) EUSCI_A2_SPI_BASE)
N#define EUSCI_A3                         ((EUSCI_A_Type *) EUSCI_A3_BASE)
N#define EUSCI_A3_SPI                     ((EUSCI_A_SPI_Type *) EUSCI_A3_SPI_BASE)
N#define EUSCI_B0                         ((EUSCI_B_Type *) EUSCI_B0_BASE)
N#define EUSCI_B0_SPI                     ((EUSCI_B_SPI_Type *) EUSCI_B0_SPI_BASE)
N#define EUSCI_B1                         ((EUSCI_B_Type *) EUSCI_B1_BASE)
N#define EUSCI_B1_SPI                     ((EUSCI_B_SPI_Type *) EUSCI_B1_SPI_BASE)
N#define EUSCI_B2                         ((EUSCI_B_Type *) EUSCI_B2_BASE)
N#define EUSCI_B2_SPI                     ((EUSCI_B_SPI_Type *) EUSCI_B2_SPI_BASE)
N#define EUSCI_B3                         ((EUSCI_B_Type *) EUSCI_B3_BASE)
N#define EUSCI_B3_SPI                     ((EUSCI_B_SPI_Type *) EUSCI_B3_SPI_BASE)
N#define FLCTL                            ((FLCTL_Type *) FLCTL_BASE)   
N#define FL_BOOTOVER_MAILBOX              ((FL_BOOTOVER_MAILBOX_Type *) FL_BOOTOVER_MAILBOX_BASE)
N#define PCM                              ((PCM_Type *) PCM_BASE)       
N#define PMAP                             ((PMAP_COMMON_Type*) PMAP_BASE)
N#define P1MAP                            ((PMAP_REGISTER_Type*) (PMAP_BASE + 0x0008))
N#define P2MAP                            ((PMAP_REGISTER_Type*) (PMAP_BASE + 0x0010))
N#define P3MAP                            ((PMAP_REGISTER_Type*) (PMAP_BASE + 0x0018))
N#define P4MAP                            ((PMAP_REGISTER_Type*) (PMAP_BASE + 0x0020))
N#define P5MAP                            ((PMAP_REGISTER_Type*) (PMAP_BASE + 0x0028))
N#define P6MAP                            ((PMAP_REGISTER_Type*) (PMAP_BASE + 0x0030))
N#define P7MAP                            ((PMAP_REGISTER_Type*) (PMAP_BASE + 0x0038))
N#define PSS                              ((PSS_Type *) PSS_BASE)       
N#define REF_A                            ((REF_A_Type *) REF_A_BASE)   
N#define RSTCTL                           ((RSTCTL_Type *) RSTCTL_BASE) 
N#define RTC_C                            ((RTC_C_Type *) RTC_C_BASE)   
N#define RTC_C_BCD                        ((RTC_C_BCD_Type *) RTC_C_BCD_BASE)
N#define SYSCTL                           ((SYSCTL_Type *) SYSCTL_BASE)
N#define SYSCTL_Boot                      ((SYSCTL_Boot_Type *) (SYSCTL_BASE + 0x1000))
N#define TIMER32_1                        ((Timer32_Type *) TIMER32_BASE)
N#define TIMER32_2                        ((Timer32_Type *) (TIMER32_BASE + 0x00020))
N#define TIMER_A0                         ((Timer_A_Type *) TIMER_A0_BASE)
N#define TIMER_A1                         ((Timer_A_Type *) TIMER_A1_BASE)
N#define TIMER_A2                         ((Timer_A_Type *) TIMER_A2_BASE)
N#define TIMER_A3                         ((Timer_A_Type *) TIMER_A3_BASE)
N#define TLV                              ((TLV_Type *) TLV_BASE)       
N#define WDT_A                            ((WDT_A_Type *) WDT_A_BASE)   
N
N
N/*@}*/ /* end of group MSP432P401R_PeripheralDecl */
N
N/*@}*/ /* end of group MSP432P401R_Definitions */
N
N#endif /* __CMSIS_CONFIG__ */
N
N/******************************************************************************
N* Peripheral register control bits                                            *
N******************************************************************************/
N
N/******************************************************************************
N* ADC14 Bits
N******************************************************************************/
N/* ADC14_CTL0[SC] Bits */
N#define ADC14_CTL0_SC_OFS                        ( 0)                            /*!< ADC14SC Bit Offset */
N#define ADC14_CTL0_SC                            ((uint32_t)0x00000001)          /*!< ADC14 start conversion */
N/* ADC14_CTL0[ENC] Bits */
N#define ADC14_CTL0_ENC_OFS                       ( 1)                            /*!< ADC14ENC Bit Offset */
N#define ADC14_CTL0_ENC                           ((uint32_t)0x00000002)          /*!< ADC14 enable conversion */
N/* ADC14_CTL0[ON] Bits */
N#define ADC14_CTL0_ON_OFS                        ( 4)                            /*!< ADC14ON Bit Offset */
N#define ADC14_CTL0_ON                            ((uint32_t)0x00000010)          /*!< ADC14 on */
N/* ADC14_CTL0[MSC] Bits */
N#define ADC14_CTL0_MSC_OFS                       ( 7)                            /*!< ADC14MSC Bit Offset */
N#define ADC14_CTL0_MSC                           ((uint32_t)0x00000080)          /*!< ADC14 multiple sample and conversion */
N/* ADC14_CTL0[SHT0] Bits */
N#define ADC14_CTL0_SHT0_OFS                      ( 8)                            /*!< ADC14SHT0 Bit Offset */
N#define ADC14_CTL0_SHT0_MASK                     ((uint32_t)0x00000F00)          /*!< ADC14SHT0 Bit Mask */
N#define ADC14_CTL0_SHT00                         ((uint32_t)0x00000100)          /*!< SHT0 Bit 0 */
N#define ADC14_CTL0_SHT01                         ((uint32_t)0x00000200)          /*!< SHT0 Bit 1 */
N#define ADC14_CTL0_SHT02                         ((uint32_t)0x00000400)          /*!< SHT0 Bit 2 */
N#define ADC14_CTL0_SHT03                         ((uint32_t)0x00000800)          /*!< SHT0 Bit 3 */
N#define ADC14_CTL0_SHT0_0                        ((uint32_t)0x00000000)          /*!< 4 */
N#define ADC14_CTL0_SHT0_1                        ((uint32_t)0x00000100)          /*!< 8 */
N#define ADC14_CTL0_SHT0_2                        ((uint32_t)0x00000200)          /*!< 16 */
N#define ADC14_CTL0_SHT0_3                        ((uint32_t)0x00000300)          /*!< 32 */
N#define ADC14_CTL0_SHT0_4                        ((uint32_t)0x00000400)          /*!< 64 */
N#define ADC14_CTL0_SHT0_5                        ((uint32_t)0x00000500)          /*!< 96 */
N#define ADC14_CTL0_SHT0_6                        ((uint32_t)0x00000600)          /*!< 128 */
N#define ADC14_CTL0_SHT0_7                        ((uint32_t)0x00000700)          /*!< 192 */
N#define ADC14_CTL0_SHT0__4                       ((uint32_t)0x00000000)          /*!< 4 */
N#define ADC14_CTL0_SHT0__8                       ((uint32_t)0x00000100)          /*!< 8 */
N#define ADC14_CTL0_SHT0__16                      ((uint32_t)0x00000200)          /*!< 16 */
N#define ADC14_CTL0_SHT0__32                      ((uint32_t)0x00000300)          /*!< 32 */
N#define ADC14_CTL0_SHT0__64                      ((uint32_t)0x00000400)          /*!< 64 */
N#define ADC14_CTL0_SHT0__96                      ((uint32_t)0x00000500)          /*!< 96 */
N#define ADC14_CTL0_SHT0__128                     ((uint32_t)0x00000600)          /*!< 128 */
N#define ADC14_CTL0_SHT0__192                     ((uint32_t)0x00000700)          /*!< 192 */
N/* ADC14_CTL0[SHT1] Bits */
N#define ADC14_CTL0_SHT1_OFS                      (12)                            /*!< ADC14SHT1 Bit Offset */
N#define ADC14_CTL0_SHT1_MASK                     ((uint32_t)0x0000F000)          /*!< ADC14SHT1 Bit Mask */
N#define ADC14_CTL0_SHT10                         ((uint32_t)0x00001000)          /*!< SHT1 Bit 0 */
N#define ADC14_CTL0_SHT11                         ((uint32_t)0x00002000)          /*!< SHT1 Bit 1 */
N#define ADC14_CTL0_SHT12                         ((uint32_t)0x00004000)          /*!< SHT1 Bit 2 */
N#define ADC14_CTL0_SHT13                         ((uint32_t)0x00008000)          /*!< SHT1 Bit 3 */
N#define ADC14_CTL0_SHT1_0                        ((uint32_t)0x00000000)          /*!< 4 */
N#define ADC14_CTL0_SHT1_1                        ((uint32_t)0x00001000)          /*!< 8 */
N#define ADC14_CTL0_SHT1_2                        ((uint32_t)0x00002000)          /*!< 16 */
N#define ADC14_CTL0_SHT1_3                        ((uint32_t)0x00003000)          /*!< 32 */
N#define ADC14_CTL0_SHT1_4                        ((uint32_t)0x00004000)          /*!< 64 */
N#define ADC14_CTL0_SHT1_5                        ((uint32_t)0x00005000)          /*!< 96 */
N#define ADC14_CTL0_SHT1_6                        ((uint32_t)0x00006000)          /*!< 128 */
N#define ADC14_CTL0_SHT1_7                        ((uint32_t)0x00007000)          /*!< 192 */
N#define ADC14_CTL0_SHT1__4                       ((uint32_t)0x00000000)          /*!< 4 */
N#define ADC14_CTL0_SHT1__8                       ((uint32_t)0x00001000)          /*!< 8 */
N#define ADC14_CTL0_SHT1__16                      ((uint32_t)0x00002000)          /*!< 16 */
N#define ADC14_CTL0_SHT1__32                      ((uint32_t)0x00003000)          /*!< 32 */
N#define ADC14_CTL0_SHT1__64                      ((uint32_t)0x00004000)          /*!< 64 */
N#define ADC14_CTL0_SHT1__96                      ((uint32_t)0x00005000)          /*!< 96 */
N#define ADC14_CTL0_SHT1__128                     ((uint32_t)0x00006000)          /*!< 128 */
N#define ADC14_CTL0_SHT1__192                     ((uint32_t)0x00007000)          /*!< 192 */
N/* ADC14_CTL0[BUSY] Bits */
N#define ADC14_CTL0_BUSY_OFS                      (16)                            /*!< ADC14BUSY Bit Offset */
N#define ADC14_CTL0_BUSY                          ((uint32_t)0x00010000)          /*!< ADC14 busy */
N/* ADC14_CTL0[CONSEQ] Bits */
N#define ADC14_CTL0_CONSEQ_OFS                    (17)                            /*!< ADC14CONSEQ Bit Offset */
N#define ADC14_CTL0_CONSEQ_MASK                   ((uint32_t)0x00060000)          /*!< ADC14CONSEQ Bit Mask */
N#define ADC14_CTL0_CONSEQ0                       ((uint32_t)0x00020000)          /*!< CONSEQ Bit 0 */
N#define ADC14_CTL0_CONSEQ1                       ((uint32_t)0x00040000)          /*!< CONSEQ Bit 1 */
N#define ADC14_CTL0_CONSEQ_0                      ((uint32_t)0x00000000)          /*!< Single-channel, single-conversion */
N#define ADC14_CTL0_CONSEQ_1                      ((uint32_t)0x00020000)          /*!< Sequence-of-channels */
N#define ADC14_CTL0_CONSEQ_2                      ((uint32_t)0x00040000)          /*!< Repeat-single-channel */
N#define ADC14_CTL0_CONSEQ_3                      ((uint32_t)0x00060000)          /*!< Repeat-sequence-of-channels */
N/* ADC14_CTL0[SSEL] Bits */
N#define ADC14_CTL0_SSEL_OFS                      (19)                            /*!< ADC14SSEL Bit Offset */
N#define ADC14_CTL0_SSEL_MASK                     ((uint32_t)0x00380000)          /*!< ADC14SSEL Bit Mask */
N#define ADC14_CTL0_SSEL0                         ((uint32_t)0x00080000)          /*!< SSEL Bit 0 */
N#define ADC14_CTL0_SSEL1                         ((uint32_t)0x00100000)          /*!< SSEL Bit 1 */
N#define ADC14_CTL0_SSEL2                         ((uint32_t)0x00200000)          /*!< SSEL Bit 2 */
N#define ADC14_CTL0_SSEL_0                        ((uint32_t)0x00000000)          /*!< MODCLK */
N#define ADC14_CTL0_SSEL_1                        ((uint32_t)0x00080000)          /*!< SYSCLK */
N#define ADC14_CTL0_SSEL_2                        ((uint32_t)0x00100000)          /*!< ACLK */
N#define ADC14_CTL0_SSEL_3                        ((uint32_t)0x00180000)          /*!< MCLK */
N#define ADC14_CTL0_SSEL_4                        ((uint32_t)0x00200000)          /*!< SMCLK */
N#define ADC14_CTL0_SSEL_5                        ((uint32_t)0x00280000)          /*!< HSMCLK */
N#define ADC14_CTL0_SSEL__MODCLK                  ((uint32_t)0x00000000)          /*!< MODCLK */
N#define ADC14_CTL0_SSEL__SYSCLK                  ((uint32_t)0x00080000)          /*!< SYSCLK */
N#define ADC14_CTL0_SSEL__ACLK                    ((uint32_t)0x00100000)          /*!< ACLK */
N#define ADC14_CTL0_SSEL__MCLK                    ((uint32_t)0x00180000)          /*!< MCLK */
N#define ADC14_CTL0_SSEL__SMCLK                   ((uint32_t)0x00200000)          /*!< SMCLK */
N#define ADC14_CTL0_SSEL__HSMCLK                  ((uint32_t)0x00280000)          /*!< HSMCLK */
N/* ADC14_CTL0[DIV] Bits */
N#define ADC14_CTL0_DIV_OFS                       (22)                            /*!< ADC14DIV Bit Offset */
N#define ADC14_CTL0_DIV_MASK                      ((uint32_t)0x01C00000)          /*!< ADC14DIV Bit Mask */
N#define ADC14_CTL0_DIV0                          ((uint32_t)0x00400000)          /*!< DIV Bit 0 */
N#define ADC14_CTL0_DIV1                          ((uint32_t)0x00800000)          /*!< DIV Bit 1 */
N#define ADC14_CTL0_DIV2                          ((uint32_t)0x01000000)          /*!< DIV Bit 2 */
N#define ADC14_CTL0_DIV_0                         ((uint32_t)0x00000000)          /*!< /1 */
N#define ADC14_CTL0_DIV_1                         ((uint32_t)0x00400000)          /*!< /2 */
N#define ADC14_CTL0_DIV_2                         ((uint32_t)0x00800000)          /*!< /3 */
N#define ADC14_CTL0_DIV_3                         ((uint32_t)0x00C00000)          /*!< /4 */
N#define ADC14_CTL0_DIV_4                         ((uint32_t)0x01000000)          /*!< /5 */
N#define ADC14_CTL0_DIV_5                         ((uint32_t)0x01400000)          /*!< /6 */
N#define ADC14_CTL0_DIV_6                         ((uint32_t)0x01800000)          /*!< /7 */
N#define ADC14_CTL0_DIV_7                         ((uint32_t)0x01C00000)          /*!< /8 */
N#define ADC14_CTL0_DIV__1                        ((uint32_t)0x00000000)          /*!< /1 */
N#define ADC14_CTL0_DIV__2                        ((uint32_t)0x00400000)          /*!< /2 */
N#define ADC14_CTL0_DIV__3                        ((uint32_t)0x00800000)          /*!< /3 */
N#define ADC14_CTL0_DIV__4                        ((uint32_t)0x00C00000)          /*!< /4 */
N#define ADC14_CTL0_DIV__5                        ((uint32_t)0x01000000)          /*!< /5 */
N#define ADC14_CTL0_DIV__6                        ((uint32_t)0x01400000)          /*!< /6 */
N#define ADC14_CTL0_DIV__7                        ((uint32_t)0x01800000)          /*!< /7 */
N#define ADC14_CTL0_DIV__8                        ((uint32_t)0x01C00000)          /*!< /8 */
N/* ADC14_CTL0[ISSH] Bits */
N#define ADC14_CTL0_ISSH_OFS                      (25)                            /*!< ADC14ISSH Bit Offset */
N#define ADC14_CTL0_ISSH                          ((uint32_t)0x02000000)          /*!< ADC14 invert signal sample-and-hold */
N/* ADC14_CTL0[SHP] Bits */
N#define ADC14_CTL0_SHP_OFS                       (26)                            /*!< ADC14SHP Bit Offset */
N#define ADC14_CTL0_SHP                           ((uint32_t)0x04000000)          /*!< ADC14 sample-and-hold pulse-mode select */
N/* ADC14_CTL0[SHS] Bits */
N#define ADC14_CTL0_SHS_OFS                       (27)                            /*!< ADC14SHS Bit Offset */
N#define ADC14_CTL0_SHS_MASK                      ((uint32_t)0x38000000)          /*!< ADC14SHS Bit Mask */
N#define ADC14_CTL0_SHS0                          ((uint32_t)0x08000000)          /*!< SHS Bit 0 */
N#define ADC14_CTL0_SHS1                          ((uint32_t)0x10000000)          /*!< SHS Bit 1 */
N#define ADC14_CTL0_SHS2                          ((uint32_t)0x20000000)          /*!< SHS Bit 2 */
N#define ADC14_CTL0_SHS_0                         ((uint32_t)0x00000000)          /*!< ADC14SC bit */
N#define ADC14_CTL0_SHS_1                         ((uint32_t)0x08000000)          /*!< See device-specific data sheet for source */
N#define ADC14_CTL0_SHS_2                         ((uint32_t)0x10000000)          /*!< See device-specific data sheet for source */
N#define ADC14_CTL0_SHS_3                         ((uint32_t)0x18000000)          /*!< See device-specific data sheet for source */
N#define ADC14_CTL0_SHS_4                         ((uint32_t)0x20000000)          /*!< See device-specific data sheet for source */
N#define ADC14_CTL0_SHS_5                         ((uint32_t)0x28000000)          /*!< See device-specific data sheet for source */
N#define ADC14_CTL0_SHS_6                         ((uint32_t)0x30000000)          /*!< See device-specific data sheet for source */
N#define ADC14_CTL0_SHS_7                         ((uint32_t)0x38000000)          /*!< See device-specific data sheet for source */
N/* ADC14_CTL0[PDIV] Bits */
N#define ADC14_CTL0_PDIV_OFS                      (30)                            /*!< ADC14PDIV Bit Offset */
N#define ADC14_CTL0_PDIV_MASK                     ((uint32_t)0xC0000000)          /*!< ADC14PDIV Bit Mask */
N#define ADC14_CTL0_PDIV0                         ((uint32_t)0x40000000)          /*!< PDIV Bit 0 */
N#define ADC14_CTL0_PDIV1                         ((uint32_t)0x80000000)          /*!< PDIV Bit 1 */
N#define ADC14_CTL0_PDIV_0                        ((uint32_t)0x00000000)          /*!< Predivide by 1 */
N#define ADC14_CTL0_PDIV_1                        ((uint32_t)0x40000000)          /*!< Predivide by 4 */
N#define ADC14_CTL0_PDIV_2                        ((uint32_t)0x80000000)          /*!< Predivide by 32 */
N#define ADC14_CTL0_PDIV_3                        ((uint32_t)0xC0000000)          /*!< Predivide by 64 */
N#define ADC14_CTL0_PDIV__1                       ((uint32_t)0x00000000)          /*!< Predivide by 1 */
N#define ADC14_CTL0_PDIV__4                       ((uint32_t)0x40000000)          /*!< Predivide by 4 */
N#define ADC14_CTL0_PDIV__32                      ((uint32_t)0x80000000)          /*!< Predivide by 32 */
N#define ADC14_CTL0_PDIV__64                      ((uint32_t)0xC0000000)          /*!< Predivide by 64 */
N/* ADC14_CTL1[PWRMD] Bits */
N#define ADC14_CTL1_PWRMD_OFS                     ( 0)                            /*!< ADC14PWRMD Bit Offset */
N#define ADC14_CTL1_PWRMD_MASK                    ((uint32_t)0x00000003)          /*!< ADC14PWRMD Bit Mask */
N#define ADC14_CTL1_PWRMD0                        ((uint32_t)0x00000001)          /*!< PWRMD Bit 0 */
N#define ADC14_CTL1_PWRMD1                        ((uint32_t)0x00000002)          /*!< PWRMD Bit 1 */
N#define ADC14_CTL1_PWRMD_0                       ((uint32_t)0x00000000)          /*!< Regular power mode for use with any resolution setting. Sample rate can be  */
N                                                                                 /* up to 1 Msps. */
N#define ADC14_CTL1_PWRMD_2                       ((uint32_t)0x00000002)          /*!< Low-power mode for 12-bit, 10-bit, and 8-bit resolution settings. Sample  */
N                                                                                 /* rate must not exceed 200 ksps. */
N/* ADC14_CTL1[REFBURST] Bits */
N#define ADC14_CTL1_REFBURST_OFS                  ( 2)                            /*!< ADC14REFBURST Bit Offset */
N#define ADC14_CTL1_REFBURST                      ((uint32_t)0x00000004)          /*!< ADC14 reference buffer burst */
N/* ADC14_CTL1[DF] Bits */
N#define ADC14_CTL1_DF_OFS                        ( 3)                            /*!< ADC14DF Bit Offset */
N#define ADC14_CTL1_DF                            ((uint32_t)0x00000008)          /*!< ADC14 data read-back format */
N/* ADC14_CTL1[RES] Bits */
N#define ADC14_CTL1_RES_OFS                       ( 4)                            /*!< ADC14RES Bit Offset */
N#define ADC14_CTL1_RES_MASK                      ((uint32_t)0x00000030)          /*!< ADC14RES Bit Mask */
N#define ADC14_CTL1_RES0                          ((uint32_t)0x00000010)          /*!< RES Bit 0 */
N#define ADC14_CTL1_RES1                          ((uint32_t)0x00000020)          /*!< RES Bit 1 */
N#define ADC14_CTL1_RES_0                         ((uint32_t)0x00000000)          /*!< 8 bit (9 clock cycle conversion time) */
N#define ADC14_CTL1_RES_1                         ((uint32_t)0x00000010)          /*!< 10 bit (11 clock cycle conversion time) */
N#define ADC14_CTL1_RES_2                         ((uint32_t)0x00000020)          /*!< 12 bit (14 clock cycle conversion time) */
N#define ADC14_CTL1_RES_3                         ((uint32_t)0x00000030)          /*!< 14 bit (16 clock cycle conversion time) */
N#define ADC14_CTL1_RES__8BIT                     ((uint32_t)0x00000000)          /*!< 8 bit (9 clock cycle conversion time) */
N#define ADC14_CTL1_RES__10BIT                    ((uint32_t)0x00000010)          /*!< 10 bit (11 clock cycle conversion time) */
N#define ADC14_CTL1_RES__12BIT                    ((uint32_t)0x00000020)          /*!< 12 bit (14 clock cycle conversion time) */
N#define ADC14_CTL1_RES__14BIT                    ((uint32_t)0x00000030)          /*!< 14 bit (16 clock cycle conversion time) */
N/* ADC14_CTL1[CSTARTADD] Bits */
N#define ADC14_CTL1_CSTARTADD_OFS                 (16)                            /*!< ADC14CSTARTADD Bit Offset */
N#define ADC14_CTL1_CSTARTADD_MASK                ((uint32_t)0x001F0000)          /*!< ADC14CSTARTADD Bit Mask */
N/* ADC14_CTL1[BATMAP] Bits */
N#define ADC14_CTL1_BATMAP_OFS                    (22)                            /*!< ADC14BATMAP Bit Offset */
N#define ADC14_CTL1_BATMAP                        ((uint32_t)0x00400000)          /*!< Controls 1/2 AVCC ADC input channel selection */
N/* ADC14_CTL1[TCMAP] Bits */
N#define ADC14_CTL1_TCMAP_OFS                     (23)                            /*!< ADC14TCMAP Bit Offset */
N#define ADC14_CTL1_TCMAP                         ((uint32_t)0x00800000)          /*!< Controls temperature sensor ADC input channel selection */
N/* ADC14_CTL1[CH0MAP] Bits */
N#define ADC14_CTL1_CH0MAP_OFS                    (24)                            /*!< ADC14CH0MAP Bit Offset */
N#define ADC14_CTL1_CH0MAP                        ((uint32_t)0x01000000)          /*!< Controls internal channel 0 selection to ADC input channel MAX-2 */
N/* ADC14_CTL1[CH1MAP] Bits */
N#define ADC14_CTL1_CH1MAP_OFS                    (25)                            /*!< ADC14CH1MAP Bit Offset */
N#define ADC14_CTL1_CH1MAP                        ((uint32_t)0x02000000)          /*!< Controls internal channel 1 selection to ADC input channel MAX-3 */
N/* ADC14_CTL1[CH2MAP] Bits */
N#define ADC14_CTL1_CH2MAP_OFS                    (26)                            /*!< ADC14CH2MAP Bit Offset */
N#define ADC14_CTL1_CH2MAP                        ((uint32_t)0x04000000)          /*!< Controls internal channel 2 selection to ADC input channel MAX-4 */
N/* ADC14_CTL1[CH3MAP] Bits */
N#define ADC14_CTL1_CH3MAP_OFS                    (27)                            /*!< ADC14CH3MAP Bit Offset */
N#define ADC14_CTL1_CH3MAP                        ((uint32_t)0x08000000)          /*!< Controls internal channel 3 selection to ADC input channel MAX-5 */
N/* ADC14_LO0[LO0] Bits */
N#define ADC14_LO0_LO0_OFS                        ( 0)                            /*!< ADC14LO0 Bit Offset */
N#define ADC14_LO0_LO0_MASK                       ((uint32_t)0x0000FFFF)          /*!< ADC14LO0 Bit Mask */
N/* ADC14_HI0[HI0] Bits */
N#define ADC14_HI0_HI0_OFS                        ( 0)                            /*!< ADC14HI0 Bit Offset */
N#define ADC14_HI0_HI0_MASK                       ((uint32_t)0x0000FFFF)          /*!< ADC14HI0 Bit Mask */
N/* ADC14_LO1[LO1] Bits */
N#define ADC14_LO1_LO1_OFS                        ( 0)                            /*!< ADC14LO1 Bit Offset */
N#define ADC14_LO1_LO1_MASK                       ((uint32_t)0x0000FFFF)          /*!< ADC14LO1 Bit Mask */
N/* ADC14_HI1[HI1] Bits */
N#define ADC14_HI1_HI1_OFS                        ( 0)                            /*!< ADC14HI1 Bit Offset */
N#define ADC14_HI1_HI1_MASK                       ((uint32_t)0x0000FFFF)          /*!< ADC14HI1 Bit Mask */
N/* ADC14_MCTLN[INCH] Bits */
N#define ADC14_MCTLN_INCH_OFS                     ( 0)                            /*!< ADC14INCH Bit Offset */
N#define ADC14_MCTLN_INCH_MASK                    ((uint32_t)0x0000001F)          /*!< ADC14INCH Bit Mask */
N#define ADC14_MCTLN_INCH0                        ((uint32_t)0x00000001)          /*!< INCH Bit 0 */
N#define ADC14_MCTLN_INCH1                        ((uint32_t)0x00000002)          /*!< INCH Bit 1 */
N#define ADC14_MCTLN_INCH2                        ((uint32_t)0x00000004)          /*!< INCH Bit 2 */
N#define ADC14_MCTLN_INCH3                        ((uint32_t)0x00000008)          /*!< INCH Bit 3 */
N#define ADC14_MCTLN_INCH4                        ((uint32_t)0x00000010)          /*!< INCH Bit 4 */
N#define ADC14_MCTLN_INCH_0                       ((uint32_t)0x00000000)          /*!< If ADC14DIF = 0: A0; If ADC14DIF = 1: Ain+ = A0, Ain- = A1 */
N#define ADC14_MCTLN_INCH_1                       ((uint32_t)0x00000001)          /*!< If ADC14DIF = 0: A1; If ADC14DIF = 1: Ain+ = A0, Ain- = A1 */
N#define ADC14_MCTLN_INCH_2                       ((uint32_t)0x00000002)          /*!< If ADC14DIF = 0: A2; If ADC14DIF = 1: Ain+ = A2, Ain- = A3 */
N#define ADC14_MCTLN_INCH_3                       ((uint32_t)0x00000003)          /*!< If ADC14DIF = 0: A3; If ADC14DIF = 1: Ain+ = A2, Ain- = A3 */
N#define ADC14_MCTLN_INCH_4                       ((uint32_t)0x00000004)          /*!< If ADC14DIF = 0: A4; If ADC14DIF = 1: Ain+ = A4, Ain- = A5 */
N#define ADC14_MCTLN_INCH_5                       ((uint32_t)0x00000005)          /*!< If ADC14DIF = 0: A5; If ADC14DIF = 1: Ain+ = A4, Ain- = A5 */
N#define ADC14_MCTLN_INCH_6                       ((uint32_t)0x00000006)          /*!< If ADC14DIF = 0: A6; If ADC14DIF = 1: Ain+ = A6, Ain- = A7 */
N#define ADC14_MCTLN_INCH_7                       ((uint32_t)0x00000007)          /*!< If ADC14DIF = 0: A7; If ADC14DIF = 1: Ain+ = A6, Ain- = A7 */
N#define ADC14_MCTLN_INCH_8                       ((uint32_t)0x00000008)          /*!< If ADC14DIF = 0: A8; If ADC14DIF = 1: Ain+ = A8, Ain- = A9 */
N#define ADC14_MCTLN_INCH_9                       ((uint32_t)0x00000009)          /*!< If ADC14DIF = 0: A9; If ADC14DIF = 1: Ain+ = A8, Ain- = A9 */
N#define ADC14_MCTLN_INCH_10                      ((uint32_t)0x0000000A)          /*!< If ADC14DIF = 0: A10; If ADC14DIF = 1: Ain+ = A10, Ain- = A11 */
N#define ADC14_MCTLN_INCH_11                      ((uint32_t)0x0000000B)          /*!< If ADC14DIF = 0: A11; If ADC14DIF = 1: Ain+ = A10, Ain- = A11 */
N#define ADC14_MCTLN_INCH_12                      ((uint32_t)0x0000000C)          /*!< If ADC14DIF = 0: A12; If ADC14DIF = 1: Ain+ = A12, Ain- = A13 */
N#define ADC14_MCTLN_INCH_13                      ((uint32_t)0x0000000D)          /*!< If ADC14DIF = 0: A13; If ADC14DIF = 1: Ain+ = A12, Ain- = A13 */
N#define ADC14_MCTLN_INCH_14                      ((uint32_t)0x0000000E)          /*!< If ADC14DIF = 0: A14; If ADC14DIF = 1: Ain+ = A14, Ain- = A15 */
N#define ADC14_MCTLN_INCH_15                      ((uint32_t)0x0000000F)          /*!< If ADC14DIF = 0: A15; If ADC14DIF = 1: Ain+ = A14, Ain- = A15 */
N#define ADC14_MCTLN_INCH_16                      ((uint32_t)0x00000010)          /*!< If ADC14DIF = 0: A16; If ADC14DIF = 1: Ain+ = A16, Ain- = A17 */
N#define ADC14_MCTLN_INCH_17                      ((uint32_t)0x00000011)          /*!< If ADC14DIF = 0: A17; If ADC14DIF = 1: Ain+ = A16, Ain- = A17 */
N#define ADC14_MCTLN_INCH_18                      ((uint32_t)0x00000012)          /*!< If ADC14DIF = 0: A18; If ADC14DIF = 1: Ain+ = A18, Ain- = A19 */
N#define ADC14_MCTLN_INCH_19                      ((uint32_t)0x00000013)          /*!< If ADC14DIF = 0: A19; If ADC14DIF = 1: Ain+ = A18, Ain- = A19 */
N#define ADC14_MCTLN_INCH_20                      ((uint32_t)0x00000014)          /*!< If ADC14DIF = 0: A20; If ADC14DIF = 1: Ain+ = A20, Ain- = A21 */
N#define ADC14_MCTLN_INCH_21                      ((uint32_t)0x00000015)          /*!< If ADC14DIF = 0: A21; If ADC14DIF = 1: Ain+ = A20, Ain- = A21 */
N#define ADC14_MCTLN_INCH_22                      ((uint32_t)0x00000016)          /*!< If ADC14DIF = 0: A22; If ADC14DIF = 1: Ain+ = A22, Ain- = A23 */
N#define ADC14_MCTLN_INCH_23                      ((uint32_t)0x00000017)          /*!< If ADC14DIF = 0: A23; If ADC14DIF = 1: Ain+ = A22, Ain- = A23 */
N#define ADC14_MCTLN_INCH_24                      ((uint32_t)0x00000018)          /*!< If ADC14DIF = 0: A24; If ADC14DIF = 1: Ain+ = A24, Ain- = A25 */
N#define ADC14_MCTLN_INCH_25                      ((uint32_t)0x00000019)          /*!< If ADC14DIF = 0: A25; If ADC14DIF = 1: Ain+ = A24, Ain- = A25 */
N#define ADC14_MCTLN_INCH_26                      ((uint32_t)0x0000001A)          /*!< If ADC14DIF = 0: A26; If ADC14DIF = 1: Ain+ = A26, Ain- = A27 */
N#define ADC14_MCTLN_INCH_27                      ((uint32_t)0x0000001B)          /*!< If ADC14DIF = 0: A27; If ADC14DIF = 1: Ain+ = A26, Ain- = A27 */
N#define ADC14_MCTLN_INCH_28                      ((uint32_t)0x0000001C)          /*!< If ADC14DIF = 0: A28; If ADC14DIF = 1: Ain+ = A28, Ain- = A29 */
N#define ADC14_MCTLN_INCH_29                      ((uint32_t)0x0000001D)          /*!< If ADC14DIF = 0: A29; If ADC14DIF = 1: Ain+ = A28, Ain- = A29 */
N#define ADC14_MCTLN_INCH_30                      ((uint32_t)0x0000001E)          /*!< If ADC14DIF = 0: A30; If ADC14DIF = 1: Ain+ = A30, Ain- = A31 */
N#define ADC14_MCTLN_INCH_31                      ((uint32_t)0x0000001F)          /*!< If ADC14DIF = 0: A31; If ADC14DIF = 1: Ain+ = A30, Ain- = A31 */
N/* ADC14_MCTLN[EOS] Bits */
N#define ADC14_MCTLN_EOS_OFS                      ( 7)                            /*!< ADC14EOS Bit Offset */
N#define ADC14_MCTLN_EOS                          ((uint32_t)0x00000080)          /*!< End of sequence */
N/* ADC14_MCTLN[VRSEL] Bits */
N#define ADC14_MCTLN_VRSEL_OFS                    ( 8)                            /*!< ADC14VRSEL Bit Offset */
N#define ADC14_MCTLN_VRSEL_MASK                   ((uint32_t)0x00000F00)          /*!< ADC14VRSEL Bit Mask */
N#define ADC14_MCTLN_VRSEL0                       ((uint32_t)0x00000100)          /*!< VRSEL Bit 0 */
N#define ADC14_MCTLN_VRSEL1                       ((uint32_t)0x00000200)          /*!< VRSEL Bit 1 */
N#define ADC14_MCTLN_VRSEL2                       ((uint32_t)0x00000400)          /*!< VRSEL Bit 2 */
N#define ADC14_MCTLN_VRSEL3                       ((uint32_t)0x00000800)          /*!< VRSEL Bit 3 */
N#define ADC14_MCTLN_VRSEL_0                      ((uint32_t)0x00000000)          /*!< V(R+) = AVCC, V(R-) = AVSS */
N#define ADC14_MCTLN_VRSEL_1                      ((uint32_t)0x00000100)          /*!< V(R+) = VREF buffered, V(R-) = AVSS */
N#define ADC14_MCTLN_VRSEL_14                     ((uint32_t)0x00000E00)          /*!< V(R+) = VeREF+, V(R-) = VeREF- */
N#define ADC14_MCTLN_VRSEL_15                     ((uint32_t)0x00000F00)          /*!< V(R+) = VeREF+ buffered, V(R-) = VeREF */
N/* ADC14_MCTLN[DIF] Bits */
N#define ADC14_MCTLN_DIF_OFS                      (13)                            /*!< ADC14DIF Bit Offset */
N#define ADC14_MCTLN_DIF                          ((uint32_t)0x00002000)          /*!< Differential mode */
N/* ADC14_MCTLN[WINC] Bits */
N#define ADC14_MCTLN_WINC_OFS                     (14)                            /*!< ADC14WINC Bit Offset */
N#define ADC14_MCTLN_WINC                         ((uint32_t)0x00004000)          /*!< Comparator window enable */
N/* ADC14_MCTLN[WINCTH] Bits */
N#define ADC14_MCTLN_WINCTH_OFS                   (15)                            /*!< ADC14WINCTH Bit Offset */
N#define ADC14_MCTLN_WINCTH                       ((uint32_t)0x00008000)          /*!< Window comparator threshold register selection */
N/* ADC14_MEMN[CONVRES] Bits */
N#define ADC14_MEMN_CONVRES_OFS                   ( 0)                            /*!< Conversion_Results Bit Offset */
N#define ADC14_MEMN_CONVRES_MASK                  ((uint32_t)0x0000FFFF)          /*!< Conversion_Results Bit Mask */
N/* ADC14_IER0[IE0] Bits */
N#define ADC14_IER0_IE0_OFS                       ( 0)                            /*!< ADC14IE0 Bit Offset */
N#define ADC14_IER0_IE0                           ((uint32_t)0x00000001)          /*!< Interrupt enable */
N/* ADC14_IER0[IE1] Bits */
N#define ADC14_IER0_IE1_OFS                       ( 1)                            /*!< ADC14IE1 Bit Offset */
N#define ADC14_IER0_IE1                           ((uint32_t)0x00000002)          /*!< Interrupt enable */
N/* ADC14_IER0[IE2] Bits */
N#define ADC14_IER0_IE2_OFS                       ( 2)                            /*!< ADC14IE2 Bit Offset */
N#define ADC14_IER0_IE2                           ((uint32_t)0x00000004)          /*!< Interrupt enable */
N/* ADC14_IER0[IE3] Bits */
N#define ADC14_IER0_IE3_OFS                       ( 3)                            /*!< ADC14IE3 Bit Offset */
N#define ADC14_IER0_IE3                           ((uint32_t)0x00000008)          /*!< Interrupt enable */
N/* ADC14_IER0[IE4] Bits */
N#define ADC14_IER0_IE4_OFS                       ( 4)                            /*!< ADC14IE4 Bit Offset */
N#define ADC14_IER0_IE4                           ((uint32_t)0x00000010)          /*!< Interrupt enable */
N/* ADC14_IER0[IE5] Bits */
N#define ADC14_IER0_IE5_OFS                       ( 5)                            /*!< ADC14IE5 Bit Offset */
N#define ADC14_IER0_IE5                           ((uint32_t)0x00000020)          /*!< Interrupt enable */
N/* ADC14_IER0[IE6] Bits */
N#define ADC14_IER0_IE6_OFS                       ( 6)                            /*!< ADC14IE6 Bit Offset */
N#define ADC14_IER0_IE6                           ((uint32_t)0x00000040)          /*!< Interrupt enable */
N/* ADC14_IER0[IE7] Bits */
N#define ADC14_IER0_IE7_OFS                       ( 7)                            /*!< ADC14IE7 Bit Offset */
N#define ADC14_IER0_IE7                           ((uint32_t)0x00000080)          /*!< Interrupt enable */
N/* ADC14_IER0[IE8] Bits */
N#define ADC14_IER0_IE8_OFS                       ( 8)                            /*!< ADC14IE8 Bit Offset */
N#define ADC14_IER0_IE8                           ((uint32_t)0x00000100)          /*!< Interrupt enable */
N/* ADC14_IER0[IE9] Bits */
N#define ADC14_IER0_IE9_OFS                       ( 9)                            /*!< ADC14IE9 Bit Offset */
N#define ADC14_IER0_IE9                           ((uint32_t)0x00000200)          /*!< Interrupt enable */
N/* ADC14_IER0[IE10] Bits */
N#define ADC14_IER0_IE10_OFS                      (10)                            /*!< ADC14IE10 Bit Offset */
N#define ADC14_IER0_IE10                          ((uint32_t)0x00000400)          /*!< Interrupt enable */
N/* ADC14_IER0[IE11] Bits */
N#define ADC14_IER0_IE11_OFS                      (11)                            /*!< ADC14IE11 Bit Offset */
N#define ADC14_IER0_IE11                          ((uint32_t)0x00000800)          /*!< Interrupt enable */
N/* ADC14_IER0[IE12] Bits */
N#define ADC14_IER0_IE12_OFS                      (12)                            /*!< ADC14IE12 Bit Offset */
N#define ADC14_IER0_IE12                          ((uint32_t)0x00001000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE13] Bits */
N#define ADC14_IER0_IE13_OFS                      (13)                            /*!< ADC14IE13 Bit Offset */
N#define ADC14_IER0_IE13                          ((uint32_t)0x00002000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE14] Bits */
N#define ADC14_IER0_IE14_OFS                      (14)                            /*!< ADC14IE14 Bit Offset */
N#define ADC14_IER0_IE14                          ((uint32_t)0x00004000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE15] Bits */
N#define ADC14_IER0_IE15_OFS                      (15)                            /*!< ADC14IE15 Bit Offset */
N#define ADC14_IER0_IE15                          ((uint32_t)0x00008000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE16] Bits */
N#define ADC14_IER0_IE16_OFS                      (16)                            /*!< ADC14IE16 Bit Offset */
N#define ADC14_IER0_IE16                          ((uint32_t)0x00010000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE17] Bits */
N#define ADC14_IER0_IE17_OFS                      (17)                            /*!< ADC14IE17 Bit Offset */
N#define ADC14_IER0_IE17                          ((uint32_t)0x00020000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE19] Bits */
N#define ADC14_IER0_IE19_OFS                      (19)                            /*!< ADC14IE19 Bit Offset */
N#define ADC14_IER0_IE19                          ((uint32_t)0x00080000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE18] Bits */
N#define ADC14_IER0_IE18_OFS                      (18)                            /*!< ADC14IE18 Bit Offset */
N#define ADC14_IER0_IE18                          ((uint32_t)0x00040000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE20] Bits */
N#define ADC14_IER0_IE20_OFS                      (20)                            /*!< ADC14IE20 Bit Offset */
N#define ADC14_IER0_IE20                          ((uint32_t)0x00100000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE21] Bits */
N#define ADC14_IER0_IE21_OFS                      (21)                            /*!< ADC14IE21 Bit Offset */
N#define ADC14_IER0_IE21                          ((uint32_t)0x00200000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE22] Bits */
N#define ADC14_IER0_IE22_OFS                      (22)                            /*!< ADC14IE22 Bit Offset */
N#define ADC14_IER0_IE22                          ((uint32_t)0x00400000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE23] Bits */
N#define ADC14_IER0_IE23_OFS                      (23)                            /*!< ADC14IE23 Bit Offset */
N#define ADC14_IER0_IE23                          ((uint32_t)0x00800000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE24] Bits */
N#define ADC14_IER0_IE24_OFS                      (24)                            /*!< ADC14IE24 Bit Offset */
N#define ADC14_IER0_IE24                          ((uint32_t)0x01000000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE25] Bits */
N#define ADC14_IER0_IE25_OFS                      (25)                            /*!< ADC14IE25 Bit Offset */
N#define ADC14_IER0_IE25                          ((uint32_t)0x02000000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE26] Bits */
N#define ADC14_IER0_IE26_OFS                      (26)                            /*!< ADC14IE26 Bit Offset */
N#define ADC14_IER0_IE26                          ((uint32_t)0x04000000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE27] Bits */
N#define ADC14_IER0_IE27_OFS                      (27)                            /*!< ADC14IE27 Bit Offset */
N#define ADC14_IER0_IE27                          ((uint32_t)0x08000000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE28] Bits */
N#define ADC14_IER0_IE28_OFS                      (28)                            /*!< ADC14IE28 Bit Offset */
N#define ADC14_IER0_IE28                          ((uint32_t)0x10000000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE29] Bits */
N#define ADC14_IER0_IE29_OFS                      (29)                            /*!< ADC14IE29 Bit Offset */
N#define ADC14_IER0_IE29                          ((uint32_t)0x20000000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE30] Bits */
N#define ADC14_IER0_IE30_OFS                      (30)                            /*!< ADC14IE30 Bit Offset */
N#define ADC14_IER0_IE30                          ((uint32_t)0x40000000)          /*!< Interrupt enable */
N/* ADC14_IER0[IE31] Bits */
N#define ADC14_IER0_IE31_OFS                      (31)                            /*!< ADC14IE31 Bit Offset */
N#define ADC14_IER0_IE31                          ((uint32_t)0x80000000)          /*!< Interrupt enable */
N/* ADC14_IER1[INIE] Bits */
N#define ADC14_IER1_INIE_OFS                      ( 1)                            /*!< ADC14INIE Bit Offset */
N#define ADC14_IER1_INIE                          ((uint32_t)0x00000002)          /*!< Interrupt enable for ADC14MEMx within comparator window */
N/* ADC14_IER1[LOIE] Bits */
N#define ADC14_IER1_LOIE_OFS                      ( 2)                            /*!< ADC14LOIE Bit Offset */
N#define ADC14_IER1_LOIE                          ((uint32_t)0x00000004)          /*!< Interrupt enable for ADC14MEMx below comparator window */
N/* ADC14_IER1[HIIE] Bits */
N#define ADC14_IER1_HIIE_OFS                      ( 3)                            /*!< ADC14HIIE Bit Offset */
N#define ADC14_IER1_HIIE                          ((uint32_t)0x00000008)          /*!< Interrupt enable for ADC14MEMx above comparator window */
N/* ADC14_IER1[OVIE] Bits */
N#define ADC14_IER1_OVIE_OFS                      ( 4)                            /*!< ADC14OVIE Bit Offset */
N#define ADC14_IER1_OVIE                          ((uint32_t)0x00000010)          /*!< ADC14MEMx overflow-interrupt enable */
N/* ADC14_IER1[TOVIE] Bits */
N#define ADC14_IER1_TOVIE_OFS                     ( 5)                            /*!< ADC14TOVIE Bit Offset */
N#define ADC14_IER1_TOVIE                         ((uint32_t)0x00000020)          /*!< ADC14 conversion-time-overflow interrupt enable */
N/* ADC14_IER1[RDYIE] Bits */
N#define ADC14_IER1_RDYIE_OFS                     ( 6)                            /*!< ADC14RDYIE Bit Offset */
N#define ADC14_IER1_RDYIE                         ((uint32_t)0x00000040)          /*!< ADC14 local buffered reference ready interrupt enable */
N/* ADC14_IFGR0[IFG0] Bits */
N#define ADC14_IFGR0_IFG0_OFS                     ( 0)                            /*!< ADC14IFG0 Bit Offset */
N#define ADC14_IFGR0_IFG0                         ((uint32_t)0x00000001)          /*!< ADC14MEM0 interrupt flag */
N/* ADC14_IFGR0[IFG1] Bits */
N#define ADC14_IFGR0_IFG1_OFS                     ( 1)                            /*!< ADC14IFG1 Bit Offset */
N#define ADC14_IFGR0_IFG1                         ((uint32_t)0x00000002)          /*!< ADC14MEM1 interrupt flag */
N/* ADC14_IFGR0[IFG2] Bits */
N#define ADC14_IFGR0_IFG2_OFS                     ( 2)                            /*!< ADC14IFG2 Bit Offset */
N#define ADC14_IFGR0_IFG2                         ((uint32_t)0x00000004)          /*!< ADC14MEM2 interrupt flag */
N/* ADC14_IFGR0[IFG3] Bits */
N#define ADC14_IFGR0_IFG3_OFS                     ( 3)                            /*!< ADC14IFG3 Bit Offset */
N#define ADC14_IFGR0_IFG3                         ((uint32_t)0x00000008)          /*!< ADC14MEM3 interrupt flag */
N/* ADC14_IFGR0[IFG4] Bits */
N#define ADC14_IFGR0_IFG4_OFS                     ( 4)                            /*!< ADC14IFG4 Bit Offset */
N#define ADC14_IFGR0_IFG4                         ((uint32_t)0x00000010)          /*!< ADC14MEM4 interrupt flag */
N/* ADC14_IFGR0[IFG5] Bits */
N#define ADC14_IFGR0_IFG5_OFS                     ( 5)                            /*!< ADC14IFG5 Bit Offset */
N#define ADC14_IFGR0_IFG5                         ((uint32_t)0x00000020)          /*!< ADC14MEM5 interrupt flag */
N/* ADC14_IFGR0[IFG6] Bits */
N#define ADC14_IFGR0_IFG6_OFS                     ( 6)                            /*!< ADC14IFG6 Bit Offset */
N#define ADC14_IFGR0_IFG6                         ((uint32_t)0x00000040)          /*!< ADC14MEM6 interrupt flag */
N/* ADC14_IFGR0[IFG7] Bits */
N#define ADC14_IFGR0_IFG7_OFS                     ( 7)                            /*!< ADC14IFG7 Bit Offset */
N#define ADC14_IFGR0_IFG7                         ((uint32_t)0x00000080)          /*!< ADC14MEM7 interrupt flag */
N/* ADC14_IFGR0[IFG8] Bits */
N#define ADC14_IFGR0_IFG8_OFS                     ( 8)                            /*!< ADC14IFG8 Bit Offset */
N#define ADC14_IFGR0_IFG8                         ((uint32_t)0x00000100)          /*!< ADC14MEM8 interrupt flag */
N/* ADC14_IFGR0[IFG9] Bits */
N#define ADC14_IFGR0_IFG9_OFS                     ( 9)                            /*!< ADC14IFG9 Bit Offset */
N#define ADC14_IFGR0_IFG9                         ((uint32_t)0x00000200)          /*!< ADC14MEM9 interrupt flag */
N/* ADC14_IFGR0[IFG10] Bits */
N#define ADC14_IFGR0_IFG10_OFS                    (10)                            /*!< ADC14IFG10 Bit Offset */
N#define ADC14_IFGR0_IFG10                        ((uint32_t)0x00000400)          /*!< ADC14MEM10 interrupt flag */
N/* ADC14_IFGR0[IFG11] Bits */
N#define ADC14_IFGR0_IFG11_OFS                    (11)                            /*!< ADC14IFG11 Bit Offset */
N#define ADC14_IFGR0_IFG11                        ((uint32_t)0x00000800)          /*!< ADC14MEM11 interrupt flag */
N/* ADC14_IFGR0[IFG12] Bits */
N#define ADC14_IFGR0_IFG12_OFS                    (12)                            /*!< ADC14IFG12 Bit Offset */
N#define ADC14_IFGR0_IFG12                        ((uint32_t)0x00001000)          /*!< ADC14MEM12 interrupt flag */
N/* ADC14_IFGR0[IFG13] Bits */
N#define ADC14_IFGR0_IFG13_OFS                    (13)                            /*!< ADC14IFG13 Bit Offset */
N#define ADC14_IFGR0_IFG13                        ((uint32_t)0x00002000)          /*!< ADC14MEM13 interrupt flag */
N/* ADC14_IFGR0[IFG14] Bits */
N#define ADC14_IFGR0_IFG14_OFS                    (14)                            /*!< ADC14IFG14 Bit Offset */
N#define ADC14_IFGR0_IFG14                        ((uint32_t)0x00004000)          /*!< ADC14MEM14 interrupt flag */
N/* ADC14_IFGR0[IFG15] Bits */
N#define ADC14_IFGR0_IFG15_OFS                    (15)                            /*!< ADC14IFG15 Bit Offset */
N#define ADC14_IFGR0_IFG15                        ((uint32_t)0x00008000)          /*!< ADC14MEM15 interrupt flag */
N/* ADC14_IFGR0[IFG16] Bits */
N#define ADC14_IFGR0_IFG16_OFS                    (16)                            /*!< ADC14IFG16 Bit Offset */
N#define ADC14_IFGR0_IFG16                        ((uint32_t)0x00010000)          /*!< ADC14MEM16 interrupt flag */
N/* ADC14_IFGR0[IFG17] Bits */
N#define ADC14_IFGR0_IFG17_OFS                    (17)                            /*!< ADC14IFG17 Bit Offset */
N#define ADC14_IFGR0_IFG17                        ((uint32_t)0x00020000)          /*!< ADC14MEM17 interrupt flag */
N/* ADC14_IFGR0[IFG18] Bits */
N#define ADC14_IFGR0_IFG18_OFS                    (18)                            /*!< ADC14IFG18 Bit Offset */
N#define ADC14_IFGR0_IFG18                        ((uint32_t)0x00040000)          /*!< ADC14MEM18 interrupt flag */
N/* ADC14_IFGR0[IFG19] Bits */
N#define ADC14_IFGR0_IFG19_OFS                    (19)                            /*!< ADC14IFG19 Bit Offset */
N#define ADC14_IFGR0_IFG19                        ((uint32_t)0x00080000)          /*!< ADC14MEM19 interrupt flag */
N/* ADC14_IFGR0[IFG20] Bits */
N#define ADC14_IFGR0_IFG20_OFS                    (20)                            /*!< ADC14IFG20 Bit Offset */
N#define ADC14_IFGR0_IFG20                        ((uint32_t)0x00100000)          /*!< ADC14MEM20 interrupt flag */
N/* ADC14_IFGR0[IFG21] Bits */
N#define ADC14_IFGR0_IFG21_OFS                    (21)                            /*!< ADC14IFG21 Bit Offset */
N#define ADC14_IFGR0_IFG21                        ((uint32_t)0x00200000)          /*!< ADC14MEM21 interrupt flag */
N/* ADC14_IFGR0[IFG22] Bits */
N#define ADC14_IFGR0_IFG22_OFS                    (22)                            /*!< ADC14IFG22 Bit Offset */
N#define ADC14_IFGR0_IFG22                        ((uint32_t)0x00400000)          /*!< ADC14MEM22 interrupt flag */
N/* ADC14_IFGR0[IFG23] Bits */
N#define ADC14_IFGR0_IFG23_OFS                    (23)                            /*!< ADC14IFG23 Bit Offset */
N#define ADC14_IFGR0_IFG23                        ((uint32_t)0x00800000)          /*!< ADC14MEM23 interrupt flag */
N/* ADC14_IFGR0[IFG24] Bits */
N#define ADC14_IFGR0_IFG24_OFS                    (24)                            /*!< ADC14IFG24 Bit Offset */
N#define ADC14_IFGR0_IFG24                        ((uint32_t)0x01000000)          /*!< ADC14MEM24 interrupt flag */
N/* ADC14_IFGR0[IFG25] Bits */
N#define ADC14_IFGR0_IFG25_OFS                    (25)                            /*!< ADC14IFG25 Bit Offset */
N#define ADC14_IFGR0_IFG25                        ((uint32_t)0x02000000)          /*!< ADC14MEM25 interrupt flag */
N/* ADC14_IFGR0[IFG26] Bits */
N#define ADC14_IFGR0_IFG26_OFS                    (26)                            /*!< ADC14IFG26 Bit Offset */
N#define ADC14_IFGR0_IFG26                        ((uint32_t)0x04000000)          /*!< ADC14MEM26 interrupt flag */
N/* ADC14_IFGR0[IFG27] Bits */
N#define ADC14_IFGR0_IFG27_OFS                    (27)                            /*!< ADC14IFG27 Bit Offset */
N#define ADC14_IFGR0_IFG27                        ((uint32_t)0x08000000)          /*!< ADC14MEM27 interrupt flag */
N/* ADC14_IFGR0[IFG28] Bits */
N#define ADC14_IFGR0_IFG28_OFS                    (28)                            /*!< ADC14IFG28 Bit Offset */
N#define ADC14_IFGR0_IFG28                        ((uint32_t)0x10000000)          /*!< ADC14MEM28 interrupt flag */
N/* ADC14_IFGR0[IFG29] Bits */
N#define ADC14_IFGR0_IFG29_OFS                    (29)                            /*!< ADC14IFG29 Bit Offset */
N#define ADC14_IFGR0_IFG29                        ((uint32_t)0x20000000)          /*!< ADC14MEM29 interrupt flag */
N/* ADC14_IFGR0[IFG30] Bits */
N#define ADC14_IFGR0_IFG30_OFS                    (30)                            /*!< ADC14IFG30 Bit Offset */
N#define ADC14_IFGR0_IFG30                        ((uint32_t)0x40000000)          /*!< ADC14MEM30 interrupt flag */
N/* ADC14_IFGR0[IFG31] Bits */
N#define ADC14_IFGR0_IFG31_OFS                    (31)                            /*!< ADC14IFG31 Bit Offset */
N#define ADC14_IFGR0_IFG31                        ((uint32_t)0x80000000)          /*!< ADC14MEM31 interrupt flag */
N/* ADC14_IFGR1[INIFG] Bits */
N#define ADC14_IFGR1_INIFG_OFS                    ( 1)                            /*!< ADC14INIFG Bit Offset */
N#define ADC14_IFGR1_INIFG                        ((uint32_t)0x00000002)          /*!< Interrupt flag for ADC14MEMx within comparator window */
N/* ADC14_IFGR1[LOIFG] Bits */
N#define ADC14_IFGR1_LOIFG_OFS                    ( 2)                            /*!< ADC14LOIFG Bit Offset */
N#define ADC14_IFGR1_LOIFG                        ((uint32_t)0x00000004)          /*!< Interrupt flag for ADC14MEMx below comparator window */
N/* ADC14_IFGR1[HIIFG] Bits */
N#define ADC14_IFGR1_HIIFG_OFS                    ( 3)                            /*!< ADC14HIIFG Bit Offset */
N#define ADC14_IFGR1_HIIFG                        ((uint32_t)0x00000008)          /*!< Interrupt flag for ADC14MEMx above comparator window */
N/* ADC14_IFGR1[OVIFG] Bits */
N#define ADC14_IFGR1_OVIFG_OFS                    ( 4)                            /*!< ADC14OVIFG Bit Offset */
N#define ADC14_IFGR1_OVIFG                        ((uint32_t)0x00000010)          /*!< ADC14MEMx overflow interrupt flag */
N/* ADC14_IFGR1[TOVIFG] Bits */
N#define ADC14_IFGR1_TOVIFG_OFS                   ( 5)                            /*!< ADC14TOVIFG Bit Offset */
N#define ADC14_IFGR1_TOVIFG                       ((uint32_t)0x00000020)          /*!< ADC14 conversion time overflow interrupt flag */
N/* ADC14_IFGR1[RDYIFG] Bits */
N#define ADC14_IFGR1_RDYIFG_OFS                   ( 6)                            /*!< ADC14RDYIFG Bit Offset */
N#define ADC14_IFGR1_RDYIFG                       ((uint32_t)0x00000040)          /*!< ADC14 local buffered reference ready interrupt flag */
N/* ADC14_CLRIFGR0[CLRIFG0] Bits */
N#define ADC14_CLRIFGR0_CLRIFG0_OFS               ( 0)                            /*!< CLRADC14IFG0 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG0                   ((uint32_t)0x00000001)          /*!< clear ADC14IFG0 */
N/* ADC14_CLRIFGR0[CLRIFG1] Bits */
N#define ADC14_CLRIFGR0_CLRIFG1_OFS               ( 1)                            /*!< CLRADC14IFG1 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG1                   ((uint32_t)0x00000002)          /*!< clear ADC14IFG1 */
N/* ADC14_CLRIFGR0[CLRIFG2] Bits */
N#define ADC14_CLRIFGR0_CLRIFG2_OFS               ( 2)                            /*!< CLRADC14IFG2 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG2                   ((uint32_t)0x00000004)          /*!< clear ADC14IFG2 */
N/* ADC14_CLRIFGR0[CLRIFG3] Bits */
N#define ADC14_CLRIFGR0_CLRIFG3_OFS               ( 3)                            /*!< CLRADC14IFG3 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG3                   ((uint32_t)0x00000008)          /*!< clear ADC14IFG3 */
N/* ADC14_CLRIFGR0[CLRIFG4] Bits */
N#define ADC14_CLRIFGR0_CLRIFG4_OFS               ( 4)                            /*!< CLRADC14IFG4 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG4                   ((uint32_t)0x00000010)          /*!< clear ADC14IFG4 */
N/* ADC14_CLRIFGR0[CLRIFG5] Bits */
N#define ADC14_CLRIFGR0_CLRIFG5_OFS               ( 5)                            /*!< CLRADC14IFG5 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG5                   ((uint32_t)0x00000020)          /*!< clear ADC14IFG5 */
N/* ADC14_CLRIFGR0[CLRIFG6] Bits */
N#define ADC14_CLRIFGR0_CLRIFG6_OFS               ( 6)                            /*!< CLRADC14IFG6 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG6                   ((uint32_t)0x00000040)          /*!< clear ADC14IFG6 */
N/* ADC14_CLRIFGR0[CLRIFG7] Bits */
N#define ADC14_CLRIFGR0_CLRIFG7_OFS               ( 7)                            /*!< CLRADC14IFG7 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG7                   ((uint32_t)0x00000080)          /*!< clear ADC14IFG7 */
N/* ADC14_CLRIFGR0[CLRIFG8] Bits */
N#define ADC14_CLRIFGR0_CLRIFG8_OFS               ( 8)                            /*!< CLRADC14IFG8 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG8                   ((uint32_t)0x00000100)          /*!< clear ADC14IFG8 */
N/* ADC14_CLRIFGR0[CLRIFG9] Bits */
N#define ADC14_CLRIFGR0_CLRIFG9_OFS               ( 9)                            /*!< CLRADC14IFG9 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG9                   ((uint32_t)0x00000200)          /*!< clear ADC14IFG9 */
N/* ADC14_CLRIFGR0[CLRIFG10] Bits */
N#define ADC14_CLRIFGR0_CLRIFG10_OFS              (10)                            /*!< CLRADC14IFG10 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG10                  ((uint32_t)0x00000400)          /*!< clear ADC14IFG10 */
N/* ADC14_CLRIFGR0[CLRIFG11] Bits */
N#define ADC14_CLRIFGR0_CLRIFG11_OFS              (11)                            /*!< CLRADC14IFG11 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG11                  ((uint32_t)0x00000800)          /*!< clear ADC14IFG11 */
N/* ADC14_CLRIFGR0[CLRIFG12] Bits */
N#define ADC14_CLRIFGR0_CLRIFG12_OFS              (12)                            /*!< CLRADC14IFG12 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG12                  ((uint32_t)0x00001000)          /*!< clear ADC14IFG12 */
N/* ADC14_CLRIFGR0[CLRIFG13] Bits */
N#define ADC14_CLRIFGR0_CLRIFG13_OFS              (13)                            /*!< CLRADC14IFG13 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG13                  ((uint32_t)0x00002000)          /*!< clear ADC14IFG13 */
N/* ADC14_CLRIFGR0[CLRIFG14] Bits */
N#define ADC14_CLRIFGR0_CLRIFG14_OFS              (14)                            /*!< CLRADC14IFG14 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG14                  ((uint32_t)0x00004000)          /*!< clear ADC14IFG14 */
N/* ADC14_CLRIFGR0[CLRIFG15] Bits */
N#define ADC14_CLRIFGR0_CLRIFG15_OFS              (15)                            /*!< CLRADC14IFG15 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG15                  ((uint32_t)0x00008000)          /*!< clear ADC14IFG15 */
N/* ADC14_CLRIFGR0[CLRIFG16] Bits */
N#define ADC14_CLRIFGR0_CLRIFG16_OFS              (16)                            /*!< CLRADC14IFG16 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG16                  ((uint32_t)0x00010000)          /*!< clear ADC14IFG16 */
N/* ADC14_CLRIFGR0[CLRIFG17] Bits */
N#define ADC14_CLRIFGR0_CLRIFG17_OFS              (17)                            /*!< CLRADC14IFG17 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG17                  ((uint32_t)0x00020000)          /*!< clear ADC14IFG17 */
N/* ADC14_CLRIFGR0[CLRIFG18] Bits */
N#define ADC14_CLRIFGR0_CLRIFG18_OFS              (18)                            /*!< CLRADC14IFG18 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG18                  ((uint32_t)0x00040000)          /*!< clear ADC14IFG18 */
N/* ADC14_CLRIFGR0[CLRIFG19] Bits */
N#define ADC14_CLRIFGR0_CLRIFG19_OFS              (19)                            /*!< CLRADC14IFG19 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG19                  ((uint32_t)0x00080000)          /*!< clear ADC14IFG19 */
N/* ADC14_CLRIFGR0[CLRIFG20] Bits */
N#define ADC14_CLRIFGR0_CLRIFG20_OFS              (20)                            /*!< CLRADC14IFG20 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG20                  ((uint32_t)0x00100000)          /*!< clear ADC14IFG20 */
N/* ADC14_CLRIFGR0[CLRIFG21] Bits */
N#define ADC14_CLRIFGR0_CLRIFG21_OFS              (21)                            /*!< CLRADC14IFG21 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG21                  ((uint32_t)0x00200000)          /*!< clear ADC14IFG21 */
N/* ADC14_CLRIFGR0[CLRIFG22] Bits */
N#define ADC14_CLRIFGR0_CLRIFG22_OFS              (22)                            /*!< CLRADC14IFG22 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG22                  ((uint32_t)0x00400000)          /*!< clear ADC14IFG22 */
N/* ADC14_CLRIFGR0[CLRIFG23] Bits */
N#define ADC14_CLRIFGR0_CLRIFG23_OFS              (23)                            /*!< CLRADC14IFG23 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG23                  ((uint32_t)0x00800000)          /*!< clear ADC14IFG23 */
N/* ADC14_CLRIFGR0[CLRIFG24] Bits */
N#define ADC14_CLRIFGR0_CLRIFG24_OFS              (24)                            /*!< CLRADC14IFG24 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG24                  ((uint32_t)0x01000000)          /*!< clear ADC14IFG24 */
N/* ADC14_CLRIFGR0[CLRIFG25] Bits */
N#define ADC14_CLRIFGR0_CLRIFG25_OFS              (25)                            /*!< CLRADC14IFG25 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG25                  ((uint32_t)0x02000000)          /*!< clear ADC14IFG25 */
N/* ADC14_CLRIFGR0[CLRIFG26] Bits */
N#define ADC14_CLRIFGR0_CLRIFG26_OFS              (26)                            /*!< CLRADC14IFG26 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG26                  ((uint32_t)0x04000000)          /*!< clear ADC14IFG26 */
N/* ADC14_CLRIFGR0[CLRIFG27] Bits */
N#define ADC14_CLRIFGR0_CLRIFG27_OFS              (27)                            /*!< CLRADC14IFG27 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG27                  ((uint32_t)0x08000000)          /*!< clear ADC14IFG27 */
N/* ADC14_CLRIFGR0[CLRIFG28] Bits */
N#define ADC14_CLRIFGR0_CLRIFG28_OFS              (28)                            /*!< CLRADC14IFG28 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG28                  ((uint32_t)0x10000000)          /*!< clear ADC14IFG28 */
N/* ADC14_CLRIFGR0[CLRIFG29] Bits */
N#define ADC14_CLRIFGR0_CLRIFG29_OFS              (29)                            /*!< CLRADC14IFG29 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG29                  ((uint32_t)0x20000000)          /*!< clear ADC14IFG29 */
N/* ADC14_CLRIFGR0[CLRIFG30] Bits */
N#define ADC14_CLRIFGR0_CLRIFG30_OFS              (30)                            /*!< CLRADC14IFG30 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG30                  ((uint32_t)0x40000000)          /*!< clear ADC14IFG30 */
N/* ADC14_CLRIFGR0[CLRIFG31] Bits */
N#define ADC14_CLRIFGR0_CLRIFG31_OFS              (31)                            /*!< CLRADC14IFG31 Bit Offset */
N#define ADC14_CLRIFGR0_CLRIFG31                  ((uint32_t)0x80000000)          /*!< clear ADC14IFG31 */
N/* ADC14_CLRIFGR1[CLRINIFG] Bits */
N#define ADC14_CLRIFGR1_CLRINIFG_OFS              ( 1)                            /*!< CLRADC14INIFG Bit Offset */
N#define ADC14_CLRIFGR1_CLRINIFG                  ((uint32_t)0x00000002)          /*!< clear ADC14INIFG */
N/* ADC14_CLRIFGR1[CLRLOIFG] Bits */
N#define ADC14_CLRIFGR1_CLRLOIFG_OFS              ( 2)                            /*!< CLRADC14LOIFG Bit Offset */
N#define ADC14_CLRIFGR1_CLRLOIFG                  ((uint32_t)0x00000004)          /*!< clear ADC14LOIFG */
N/* ADC14_CLRIFGR1[CLRHIIFG] Bits */
N#define ADC14_CLRIFGR1_CLRHIIFG_OFS              ( 3)                            /*!< CLRADC14HIIFG Bit Offset */
N#define ADC14_CLRIFGR1_CLRHIIFG                  ((uint32_t)0x00000008)          /*!< clear ADC14HIIFG */
N/* ADC14_CLRIFGR1[CLROVIFG] Bits */
N#define ADC14_CLRIFGR1_CLROVIFG_OFS              ( 4)                            /*!< CLRADC14OVIFG Bit Offset */
N#define ADC14_CLRIFGR1_CLROVIFG                  ((uint32_t)0x00000010)          /*!< clear ADC14OVIFG */
N/* ADC14_CLRIFGR1[CLRTOVIFG] Bits */
N#define ADC14_CLRIFGR1_CLRTOVIFG_OFS             ( 5)                            /*!< CLRADC14TOVIFG Bit Offset */
N#define ADC14_CLRIFGR1_CLRTOVIFG                 ((uint32_t)0x00000020)          /*!< clear ADC14TOVIFG */
N/* ADC14_CLRIFGR1[CLRRDYIFG] Bits */
N#define ADC14_CLRIFGR1_CLRRDYIFG_OFS             ( 6)                            /*!< CLRADC14RDYIFG Bit Offset */
N#define ADC14_CLRIFGR1_CLRRDYIFG                 ((uint32_t)0x00000040)          /*!< clear ADC14RDYIFG */
N
N/******************************************************************************
N* AES256 Bits
N******************************************************************************/
N/* AES256_CTL0[OP] Bits */
N#define AES256_CTL0_OP_OFS                       ( 0)                            /*!< AESOPx Bit Offset */
N#define AES256_CTL0_OP_MASK                      ((uint16_t)0x0003)              /*!< AESOPx Bit Mask */
N#define AES256_CTL0_OP0                          ((uint16_t)0x0001)              /*!< OP Bit 0 */
N#define AES256_CTL0_OP1                          ((uint16_t)0x0002)              /*!< OP Bit 1 */
N#define AES256_CTL0_OP_0                         ((uint16_t)0x0000)              /*!< Encryption */
N#define AES256_CTL0_OP_1                         ((uint16_t)0x0001)              /*!< Decryption. The provided key is the same key used for encryption */
N#define AES256_CTL0_OP_2                         ((uint16_t)0x0002)              /*!< Generate first round key required for decryption */
N#define AES256_CTL0_OP_3                         ((uint16_t)0x0003)              /*!< Decryption. The provided key is the first round key required for decryption */
N/* AES256_CTL0[KL] Bits */
N#define AES256_CTL0_KL_OFS                       ( 2)                            /*!< AESKLx Bit Offset */
N#define AES256_CTL0_KL_MASK                      ((uint16_t)0x000C)              /*!< AESKLx Bit Mask */
N#define AES256_CTL0_KL0                          ((uint16_t)0x0004)              /*!< KL Bit 0 */
N#define AES256_CTL0_KL1                          ((uint16_t)0x0008)              /*!< KL Bit 1 */
N#define AES256_CTL0_KL_0                         ((uint16_t)0x0000)              /*!< AES128. The key size is 128 bit */
N#define AES256_CTL0_KL_1                         ((uint16_t)0x0004)              /*!< AES192. The key size is 192 bit. */
N#define AES256_CTL0_KL_2                         ((uint16_t)0x0008)              /*!< AES256. The key size is 256 bit */
N#define AES256_CTL0_KL__128BIT                   ((uint16_t)0x0000)              /*!< AES128. The key size is 128 bit */
N#define AES256_CTL0_KL__192BIT                   ((uint16_t)0x0004)              /*!< AES192. The key size is 192 bit. */
N#define AES256_CTL0_KL__256BIT                   ((uint16_t)0x0008)              /*!< AES256. The key size is 256 bit */
N/* AES256_CTL0[CM] Bits */
N#define AES256_CTL0_CM_OFS                       ( 5)                            /*!< AESCMx Bit Offset */
N#define AES256_CTL0_CM_MASK                      ((uint16_t)0x0060)              /*!< AESCMx Bit Mask */
N#define AES256_CTL0_CM0                          ((uint16_t)0x0020)              /*!< CM Bit 0 */
N#define AES256_CTL0_CM1                          ((uint16_t)0x0040)              /*!< CM Bit 1 */
N#define AES256_CTL0_CM_0                         ((uint16_t)0x0000)              /*!< ECB */
N#define AES256_CTL0_CM_1                         ((uint16_t)0x0020)              /*!< CBC */
N#define AES256_CTL0_CM_2                         ((uint16_t)0x0040)              /*!< OFB */
N#define AES256_CTL0_CM_3                         ((uint16_t)0x0060)              /*!< CFB */
N#define AES256_CTL0_CM__ECB                      ((uint16_t)0x0000)              /*!< ECB */
N#define AES256_CTL0_CM__CBC                      ((uint16_t)0x0020)              /*!< CBC */
N#define AES256_CTL0_CM__OFB                      ((uint16_t)0x0040)              /*!< OFB */
N#define AES256_CTL0_CM__CFB                      ((uint16_t)0x0060)              /*!< CFB */
N/* AES256_CTL0[SWRST] Bits */
N#define AES256_CTL0_SWRST_OFS                    ( 7)                            /*!< AESSWRST Bit Offset */
N#define AES256_CTL0_SWRST                        ((uint16_t)0x0080)              /*!< AES software reset */
N/* AES256_CTL0[RDYIFG] Bits */
N#define AES256_CTL0_RDYIFG_OFS                   ( 8)                            /*!< AESRDYIFG Bit Offset */
N#define AES256_CTL0_RDYIFG                       ((uint16_t)0x0100)              /*!< AES ready interrupt flag */
N/* AES256_CTL0[ERRFG] Bits */
N#define AES256_CTL0_ERRFG_OFS                    (11)                            /*!< AESERRFG Bit Offset */
N#define AES256_CTL0_ERRFG                        ((uint16_t)0x0800)              /*!< AES error flag */
N/* AES256_CTL0[RDYIE] Bits */
N#define AES256_CTL0_RDYIE_OFS                    (12)                            /*!< AESRDYIE Bit Offset */
N#define AES256_CTL0_RDYIE                        ((uint16_t)0x1000)              /*!< AES ready interrupt enable */
N/* AES256_CTL0[CMEN] Bits */
N#define AES256_CTL0_CMEN_OFS                     (15)                            /*!< AESCMEN Bit Offset */
N#define AES256_CTL0_CMEN                         ((uint16_t)0x8000)              /*!< AES cipher mode enable */
N/* AES256_CTL1[BLKCNT] Bits */
N#define AES256_CTL1_BLKCNT_OFS                   ( 0)                            /*!< AESBLKCNTx Bit Offset */
N#define AES256_CTL1_BLKCNT_MASK                  ((uint16_t)0x00FF)              /*!< AESBLKCNTx Bit Mask */
N#define AES256_CTL1_BLKCNT0                      ((uint16_t)0x0001)              /*!< BLKCNT Bit 0 */
N#define AES256_CTL1_BLKCNT1                      ((uint16_t)0x0002)              /*!< BLKCNT Bit 1 */
N#define AES256_CTL1_BLKCNT2                      ((uint16_t)0x0004)              /*!< BLKCNT Bit 2 */
N#define AES256_CTL1_BLKCNT3                      ((uint16_t)0x0008)              /*!< BLKCNT Bit 3 */
N#define AES256_CTL1_BLKCNT4                      ((uint16_t)0x0010)              /*!< BLKCNT Bit 4 */
N#define AES256_CTL1_BLKCNT5                      ((uint16_t)0x0020)              /*!< BLKCNT Bit 5 */
N#define AES256_CTL1_BLKCNT6                      ((uint16_t)0x0040)              /*!< BLKCNT Bit 6 */
N#define AES256_CTL1_BLKCNT7                      ((uint16_t)0x0080)              /*!< BLKCNT Bit 7 */
N/* AES256_STAT[BUSY] Bits */
N#define AES256_STAT_BUSY_OFS                     ( 0)                            /*!< AESBUSY Bit Offset */
N#define AES256_STAT_BUSY                         ((uint16_t)0x0001)              /*!< AES accelerator module busy */
N/* AES256_STAT[KEYWR] Bits */
N#define AES256_STAT_KEYWR_OFS                    ( 1)                            /*!< AESKEYWR Bit Offset */
N#define AES256_STAT_KEYWR                        ((uint16_t)0x0002)              /*!< All 16 bytes written to AESAKEY */
N/* AES256_STAT[DINWR] Bits */
N#define AES256_STAT_DINWR_OFS                    ( 2)                            /*!< AESDINWR Bit Offset */
N#define AES256_STAT_DINWR                        ((uint16_t)0x0004)              /*!< All 16 bytes written to AESADIN, AESAXDIN or AESAXIN */
N/* AES256_STAT[DOUTRD] Bits */
N#define AES256_STAT_DOUTRD_OFS                   ( 3)                            /*!< AESDOUTRD Bit Offset */
N#define AES256_STAT_DOUTRD                       ((uint16_t)0x0008)              /*!< All 16 bytes read from AESADOUT */
N/* AES256_STAT[KEYCNT] Bits */
N#define AES256_STAT_KEYCNT_OFS                   ( 4)                            /*!< AESKEYCNTx Bit Offset */
N#define AES256_STAT_KEYCNT_MASK                  ((uint16_t)0x00F0)              /*!< AESKEYCNTx Bit Mask */
N#define AES256_STAT_KEYCNT0                      ((uint16_t)0x0010)              /*!< KEYCNT Bit 0 */
N#define AES256_STAT_KEYCNT1                      ((uint16_t)0x0020)              /*!< KEYCNT Bit 1 */
N#define AES256_STAT_KEYCNT2                      ((uint16_t)0x0040)              /*!< KEYCNT Bit 2 */
N#define AES256_STAT_KEYCNT3                      ((uint16_t)0x0080)              /*!< KEYCNT Bit 3 */
N/* AES256_STAT[DINCNT] Bits */
N#define AES256_STAT_DINCNT_OFS                   ( 8)                            /*!< AESDINCNTx Bit Offset */
N#define AES256_STAT_DINCNT_MASK                  ((uint16_t)0x0F00)              /*!< AESDINCNTx Bit Mask */
N#define AES256_STAT_DINCNT0                      ((uint16_t)0x0100)              /*!< DINCNT Bit 0 */
N#define AES256_STAT_DINCNT1                      ((uint16_t)0x0200)              /*!< DINCNT Bit 1 */
N#define AES256_STAT_DINCNT2                      ((uint16_t)0x0400)              /*!< DINCNT Bit 2 */
N#define AES256_STAT_DINCNT3                      ((uint16_t)0x0800)              /*!< DINCNT Bit 3 */
N/* AES256_STAT[DOUTCNT] Bits */
N#define AES256_STAT_DOUTCNT_OFS                  (12)                            /*!< AESDOUTCNTx Bit Offset */
N#define AES256_STAT_DOUTCNT_MASK                 ((uint16_t)0xF000)              /*!< AESDOUTCNTx Bit Mask */
N#define AES256_STAT_DOUTCNT0                     ((uint16_t)0x1000)              /*!< DOUTCNT Bit 0 */
N#define AES256_STAT_DOUTCNT1                     ((uint16_t)0x2000)              /*!< DOUTCNT Bit 1 */
N#define AES256_STAT_DOUTCNT2                     ((uint16_t)0x4000)              /*!< DOUTCNT Bit 2 */
N#define AES256_STAT_DOUTCNT3                     ((uint16_t)0x8000)              /*!< DOUTCNT Bit 3 */
N/* AES256_KEY[KEY0] Bits */
N#define AES256_KEY_KEY0_OFS                      ( 0)                            /*!< AESKEY0x Bit Offset */
N#define AES256_KEY_KEY0_MASK                     ((uint16_t)0x00FF)              /*!< AESKEY0x Bit Mask */
N#define AES256_KEY_KEY00                         ((uint16_t)0x0001)              /*!< KEY0 Bit 0 */
N#define AES256_KEY_KEY01                         ((uint16_t)0x0002)              /*!< KEY0 Bit 1 */
N#define AES256_KEY_KEY02                         ((uint16_t)0x0004)              /*!< KEY0 Bit 2 */
N#define AES256_KEY_KEY03                         ((uint16_t)0x0008)              /*!< KEY0 Bit 3 */
N#define AES256_KEY_KEY04                         ((uint16_t)0x0010)              /*!< KEY0 Bit 4 */
N#define AES256_KEY_KEY05                         ((uint16_t)0x0020)              /*!< KEY0 Bit 5 */
N#define AES256_KEY_KEY06                         ((uint16_t)0x0040)              /*!< KEY0 Bit 6 */
N#define AES256_KEY_KEY07                         ((uint16_t)0x0080)              /*!< KEY0 Bit 7 */
N/* AES256_KEY[KEY1] Bits */
N#define AES256_KEY_KEY1_OFS                      ( 8)                            /*!< AESKEY1x Bit Offset */
N#define AES256_KEY_KEY1_MASK                     ((uint16_t)0xFF00)              /*!< AESKEY1x Bit Mask */
N#define AES256_KEY_KEY10                         ((uint16_t)0x0100)              /*!< KEY1 Bit 0 */
N#define AES256_KEY_KEY11                         ((uint16_t)0x0200)              /*!< KEY1 Bit 1 */
N#define AES256_KEY_KEY12                         ((uint16_t)0x0400)              /*!< KEY1 Bit 2 */
N#define AES256_KEY_KEY13                         ((uint16_t)0x0800)              /*!< KEY1 Bit 3 */
N#define AES256_KEY_KEY14                         ((uint16_t)0x1000)              /*!< KEY1 Bit 4 */
N#define AES256_KEY_KEY15                         ((uint16_t)0x2000)              /*!< KEY1 Bit 5 */
N#define AES256_KEY_KEY16                         ((uint16_t)0x4000)              /*!< KEY1 Bit 6 */
N#define AES256_KEY_KEY17                         ((uint16_t)0x8000)              /*!< KEY1 Bit 7 */
N/* AES256_DIN[DIN0] Bits */
N#define AES256_DIN_DIN0_OFS                      ( 0)                            /*!< AESDIN0x Bit Offset */
N#define AES256_DIN_DIN0_MASK                     ((uint16_t)0x00FF)              /*!< AESDIN0x Bit Mask */
N#define AES256_DIN_DIN00                         ((uint16_t)0x0001)              /*!< DIN0 Bit 0 */
N#define AES256_DIN_DIN01                         ((uint16_t)0x0002)              /*!< DIN0 Bit 1 */
N#define AES256_DIN_DIN02                         ((uint16_t)0x0004)              /*!< DIN0 Bit 2 */
N#define AES256_DIN_DIN03                         ((uint16_t)0x0008)              /*!< DIN0 Bit 3 */
N#define AES256_DIN_DIN04                         ((uint16_t)0x0010)              /*!< DIN0 Bit 4 */
N#define AES256_DIN_DIN05                         ((uint16_t)0x0020)              /*!< DIN0 Bit 5 */
N#define AES256_DIN_DIN06                         ((uint16_t)0x0040)              /*!< DIN0 Bit 6 */
N#define AES256_DIN_DIN07                         ((uint16_t)0x0080)              /*!< DIN0 Bit 7 */
N/* AES256_DIN[DIN1] Bits */
N#define AES256_DIN_DIN1_OFS                      ( 8)                            /*!< AESDIN1x Bit Offset */
N#define AES256_DIN_DIN1_MASK                     ((uint16_t)0xFF00)              /*!< AESDIN1x Bit Mask */
N#define AES256_DIN_DIN10                         ((uint16_t)0x0100)              /*!< DIN1 Bit 0 */
N#define AES256_DIN_DIN11                         ((uint16_t)0x0200)              /*!< DIN1 Bit 1 */
N#define AES256_DIN_DIN12                         ((uint16_t)0x0400)              /*!< DIN1 Bit 2 */
N#define AES256_DIN_DIN13                         ((uint16_t)0x0800)              /*!< DIN1 Bit 3 */
N#define AES256_DIN_DIN14                         ((uint16_t)0x1000)              /*!< DIN1 Bit 4 */
N#define AES256_DIN_DIN15                         ((uint16_t)0x2000)              /*!< DIN1 Bit 5 */
N#define AES256_DIN_DIN16                         ((uint16_t)0x4000)              /*!< DIN1 Bit 6 */
N#define AES256_DIN_DIN17                         ((uint16_t)0x8000)              /*!< DIN1 Bit 7 */
N/* AES256_DOUT[DOUT0] Bits */
N#define AES256_DOUT_DOUT0_OFS                    ( 0)                            /*!< AESDOUT0x Bit Offset */
N#define AES256_DOUT_DOUT0_MASK                   ((uint16_t)0x00FF)              /*!< AESDOUT0x Bit Mask */
N#define AES256_DOUT_DOUT00                       ((uint16_t)0x0001)              /*!< DOUT0 Bit 0 */
N#define AES256_DOUT_DOUT01                       ((uint16_t)0x0002)              /*!< DOUT0 Bit 1 */
N#define AES256_DOUT_DOUT02                       ((uint16_t)0x0004)              /*!< DOUT0 Bit 2 */
N#define AES256_DOUT_DOUT03                       ((uint16_t)0x0008)              /*!< DOUT0 Bit 3 */
N#define AES256_DOUT_DOUT04                       ((uint16_t)0x0010)              /*!< DOUT0 Bit 4 */
N#define AES256_DOUT_DOUT05                       ((uint16_t)0x0020)              /*!< DOUT0 Bit 5 */
N#define AES256_DOUT_DOUT06                       ((uint16_t)0x0040)              /*!< DOUT0 Bit 6 */
N#define AES256_DOUT_DOUT07                       ((uint16_t)0x0080)              /*!< DOUT0 Bit 7 */
N/* AES256_DOUT[DOUT1] Bits */
N#define AES256_DOUT_DOUT1_OFS                    ( 8)                            /*!< AESDOUT1x Bit Offset */
N#define AES256_DOUT_DOUT1_MASK                   ((uint16_t)0xFF00)              /*!< AESDOUT1x Bit Mask */
N#define AES256_DOUT_DOUT10                       ((uint16_t)0x0100)              /*!< DOUT1 Bit 0 */
N#define AES256_DOUT_DOUT11                       ((uint16_t)0x0200)              /*!< DOUT1 Bit 1 */
N#define AES256_DOUT_DOUT12                       ((uint16_t)0x0400)              /*!< DOUT1 Bit 2 */
N#define AES256_DOUT_DOUT13                       ((uint16_t)0x0800)              /*!< DOUT1 Bit 3 */
N#define AES256_DOUT_DOUT14                       ((uint16_t)0x1000)              /*!< DOUT1 Bit 4 */
N#define AES256_DOUT_DOUT15                       ((uint16_t)0x2000)              /*!< DOUT1 Bit 5 */
N#define AES256_DOUT_DOUT16                       ((uint16_t)0x4000)              /*!< DOUT1 Bit 6 */
N#define AES256_DOUT_DOUT17                       ((uint16_t)0x8000)              /*!< DOUT1 Bit 7 */
N/* AES256_XDIN[XDIN0] Bits */
N#define AES256_XDIN_XDIN0_OFS                    ( 0)                            /*!< AESXDIN0x Bit Offset */
N#define AES256_XDIN_XDIN0_MASK                   ((uint16_t)0x00FF)              /*!< AESXDIN0x Bit Mask */
N#define AES256_XDIN_XDIN00                       ((uint16_t)0x0001)              /*!< XDIN0 Bit 0 */
N#define AES256_XDIN_XDIN01                       ((uint16_t)0x0002)              /*!< XDIN0 Bit 1 */
N#define AES256_XDIN_XDIN02                       ((uint16_t)0x0004)              /*!< XDIN0 Bit 2 */
N#define AES256_XDIN_XDIN03                       ((uint16_t)0x0008)              /*!< XDIN0 Bit 3 */
N#define AES256_XDIN_XDIN04                       ((uint16_t)0x0010)              /*!< XDIN0 Bit 4 */
N#define AES256_XDIN_XDIN05                       ((uint16_t)0x0020)              /*!< XDIN0 Bit 5 */
N#define AES256_XDIN_XDIN06                       ((uint16_t)0x0040)              /*!< XDIN0 Bit 6 */
N#define AES256_XDIN_XDIN07                       ((uint16_t)0x0080)              /*!< XDIN0 Bit 7 */
N/* AES256_XDIN[XDIN1] Bits */
N#define AES256_XDIN_XDIN1_OFS                    ( 8)                            /*!< AESXDIN1x Bit Offset */
N#define AES256_XDIN_XDIN1_MASK                   ((uint16_t)0xFF00)              /*!< AESXDIN1x Bit Mask */
N#define AES256_XDIN_XDIN10                       ((uint16_t)0x0100)              /*!< XDIN1 Bit 0 */
N#define AES256_XDIN_XDIN11                       ((uint16_t)0x0200)              /*!< XDIN1 Bit 1 */
N#define AES256_XDIN_XDIN12                       ((uint16_t)0x0400)              /*!< XDIN1 Bit 2 */
N#define AES256_XDIN_XDIN13                       ((uint16_t)0x0800)              /*!< XDIN1 Bit 3 */
N#define AES256_XDIN_XDIN14                       ((uint16_t)0x1000)              /*!< XDIN1 Bit 4 */
N#define AES256_XDIN_XDIN15                       ((uint16_t)0x2000)              /*!< XDIN1 Bit 5 */
N#define AES256_XDIN_XDIN16                       ((uint16_t)0x4000)              /*!< XDIN1 Bit 6 */
N#define AES256_XDIN_XDIN17                       ((uint16_t)0x8000)              /*!< XDIN1 Bit 7 */
N/* AES256_XIN[XIN0] Bits */
N#define AES256_XIN_XIN0_OFS                      ( 0)                            /*!< AESXIN0x Bit Offset */
N#define AES256_XIN_XIN0_MASK                     ((uint16_t)0x00FF)              /*!< AESXIN0x Bit Mask */
N#define AES256_XIN_XIN00                         ((uint16_t)0x0001)              /*!< XIN0 Bit 0 */
N#define AES256_XIN_XIN01                         ((uint16_t)0x0002)              /*!< XIN0 Bit 1 */
N#define AES256_XIN_XIN02                         ((uint16_t)0x0004)              /*!< XIN0 Bit 2 */
N#define AES256_XIN_XIN03                         ((uint16_t)0x0008)              /*!< XIN0 Bit 3 */
N#define AES256_XIN_XIN04                         ((uint16_t)0x0010)              /*!< XIN0 Bit 4 */
N#define AES256_XIN_XIN05                         ((uint16_t)0x0020)              /*!< XIN0 Bit 5 */
N#define AES256_XIN_XIN06                         ((uint16_t)0x0040)              /*!< XIN0 Bit 6 */
N#define AES256_XIN_XIN07                         ((uint16_t)0x0080)              /*!< XIN0 Bit 7 */
N/* AES256_XIN[XIN1] Bits */
N#define AES256_XIN_XIN1_OFS                      ( 8)                            /*!< AESXIN1x Bit Offset */
N#define AES256_XIN_XIN1_MASK                     ((uint16_t)0xFF00)              /*!< AESXIN1x Bit Mask */
N#define AES256_XIN_XIN10                         ((uint16_t)0x0100)              /*!< XIN1 Bit 0 */
N#define AES256_XIN_XIN11                         ((uint16_t)0x0200)              /*!< XIN1 Bit 1 */
N#define AES256_XIN_XIN12                         ((uint16_t)0x0400)              /*!< XIN1 Bit 2 */
N#define AES256_XIN_XIN13                         ((uint16_t)0x0800)              /*!< XIN1 Bit 3 */
N#define AES256_XIN_XIN14                         ((uint16_t)0x1000)              /*!< XIN1 Bit 4 */
N#define AES256_XIN_XIN15                         ((uint16_t)0x2000)              /*!< XIN1 Bit 5 */
N#define AES256_XIN_XIN16                         ((uint16_t)0x4000)              /*!< XIN1 Bit 6 */
N#define AES256_XIN_XIN17                         ((uint16_t)0x8000)              /*!< XIN1 Bit 7 */
N
N/******************************************************************************
N* CAPTIO Bits
N******************************************************************************/
N/* CAPTIO_CTL[PISEL] Bits */
N#define CAPTIO_CTL_PISEL_OFS                     ( 1)                            /*!< CAPTIOPISELx Bit Offset */
N#define CAPTIO_CTL_PISEL_MASK                    ((uint16_t)0x000E)              /*!< CAPTIOPISELx Bit Mask */
N#define CAPTIO_CTL_PISEL0                        ((uint16_t)0x0002)              /*!< PISEL Bit 0 */
N#define CAPTIO_CTL_PISEL1                        ((uint16_t)0x0004)              /*!< PISEL Bit 1 */
N#define CAPTIO_CTL_PISEL2                        ((uint16_t)0x0008)              /*!< PISEL Bit 2 */
N#define CAPTIO_CTL_PISEL_0                       ((uint16_t)0x0000)              /*!< Px.0 */
N#define CAPTIO_CTL_PISEL_1                       ((uint16_t)0x0002)              /*!< Px.1 */
N#define CAPTIO_CTL_PISEL_2                       ((uint16_t)0x0004)              /*!< Px.2 */
N#define CAPTIO_CTL_PISEL_3                       ((uint16_t)0x0006)              /*!< Px.3 */
N#define CAPTIO_CTL_PISEL_4                       ((uint16_t)0x0008)              /*!< Px.4 */
N#define CAPTIO_CTL_PISEL_5                       ((uint16_t)0x000A)              /*!< Px.5 */
N#define CAPTIO_CTL_PISEL_6                       ((uint16_t)0x000C)              /*!< Px.6 */
N#define CAPTIO_CTL_PISEL_7                       ((uint16_t)0x000E)              /*!< Px.7 */
N/* CAPTIO_CTL[POSEL] Bits */
N#define CAPTIO_CTL_POSEL_OFS                     ( 4)                            /*!< CAPTIOPOSELx Bit Offset */
N#define CAPTIO_CTL_POSEL_MASK                    ((uint16_t)0x00F0)              /*!< CAPTIOPOSELx Bit Mask */
N#define CAPTIO_CTL_POSEL0                        ((uint16_t)0x0010)              /*!< POSEL Bit 0 */
N#define CAPTIO_CTL_POSEL1                        ((uint16_t)0x0020)              /*!< POSEL Bit 1 */
N#define CAPTIO_CTL_POSEL2                        ((uint16_t)0x0040)              /*!< POSEL Bit 2 */
N#define CAPTIO_CTL_POSEL3                        ((uint16_t)0x0080)              /*!< POSEL Bit 3 */
N#define CAPTIO_CTL_POSEL_0                       ((uint16_t)0x0000)              /*!< Px = PJ */
N#define CAPTIO_CTL_POSEL_1                       ((uint16_t)0x0010)              /*!< Px = P1 */
N#define CAPTIO_CTL_POSEL_2                       ((uint16_t)0x0020)              /*!< Px = P2 */
N#define CAPTIO_CTL_POSEL_3                       ((uint16_t)0x0030)              /*!< Px = P3 */
N#define CAPTIO_CTL_POSEL_4                       ((uint16_t)0x0040)              /*!< Px = P4 */
N#define CAPTIO_CTL_POSEL_5                       ((uint16_t)0x0050)              /*!< Px = P5 */
N#define CAPTIO_CTL_POSEL_6                       ((uint16_t)0x0060)              /*!< Px = P6 */
N#define CAPTIO_CTL_POSEL_7                       ((uint16_t)0x0070)              /*!< Px = P7 */
N#define CAPTIO_CTL_POSEL_8                       ((uint16_t)0x0080)              /*!< Px = P8 */
N#define CAPTIO_CTL_POSEL_9                       ((uint16_t)0x0090)              /*!< Px = P9 */
N#define CAPTIO_CTL_POSEL_10                      ((uint16_t)0x00A0)              /*!< Px = P10 */
N#define CAPTIO_CTL_POSEL_11                      ((uint16_t)0x00B0)              /*!< Px = P11 */
N#define CAPTIO_CTL_POSEL_12                      ((uint16_t)0x00C0)              /*!< Px = P12 */
N#define CAPTIO_CTL_POSEL_13                      ((uint16_t)0x00D0)              /*!< Px = P13 */
N#define CAPTIO_CTL_POSEL_14                      ((uint16_t)0x00E0)              /*!< Px = P14 */
N#define CAPTIO_CTL_POSEL_15                      ((uint16_t)0x00F0)              /*!< Px = P15 */
N#define CAPTIO_CTL_POSEL__PJ                     ((uint16_t)0x0000)              /*!< Px = PJ */
N#define CAPTIO_CTL_POSEL__P1                     ((uint16_t)0x0010)              /*!< Px = P1 */
N#define CAPTIO_CTL_POSEL__P2                     ((uint16_t)0x0020)              /*!< Px = P2 */
N#define CAPTIO_CTL_POSEL__P3                     ((uint16_t)0x0030)              /*!< Px = P3 */
N#define CAPTIO_CTL_POSEL__P4                     ((uint16_t)0x0040)              /*!< Px = P4 */
N#define CAPTIO_CTL_POSEL__P5                     ((uint16_t)0x0050)              /*!< Px = P5 */
N#define CAPTIO_CTL_POSEL__P6                     ((uint16_t)0x0060)              /*!< Px = P6 */
N#define CAPTIO_CTL_POSEL__P7                     ((uint16_t)0x0070)              /*!< Px = P7 */
N#define CAPTIO_CTL_POSEL__P8                     ((uint16_t)0x0080)              /*!< Px = P8 */
N#define CAPTIO_CTL_POSEL__P9                     ((uint16_t)0x0090)              /*!< Px = P9 */
N#define CAPTIO_CTL_POSEL__P10                    ((uint16_t)0x00A0)              /*!< Px = P10 */
N#define CAPTIO_CTL_POSEL__P11                    ((uint16_t)0x00B0)              /*!< Px = P11 */
N#define CAPTIO_CTL_POSEL__P12                    ((uint16_t)0x00C0)              /*!< Px = P12 */
N#define CAPTIO_CTL_POSEL__P13                    ((uint16_t)0x00D0)              /*!< Px = P13 */
N#define CAPTIO_CTL_POSEL__P14                    ((uint16_t)0x00E0)              /*!< Px = P14 */
N#define CAPTIO_CTL_POSEL__P15                    ((uint16_t)0x00F0)              /*!< Px = P15 */
N/* CAPTIO_CTL[EN] Bits */
N#define CAPTIO_CTL_EN_OFS                        ( 8)                            /*!< CAPTIOEN Bit Offset */
N#define CAPTIO_CTL_EN                            ((uint16_t)0x0100)              /*!< Capacitive Touch IO enable */
N/* CAPTIO_CTL[STATE] Bits */
N#define CAPTIO_CTL_STATE_OFS                     ( 9)                            /*!< CAPTIOSTATE Bit Offset */
N#define CAPTIO_CTL_STATE                         ((uint16_t)0x0200)              /*!< Capacitive Touch IO state */
N
N/******************************************************************************
N* COMP_E Bits
N******************************************************************************/
N/* COMP_E_CTL0[IPSEL] Bits */
N#define COMP_E_CTL0_IPSEL_OFS                    ( 0)                            /*!< CEIPSEL Bit Offset */
N#define COMP_E_CTL0_IPSEL_MASK                   ((uint16_t)0x000F)              /*!< CEIPSEL Bit Mask */
N#define COMP_E_CTL0_IPSEL0                       ((uint16_t)0x0001)              /*!< IPSEL Bit 0 */
N#define COMP_E_CTL0_IPSEL1                       ((uint16_t)0x0002)              /*!< IPSEL Bit 1 */
N#define COMP_E_CTL0_IPSEL2                       ((uint16_t)0x0004)              /*!< IPSEL Bit 2 */
N#define COMP_E_CTL0_IPSEL3                       ((uint16_t)0x0008)              /*!< IPSEL Bit 3 */
N#define COMP_E_CTL0_IPSEL_0                      ((uint16_t)0x0000)              /*!< Channel 0 selected */
N#define COMP_E_CTL0_IPSEL_1                      ((uint16_t)0x0001)              /*!< Channel 1 selected */
N#define COMP_E_CTL0_IPSEL_2                      ((uint16_t)0x0002)              /*!< Channel 2 selected */
N#define COMP_E_CTL0_IPSEL_3                      ((uint16_t)0x0003)              /*!< Channel 3 selected */
N#define COMP_E_CTL0_IPSEL_4                      ((uint16_t)0x0004)              /*!< Channel 4 selected */
N#define COMP_E_CTL0_IPSEL_5                      ((uint16_t)0x0005)              /*!< Channel 5 selected */
N#define COMP_E_CTL0_IPSEL_6                      ((uint16_t)0x0006)              /*!< Channel 6 selected */
N#define COMP_E_CTL0_IPSEL_7                      ((uint16_t)0x0007)              /*!< Channel 7 selected */
N#define COMP_E_CTL0_IPSEL_8                      ((uint16_t)0x0008)              /*!< Channel 8 selected */
N#define COMP_E_CTL0_IPSEL_9                      ((uint16_t)0x0009)              /*!< Channel 9 selected */
N#define COMP_E_CTL0_IPSEL_10                     ((uint16_t)0x000A)              /*!< Channel 10 selected */
N#define COMP_E_CTL0_IPSEL_11                     ((uint16_t)0x000B)              /*!< Channel 11 selected */
N#define COMP_E_CTL0_IPSEL_12                     ((uint16_t)0x000C)              /*!< Channel 12 selected */
N#define COMP_E_CTL0_IPSEL_13                     ((uint16_t)0x000D)              /*!< Channel 13 selected */
N#define COMP_E_CTL0_IPSEL_14                     ((uint16_t)0x000E)              /*!< Channel 14 selected */
N#define COMP_E_CTL0_IPSEL_15                     ((uint16_t)0x000F)              /*!< Channel 15 selected */
N/* COMP_E_CTL0[IPEN] Bits */
N#define COMP_E_CTL0_IPEN_OFS                     ( 7)                            /*!< CEIPEN Bit Offset */
N#define COMP_E_CTL0_IPEN                         ((uint16_t)0x0080)              /*!< Channel input enable for the V+ terminal */
N/* COMP_E_CTL0[IMSEL] Bits */
N#define COMP_E_CTL0_IMSEL_OFS                    ( 8)                            /*!< CEIMSEL Bit Offset */
N#define COMP_E_CTL0_IMSEL_MASK                   ((uint16_t)0x0F00)              /*!< CEIMSEL Bit Mask */
N#define COMP_E_CTL0_IMSEL0                       ((uint16_t)0x0100)              /*!< IMSEL Bit 0 */
N#define COMP_E_CTL0_IMSEL1                       ((uint16_t)0x0200)              /*!< IMSEL Bit 1 */
N#define COMP_E_CTL0_IMSEL2                       ((uint16_t)0x0400)              /*!< IMSEL Bit 2 */
N#define COMP_E_CTL0_IMSEL3                       ((uint16_t)0x0800)              /*!< IMSEL Bit 3 */
N#define COMP_E_CTL0_IMSEL_0                      ((uint16_t)0x0000)              /*!< Channel 0 selected */
N#define COMP_E_CTL0_IMSEL_1                      ((uint16_t)0x0100)              /*!< Channel 1 selected */
N#define COMP_E_CTL0_IMSEL_2                      ((uint16_t)0x0200)              /*!< Channel 2 selected */
N#define COMP_E_CTL0_IMSEL_3                      ((uint16_t)0x0300)              /*!< Channel 3 selected */
N#define COMP_E_CTL0_IMSEL_4                      ((uint16_t)0x0400)              /*!< Channel 4 selected */
N#define COMP_E_CTL0_IMSEL_5                      ((uint16_t)0x0500)              /*!< Channel 5 selected */
N#define COMP_E_CTL0_IMSEL_6                      ((uint16_t)0x0600)              /*!< Channel 6 selected */
N#define COMP_E_CTL0_IMSEL_7                      ((uint16_t)0x0700)              /*!< Channel 7 selected */
N#define COMP_E_CTL0_IMSEL_8                      ((uint16_t)0x0800)              /*!< Channel 8 selected */
N#define COMP_E_CTL0_IMSEL_9                      ((uint16_t)0x0900)              /*!< Channel 9 selected */
N#define COMP_E_CTL0_IMSEL_10                     ((uint16_t)0x0A00)              /*!< Channel 10 selected */
N#define COMP_E_CTL0_IMSEL_11                     ((uint16_t)0x0B00)              /*!< Channel 11 selected */
N#define COMP_E_CTL0_IMSEL_12                     ((uint16_t)0x0C00)              /*!< Channel 12 selected */
N#define COMP_E_CTL0_IMSEL_13                     ((uint16_t)0x0D00)              /*!< Channel 13 selected */
N#define COMP_E_CTL0_IMSEL_14                     ((uint16_t)0x0E00)              /*!< Channel 14 selected */
N#define COMP_E_CTL0_IMSEL_15                     ((uint16_t)0x0F00)              /*!< Channel 15 selected */
N/* COMP_E_CTL0[IMEN] Bits */
N#define COMP_E_CTL0_IMEN_OFS                     (15)                            /*!< CEIMEN Bit Offset */
N#define COMP_E_CTL0_IMEN                         ((uint16_t)0x8000)              /*!< Channel input enable for the - terminal */
N/* COMP_E_CTL1[OUT] Bits */
N#define COMP_E_CTL1_OUT_OFS                      ( 0)                            /*!< CEOUT Bit Offset */
N#define COMP_E_CTL1_OUT                          ((uint16_t)0x0001)              /*!< Comparator output value */
N/* COMP_E_CTL1[OUTPOL] Bits */
N#define COMP_E_CTL1_OUTPOL_OFS                   ( 1)                            /*!< CEOUTPOL Bit Offset */
N#define COMP_E_CTL1_OUTPOL                       ((uint16_t)0x0002)              /*!< Comparator output polarity */
N/* COMP_E_CTL1[F] Bits */
N#define COMP_E_CTL1_F_OFS                        ( 2)                            /*!< CEF Bit Offset */
N#define COMP_E_CTL1_F                            ((uint16_t)0x0004)              /*!< Comparator output filter */
N/* COMP_E_CTL1[IES] Bits */
N#define COMP_E_CTL1_IES_OFS                      ( 3)                            /*!< CEIES Bit Offset */
N#define COMP_E_CTL1_IES                          ((uint16_t)0x0008)              /*!< Interrupt edge select for CEIIFG and CEIFG */
N/* COMP_E_CTL1[SHORT] Bits */
N#define COMP_E_CTL1_SHORT_OFS                    ( 4)                            /*!< CESHORT Bit Offset */
N#define COMP_E_CTL1_SHORT                        ((uint16_t)0x0010)              /*!< Input short */
N/* COMP_E_CTL1[EX] Bits */
N#define COMP_E_CTL1_EX_OFS                       ( 5)                            /*!< CEEX Bit Offset */
N#define COMP_E_CTL1_EX                           ((uint16_t)0x0020)              /*!< Exchange */
N/* COMP_E_CTL1[FDLY] Bits */
N#define COMP_E_CTL1_FDLY_OFS                     ( 6)                            /*!< CEFDLY Bit Offset */
N#define COMP_E_CTL1_FDLY_MASK                    ((uint16_t)0x00C0)              /*!< CEFDLY Bit Mask */
N#define COMP_E_CTL1_FDLY0                        ((uint16_t)0x0040)              /*!< FDLY Bit 0 */
N#define COMP_E_CTL1_FDLY1                        ((uint16_t)0x0080)              /*!< FDLY Bit 1 */
N#define COMP_E_CTL1_FDLY_0                       ((uint16_t)0x0000)              /*!< Typical filter delay of TBD (450) ns */
N#define COMP_E_CTL1_FDLY_1                       ((uint16_t)0x0040)              /*!< Typical filter delay of TBD (900) ns */
N#define COMP_E_CTL1_FDLY_2                       ((uint16_t)0x0080)              /*!< Typical filter delay of TBD (1800) ns */
N#define COMP_E_CTL1_FDLY_3                       ((uint16_t)0x00C0)              /*!< Typical filter delay of TBD (3600) ns */
N/* COMP_E_CTL1[PWRMD] Bits */
N#define COMP_E_CTL1_PWRMD_OFS                    ( 8)                            /*!< CEPWRMD Bit Offset */
N#define COMP_E_CTL1_PWRMD_MASK                   ((uint16_t)0x0300)              /*!< CEPWRMD Bit Mask */
N#define COMP_E_CTL1_PWRMD0                       ((uint16_t)0x0100)              /*!< PWRMD Bit 0 */
N#define COMP_E_CTL1_PWRMD1                       ((uint16_t)0x0200)              /*!< PWRMD Bit 1 */
N#define COMP_E_CTL1_PWRMD_0                      ((uint16_t)0x0000)              /*!< High-speed mode */
N#define COMP_E_CTL1_PWRMD_1                      ((uint16_t)0x0100)              /*!< Normal mode */
N#define COMP_E_CTL1_PWRMD_2                      ((uint16_t)0x0200)              /*!< Ultra-low power mode */
N/* COMP_E_CTL1[ON] Bits */
N#define COMP_E_CTL1_ON_OFS                       (10)                            /*!< CEON Bit Offset */
N#define COMP_E_CTL1_ON                           ((uint16_t)0x0400)              /*!< Comparator On */
N/* COMP_E_CTL1[MRVL] Bits */
N#define COMP_E_CTL1_MRVL_OFS                     (11)                            /*!< CEMRVL Bit Offset */
N#define COMP_E_CTL1_MRVL                         ((uint16_t)0x0800)              /*!< This bit is valid of CEMRVS is set to 1 */
N/* COMP_E_CTL1[MRVS] Bits */
N#define COMP_E_CTL1_MRVS_OFS                     (12)                            /*!< CEMRVS Bit Offset */
N#define COMP_E_CTL1_MRVS                         ((uint16_t)0x1000)              
N/* COMP_E_CTL2[REF0] Bits */
N#define COMP_E_CTL2_REF0_OFS                     ( 0)                            /*!< CEREF0 Bit Offset */
N#define COMP_E_CTL2_REF0_MASK                    ((uint16_t)0x001F)              /*!< CEREF0 Bit Mask */
N#define COMP_E_CTL2_REF00                        ((uint16_t)0x0001)              /*!< REF0 Bit 0 */
N#define COMP_E_CTL2_REF01                        ((uint16_t)0x0002)              /*!< REF0 Bit 1 */
N#define COMP_E_CTL2_REF02                        ((uint16_t)0x0004)              /*!< REF0 Bit 2 */
N#define COMP_E_CTL2_REF03                        ((uint16_t)0x0008)              /*!< REF0 Bit 3 */
N#define COMP_E_CTL2_REF04                        ((uint16_t)0x0010)              /*!< REF0 Bit 4 */
N#define COMP_E_CTL2_REF0_0                       ((uint16_t)0x0000)              /*!< Reference resistor tap for setting 0. */
N#define COMP_E_CTL2_REF0_1                       ((uint16_t)0x0001)              /*!< Reference resistor tap for setting 1. */
N#define COMP_E_CTL2_REF0_2                       ((uint16_t)0x0002)              /*!< Reference resistor tap for setting 2. */
N#define COMP_E_CTL2_REF0_3                       ((uint16_t)0x0003)              /*!< Reference resistor tap for setting 3. */
N#define COMP_E_CTL2_REF0_4                       ((uint16_t)0x0004)              /*!< Reference resistor tap for setting 4. */
N#define COMP_E_CTL2_REF0_5                       ((uint16_t)0x0005)              /*!< Reference resistor tap for setting 5. */
N#define COMP_E_CTL2_REF0_6                       ((uint16_t)0x0006)              /*!< Reference resistor tap for setting 6. */
N#define COMP_E_CTL2_REF0_7                       ((uint16_t)0x0007)              /*!< Reference resistor tap for setting 7. */
N#define COMP_E_CTL2_REF0_8                       ((uint16_t)0x0008)              /*!< Reference resistor tap for setting 8. */
N#define COMP_E_CTL2_REF0_9                       ((uint16_t)0x0009)              /*!< Reference resistor tap for setting 9. */
N#define COMP_E_CTL2_REF0_10                      ((uint16_t)0x000A)              /*!< Reference resistor tap for setting 10. */
N#define COMP_E_CTL2_REF0_11                      ((uint16_t)0x000B)              /*!< Reference resistor tap for setting 11. */
N#define COMP_E_CTL2_REF0_12                      ((uint16_t)0x000C)              /*!< Reference resistor tap for setting 12. */
N#define COMP_E_CTL2_REF0_13                      ((uint16_t)0x000D)              /*!< Reference resistor tap for setting 13. */
N#define COMP_E_CTL2_REF0_14                      ((uint16_t)0x000E)              /*!< Reference resistor tap for setting 14. */
N#define COMP_E_CTL2_REF0_15                      ((uint16_t)0x000F)              /*!< Reference resistor tap for setting 15. */
N#define COMP_E_CTL2_REF0_16                      ((uint16_t)0x0010)              /*!< Reference resistor tap for setting 16. */
N#define COMP_E_CTL2_REF0_17                      ((uint16_t)0x0011)              /*!< Reference resistor tap for setting 17. */
N#define COMP_E_CTL2_REF0_18                      ((uint16_t)0x0012)              /*!< Reference resistor tap for setting 18. */
N#define COMP_E_CTL2_REF0_19                      ((uint16_t)0x0013)              /*!< Reference resistor tap for setting 19. */
N#define COMP_E_CTL2_REF0_20                      ((uint16_t)0x0014)              /*!< Reference resistor tap for setting 20. */
N#define COMP_E_CTL2_REF0_21                      ((uint16_t)0x0015)              /*!< Reference resistor tap for setting 21. */
N#define COMP_E_CTL2_REF0_22                      ((uint16_t)0x0016)              /*!< Reference resistor tap for setting 22. */
N#define COMP_E_CTL2_REF0_23                      ((uint16_t)0x0017)              /*!< Reference resistor tap for setting 23. */
N#define COMP_E_CTL2_REF0_24                      ((uint16_t)0x0018)              /*!< Reference resistor tap for setting 24. */
N#define COMP_E_CTL2_REF0_25                      ((uint16_t)0x0019)              /*!< Reference resistor tap for setting 25. */
N#define COMP_E_CTL2_REF0_26                      ((uint16_t)0x001A)              /*!< Reference resistor tap for setting 26. */
N#define COMP_E_CTL2_REF0_27                      ((uint16_t)0x001B)              /*!< Reference resistor tap for setting 27. */
N#define COMP_E_CTL2_REF0_28                      ((uint16_t)0x001C)              /*!< Reference resistor tap for setting 28. */
N#define COMP_E_CTL2_REF0_29                      ((uint16_t)0x001D)              /*!< Reference resistor tap for setting 29. */
N#define COMP_E_CTL2_REF0_30                      ((uint16_t)0x001E)              /*!< Reference resistor tap for setting 30. */
N#define COMP_E_CTL2_REF0_31                      ((uint16_t)0x001F)              /*!< Reference resistor tap for setting 31. */
N/* COMP_E_CTL2[RSEL] Bits */
N#define COMP_E_CTL2_RSEL_OFS                     ( 5)                            /*!< CERSEL Bit Offset */
N#define COMP_E_CTL2_RSEL                         ((uint16_t)0x0020)              /*!< Reference select */
N/* COMP_E_CTL2[RS] Bits */
N#define COMP_E_CTL2_RS_OFS                       ( 6)                            /*!< CERS Bit Offset */
N#define COMP_E_CTL2_RS_MASK                      ((uint16_t)0x00C0)              /*!< CERS Bit Mask */
N#define COMP_E_CTL2_RS0                          ((uint16_t)0x0040)              /*!< RS Bit 0 */
N#define COMP_E_CTL2_RS1                          ((uint16_t)0x0080)              /*!< RS Bit 1 */
N#define COMP_E_CTL2_RS_0                         ((uint16_t)0x0000)              /*!< No current is drawn by the reference circuitry */
N#define COMP_E_CTL2_RS_1                         ((uint16_t)0x0040)              /*!< VCC applied to the resistor ladder */
N#define COMP_E_CTL2_RS_2                         ((uint16_t)0x0080)              /*!< Shared reference voltage applied to the resistor ladder */
N#define COMP_E_CTL2_RS_3                         ((uint16_t)0x00C0)              /*!< Shared reference voltage supplied to V(CREF). Resistor ladder is off */
N/* COMP_E_CTL2[REF1] Bits */
N#define COMP_E_CTL2_REF1_OFS                     ( 8)                            /*!< CEREF1 Bit Offset */
N#define COMP_E_CTL2_REF1_MASK                    ((uint16_t)0x1F00)              /*!< CEREF1 Bit Mask */
N#define COMP_E_CTL2_REF10                        ((uint16_t)0x0100)              /*!< REF1 Bit 0 */
N#define COMP_E_CTL2_REF11                        ((uint16_t)0x0200)              /*!< REF1 Bit 1 */
N#define COMP_E_CTL2_REF12                        ((uint16_t)0x0400)              /*!< REF1 Bit 2 */
N#define COMP_E_CTL2_REF13                        ((uint16_t)0x0800)              /*!< REF1 Bit 3 */
N#define COMP_E_CTL2_REF14                        ((uint16_t)0x1000)              /*!< REF1 Bit 4 */
N#define COMP_E_CTL2_REF1_0                       ((uint16_t)0x0000)              /*!< Reference resistor tap for setting 0. */
N#define COMP_E_CTL2_REF1_1                       ((uint16_t)0x0100)              /*!< Reference resistor tap for setting 1. */
N#define COMP_E_CTL2_REF1_2                       ((uint16_t)0x0200)              /*!< Reference resistor tap for setting 2. */
N#define COMP_E_CTL2_REF1_3                       ((uint16_t)0x0300)              /*!< Reference resistor tap for setting 3. */
N#define COMP_E_CTL2_REF1_4                       ((uint16_t)0x0400)              /*!< Reference resistor tap for setting 4. */
N#define COMP_E_CTL2_REF1_5                       ((uint16_t)0x0500)              /*!< Reference resistor tap for setting 5. */
N#define COMP_E_CTL2_REF1_6                       ((uint16_t)0x0600)              /*!< Reference resistor tap for setting 6. */
N#define COMP_E_CTL2_REF1_7                       ((uint16_t)0x0700)              /*!< Reference resistor tap for setting 7. */
N#define COMP_E_CTL2_REF1_8                       ((uint16_t)0x0800)              /*!< Reference resistor tap for setting 8. */
N#define COMP_E_CTL2_REF1_9                       ((uint16_t)0x0900)              /*!< Reference resistor tap for setting 9. */
N#define COMP_E_CTL2_REF1_10                      ((uint16_t)0x0A00)              /*!< Reference resistor tap for setting 10. */
N#define COMP_E_CTL2_REF1_11                      ((uint16_t)0x0B00)              /*!< Reference resistor tap for setting 11. */
N#define COMP_E_CTL2_REF1_12                      ((uint16_t)0x0C00)              /*!< Reference resistor tap for setting 12. */
N#define COMP_E_CTL2_REF1_13                      ((uint16_t)0x0D00)              /*!< Reference resistor tap for setting 13. */
N#define COMP_E_CTL2_REF1_14                      ((uint16_t)0x0E00)              /*!< Reference resistor tap for setting 14. */
N#define COMP_E_CTL2_REF1_15                      ((uint16_t)0x0F00)              /*!< Reference resistor tap for setting 15. */
N#define COMP_E_CTL2_REF1_16                      ((uint16_t)0x1000)              /*!< Reference resistor tap for setting 16. */
N#define COMP_E_CTL2_REF1_17                      ((uint16_t)0x1100)              /*!< Reference resistor tap for setting 17. */
N#define COMP_E_CTL2_REF1_18                      ((uint16_t)0x1200)              /*!< Reference resistor tap for setting 18. */
N#define COMP_E_CTL2_REF1_19                      ((uint16_t)0x1300)              /*!< Reference resistor tap for setting 19. */
N#define COMP_E_CTL2_REF1_20                      ((uint16_t)0x1400)              /*!< Reference resistor tap for setting 20. */
N#define COMP_E_CTL2_REF1_21                      ((uint16_t)0x1500)              /*!< Reference resistor tap for setting 21. */
N#define COMP_E_CTL2_REF1_22                      ((uint16_t)0x1600)              /*!< Reference resistor tap for setting 22. */
N#define COMP_E_CTL2_REF1_23                      ((uint16_t)0x1700)              /*!< Reference resistor tap for setting 23. */
N#define COMP_E_CTL2_REF1_24                      ((uint16_t)0x1800)              /*!< Reference resistor tap for setting 24. */
N#define COMP_E_CTL2_REF1_25                      ((uint16_t)0x1900)              /*!< Reference resistor tap for setting 25. */
N#define COMP_E_CTL2_REF1_26                      ((uint16_t)0x1A00)              /*!< Reference resistor tap for setting 26. */
N#define COMP_E_CTL2_REF1_27                      ((uint16_t)0x1B00)              /*!< Reference resistor tap for setting 27. */
N#define COMP_E_CTL2_REF1_28                      ((uint16_t)0x1C00)              /*!< Reference resistor tap for setting 28. */
N#define COMP_E_CTL2_REF1_29                      ((uint16_t)0x1D00)              /*!< Reference resistor tap for setting 29. */
N#define COMP_E_CTL2_REF1_30                      ((uint16_t)0x1E00)              /*!< Reference resistor tap for setting 30. */
N#define COMP_E_CTL2_REF1_31                      ((uint16_t)0x1F00)              /*!< Reference resistor tap for setting 31. */
N/* COMP_E_CTL2[REFL] Bits */
N#define COMP_E_CTL2_REFL_OFS                     (13)                            /*!< CEREFL Bit Offset */
N#define COMP_E_CTL2_REFL_MASK                    ((uint16_t)0x6000)              /*!< CEREFL Bit Mask */
N#define COMP_E_CTL2_REFL0                        ((uint16_t)0x2000)              /*!< REFL Bit 0 */
N#define COMP_E_CTL2_REFL1                        ((uint16_t)0x4000)              /*!< REFL Bit 1 */
N#define COMP_E_CTL2_CEREFL_0                     ((uint16_t)0x0000)              /*!< Reference amplifier is disabled. No reference voltage is requested */
N#define COMP_E_CTL2_CEREFL_1                     ((uint16_t)0x2000)              /*!< 1.2 V is selected as shared reference voltage input */
N#define COMP_E_CTL2_CEREFL_2                     ((uint16_t)0x4000)              /*!< 2.0 V is selected as shared reference voltage input */
N#define COMP_E_CTL2_CEREFL_3                     ((uint16_t)0x6000)              /*!< 2.5 V is selected as shared reference voltage input */
N#define COMP_E_CTL2_REFL__OFF                    ((uint16_t)0x0000)              /*!< Reference amplifier is disabled. No reference voltage is requested */
N#define COMP_E_CTL2_REFL__1P2V                   ((uint16_t)0x2000)              /*!< 1.2 V is selected as shared reference voltage input */
N#define COMP_E_CTL2_REFL__2P0V                   ((uint16_t)0x4000)              /*!< 2.0 V is selected as shared reference voltage input */
N#define COMP_E_CTL2_REFL__2P5V                   ((uint16_t)0x6000)              /*!< 2.5 V is selected as shared reference voltage input */
N/* COMP_E_CTL2[REFACC] Bits */
N#define COMP_E_CTL2_REFACC_OFS                   (15)                            /*!< CEREFACC Bit Offset */
N#define COMP_E_CTL2_REFACC                       ((uint16_t)0x8000)              /*!< Reference accuracy */
N/* COMP_E_CTL3[PD0] Bits */
N#define COMP_E_CTL3_PD0_OFS                      ( 0)                            /*!< CEPD0 Bit Offset */
N#define COMP_E_CTL3_PD0                          ((uint16_t)0x0001)              /*!< Port disable */
N/* COMP_E_CTL3[PD1] Bits */
N#define COMP_E_CTL3_PD1_OFS                      ( 1)                            /*!< CEPD1 Bit Offset */
N#define COMP_E_CTL3_PD1                          ((uint16_t)0x0002)              /*!< Port disable */
N/* COMP_E_CTL3[PD2] Bits */
N#define COMP_E_CTL3_PD2_OFS                      ( 2)                            /*!< CEPD2 Bit Offset */
N#define COMP_E_CTL3_PD2                          ((uint16_t)0x0004)              /*!< Port disable */
N/* COMP_E_CTL3[PD3] Bits */
N#define COMP_E_CTL3_PD3_OFS                      ( 3)                            /*!< CEPD3 Bit Offset */
N#define COMP_E_CTL3_PD3                          ((uint16_t)0x0008)              /*!< Port disable */
N/* COMP_E_CTL3[PD4] Bits */
N#define COMP_E_CTL3_PD4_OFS                      ( 4)                            /*!< CEPD4 Bit Offset */
N#define COMP_E_CTL3_PD4                          ((uint16_t)0x0010)              /*!< Port disable */
N/* COMP_E_CTL3[PD5] Bits */
N#define COMP_E_CTL3_PD5_OFS                      ( 5)                            /*!< CEPD5 Bit Offset */
N#define COMP_E_CTL3_PD5                          ((uint16_t)0x0020)              /*!< Port disable */
N/* COMP_E_CTL3[PD6] Bits */
N#define COMP_E_CTL3_PD6_OFS                      ( 6)                            /*!< CEPD6 Bit Offset */
N#define COMP_E_CTL3_PD6                          ((uint16_t)0x0040)              /*!< Port disable */
N/* COMP_E_CTL3[PD7] Bits */
N#define COMP_E_CTL3_PD7_OFS                      ( 7)                            /*!< CEPD7 Bit Offset */
N#define COMP_E_CTL3_PD7                          ((uint16_t)0x0080)              /*!< Port disable */
N/* COMP_E_CTL3[PD8] Bits */
N#define COMP_E_CTL3_PD8_OFS                      ( 8)                            /*!< CEPD8 Bit Offset */
N#define COMP_E_CTL3_PD8                          ((uint16_t)0x0100)              /*!< Port disable */
N/* COMP_E_CTL3[PD9] Bits */
N#define COMP_E_CTL3_PD9_OFS                      ( 9)                            /*!< CEPD9 Bit Offset */
N#define COMP_E_CTL3_PD9                          ((uint16_t)0x0200)              /*!< Port disable */
N/* COMP_E_CTL3[PD10] Bits */
N#define COMP_E_CTL3_PD10_OFS                     (10)                            /*!< CEPD10 Bit Offset */
N#define COMP_E_CTL3_PD10                         ((uint16_t)0x0400)              /*!< Port disable */
N/* COMP_E_CTL3[PD11] Bits */
N#define COMP_E_CTL3_PD11_OFS                     (11)                            /*!< CEPD11 Bit Offset */
N#define COMP_E_CTL3_PD11                         ((uint16_t)0x0800)              /*!< Port disable */
N/* COMP_E_CTL3[PD12] Bits */
N#define COMP_E_CTL3_PD12_OFS                     (12)                            /*!< CEPD12 Bit Offset */
N#define COMP_E_CTL3_PD12                         ((uint16_t)0x1000)              /*!< Port disable */
N/* COMP_E_CTL3[PD13] Bits */
N#define COMP_E_CTL3_PD13_OFS                     (13)                            /*!< CEPD13 Bit Offset */
N#define COMP_E_CTL3_PD13                         ((uint16_t)0x2000)              /*!< Port disable */
N/* COMP_E_CTL3[PD14] Bits */
N#define COMP_E_CTL3_PD14_OFS                     (14)                            /*!< CEPD14 Bit Offset */
N#define COMP_E_CTL3_PD14                         ((uint16_t)0x4000)              /*!< Port disable */
N/* COMP_E_CTL3[PD15] Bits */
N#define COMP_E_CTL3_PD15_OFS                     (15)                            /*!< CEPD15 Bit Offset */
N#define COMP_E_CTL3_PD15                         ((uint16_t)0x8000)              /*!< Port disable */
N/* COMP_E_INT[IFG] Bits */
N#define COMP_E_INT_IFG_OFS                       ( 0)                            /*!< CEIFG Bit Offset */
N#define COMP_E_INT_IFG                           ((uint16_t)0x0001)              /*!< Comparator output interrupt flag */
N/* COMP_E_INT[IIFG] Bits */
N#define COMP_E_INT_IIFG_OFS                      ( 1)                            /*!< CEIIFG Bit Offset */
N#define COMP_E_INT_IIFG                          ((uint16_t)0x0002)              /*!< Comparator output inverted interrupt flag */
N/* COMP_E_INT[RDYIFG] Bits */
N#define COMP_E_INT_RDYIFG_OFS                    ( 4)                            /*!< CERDYIFG Bit Offset */
N#define COMP_E_INT_RDYIFG                        ((uint16_t)0x0010)              /*!< Comparator ready interrupt flag */
N/* COMP_E_INT[IE] Bits */
N#define COMP_E_INT_IE_OFS                        ( 8)                            /*!< CEIE Bit Offset */
N#define COMP_E_INT_IE                            ((uint16_t)0x0100)              /*!< Comparator output interrupt enable */
N/* COMP_E_INT[IIE] Bits */
N#define COMP_E_INT_IIE_OFS                       ( 9)                            /*!< CEIIE Bit Offset */
N#define COMP_E_INT_IIE                           ((uint16_t)0x0200)              /*!< Comparator output interrupt enable inverted polarity */
N/* COMP_E_INT[RDYIE] Bits */
N#define COMP_E_INT_RDYIE_OFS                     (12)                            /*!< CERDYIE Bit Offset */
N#define COMP_E_INT_RDYIE                         ((uint16_t)0x1000)              /*!< Comparator ready interrupt enable */
N
N/******************************************************************************
N* COREDEBUG Bits
N******************************************************************************/
N
N
N/******************************************************************************
N* CRC32 Bits
N******************************************************************************/
N
N/******************************************************************************
N* CS Bits
N******************************************************************************/
N/* CS_KEY[KEY] Bits */
N#define CS_KEY_KEY_OFS                           ( 0)                            /*!< CSKEY Bit Offset */
N#define CS_KEY_KEY_MASK                          ((uint32_t)0x0000FFFF)          /*!< CSKEY Bit Mask */
N/* CS_CTL0[DCOTUNE] Bits */
N#define CS_CTL0_DCOTUNE_OFS                      ( 0)                            /*!< DCOTUNE Bit Offset */
N#define CS_CTL0_DCOTUNE_MASK                     ((uint32_t)0x000003FF)          /*!< DCOTUNE Bit Mask */
N/* CS_CTL0[DCORSEL] Bits */
N#define CS_CTL0_DCORSEL_OFS                      (16)                            /*!< DCORSEL Bit Offset */
N#define CS_CTL0_DCORSEL_MASK                     ((uint32_t)0x00070000)          /*!< DCORSEL Bit Mask */
N#define CS_CTL0_DCORSEL0                         ((uint32_t)0x00010000)          /*!< DCORSEL Bit 0 */
N#define CS_CTL0_DCORSEL1                         ((uint32_t)0x00020000)          /*!< DCORSEL Bit 1 */
N#define CS_CTL0_DCORSEL2                         ((uint32_t)0x00040000)          /*!< DCORSEL Bit 2 */
N#define CS_CTL0_DCORSEL_0                        ((uint32_t)0x00000000)          /*!< Nominal DCO Frequency Range (MHz): 1 to 2 */
N#define CS_CTL0_DCORSEL_1                        ((uint32_t)0x00010000)          /*!< Nominal DCO Frequency Range (MHz): 2 to 4 */
N#define CS_CTL0_DCORSEL_2                        ((uint32_t)0x00020000)          /*!< Nominal DCO Frequency Range (MHz): 4 to 8 */
N#define CS_CTL0_DCORSEL_3                        ((uint32_t)0x00030000)          /*!< Nominal DCO Frequency Range (MHz): 8 to 16 */
N#define CS_CTL0_DCORSEL_4                        ((uint32_t)0x00040000)          /*!< Nominal DCO Frequency Range (MHz): 16 to 32 */
N#define CS_CTL0_DCORSEL_5                        ((uint32_t)0x00050000)          /*!< Nominal DCO Frequency Range (MHz): 32 to 64 */
N/* CS_CTL0[DCORES] Bits */
N#define CS_CTL0_DCORES_OFS                       (22)                            /*!< DCORES Bit Offset */
N#define CS_CTL0_DCORES                           ((uint32_t)0x00400000)          /*!< Enables the DCO external resistor mode */
N/* CS_CTL0[DCOEN] Bits */
N#define CS_CTL0_DCOEN_OFS                        (23)                            /*!< DCOEN Bit Offset */
N#define CS_CTL0_DCOEN                            ((uint32_t)0x00800000)          /*!< Enables the DCO oscillator */
N/* CS_CTL1[SELM] Bits */
N#define CS_CTL1_SELM_OFS                         ( 0)                            /*!< SELM Bit Offset */
N#define CS_CTL1_SELM_MASK                        ((uint32_t)0x00000007)          /*!< SELM Bit Mask */
N#define CS_CTL1_SELM0                            ((uint32_t)0x00000001)          /*!< SELM Bit 0 */
N#define CS_CTL1_SELM1                            ((uint32_t)0x00000002)          /*!< SELM Bit 1 */
N#define CS_CTL1_SELM2                            ((uint32_t)0x00000004)          /*!< SELM Bit 2 */
N#define CS_CTL1_SELM_0                           ((uint32_t)0x00000000)          /*!< when LFXT available, otherwise REFOCLK */
N#define CS_CTL1_SELM_1                           ((uint32_t)0x00000001)          
N#define CS_CTL1_SELM_2                           ((uint32_t)0x00000002)          
N#define CS_CTL1_SELM_3                           ((uint32_t)0x00000003)          
N#define CS_CTL1_SELM_4                           ((uint32_t)0x00000004)          
N#define CS_CTL1_SELM_5                           ((uint32_t)0x00000005)          /*!< when HFXT available, otherwise DCOCLK */
N#define CS_CTL1_SELM_6                           ((uint32_t)0x00000006)          /*!< when HFXT2 available, otherwise DCOCLK */
N#define CS_CTL1_SELM__LFXTCLK                    ((uint32_t)0x00000000)          /*!< when LFXT available, otherwise REFOCLK */
N#define CS_CTL1_SELM__VLOCLK                     ((uint32_t)0x00000001)          
N#define CS_CTL1_SELM__REFOCLK                    ((uint32_t)0x00000002)          
N#define CS_CTL1_SELM__DCOCLK                     ((uint32_t)0x00000003)          
N#define CS_CTL1_SELM__MODOSC                     ((uint32_t)0x00000004)          
N#define CS_CTL1_SELM__HFXTCLK                    ((uint32_t)0x00000005)          /*!< when HFXT available, otherwise DCOCLK */
N#define CS_CTL1_SELM__HFXT2CLK                   ((uint32_t)0x00000006)          /*!< when HFXT2 available, otherwise DCOCLK */
N/* CS_CTL1[SELS] Bits */
N#define CS_CTL1_SELS_OFS                         ( 4)                            /*!< SELS Bit Offset */
N#define CS_CTL1_SELS_MASK                        ((uint32_t)0x00000070)          /*!< SELS Bit Mask */
N#define CS_CTL1_SELS0                            ((uint32_t)0x00000010)          /*!< SELS Bit 0 */
N#define CS_CTL1_SELS1                            ((uint32_t)0x00000020)          /*!< SELS Bit 1 */
N#define CS_CTL1_SELS2                            ((uint32_t)0x00000040)          /*!< SELS Bit 2 */
N#define CS_CTL1_SELS_0                           ((uint32_t)0x00000000)          /*!< when LFXT available, otherwise REFOCLK */
N#define CS_CTL1_SELS_1                           ((uint32_t)0x00000010)          
N#define CS_CTL1_SELS_2                           ((uint32_t)0x00000020)          
N#define CS_CTL1_SELS_3                           ((uint32_t)0x00000030)          
N#define CS_CTL1_SELS_4                           ((uint32_t)0x00000040)          
N#define CS_CTL1_SELS_5                           ((uint32_t)0x00000050)          /*!< when HFXT available, otherwise DCOCLK */
N#define CS_CTL1_SELS_6                           ((uint32_t)0x00000060)          /*!< when HFXT2 available, otherwise DCOCLK */
N#define CS_CTL1_SELS__LFXTCLK                    ((uint32_t)0x00000000)          /*!< when LFXT available, otherwise REFOCLK */
N#define CS_CTL1_SELS__VLOCLK                     ((uint32_t)0x00000010)          
N#define CS_CTL1_SELS__REFOCLK                    ((uint32_t)0x00000020)          
N#define CS_CTL1_SELS__DCOCLK                     ((uint32_t)0x00000030)          
N#define CS_CTL1_SELS__MODOSC                     ((uint32_t)0x00000040)          
N#define CS_CTL1_SELS__HFXTCLK                    ((uint32_t)0x00000050)          /*!< when HFXT available, otherwise DCOCLK */
N#define CS_CTL1_SELS__HFXT2CLK                   ((uint32_t)0x00000060)          /*!< when HFXT2 available, otherwise DCOCLK */
N/* CS_CTL1[SELA] Bits */
N#define CS_CTL1_SELA_OFS                         ( 8)                            /*!< SELA Bit Offset */
N#define CS_CTL1_SELA_MASK                        ((uint32_t)0x00000700)          /*!< SELA Bit Mask */
N#define CS_CTL1_SELA0                            ((uint32_t)0x00000100)          /*!< SELA Bit 0 */
N#define CS_CTL1_SELA1                            ((uint32_t)0x00000200)          /*!< SELA Bit 1 */
N#define CS_CTL1_SELA2                            ((uint32_t)0x00000400)          /*!< SELA Bit 2 */
N#define CS_CTL1_SELA_0                           ((uint32_t)0x00000000)          /*!< when LFXT available, otherwise REFOCLK */
N#define CS_CTL1_SELA_1                           ((uint32_t)0x00000100)          
N#define CS_CTL1_SELA_2                           ((uint32_t)0x00000200)          
N#define CS_CTL1_SELA__LFXTCLK                    ((uint32_t)0x00000000)          /*!< when LFXT available, otherwise REFOCLK */
N#define CS_CTL1_SELA__VLOCLK                     ((uint32_t)0x00000100)          
N#define CS_CTL1_SELA__REFOCLK                    ((uint32_t)0x00000200)          
N/* CS_CTL1[SELB] Bits */
N#define CS_CTL1_SELB_OFS                         (12)                            /*!< SELB Bit Offset */
N#define CS_CTL1_SELB                             ((uint32_t)0x00001000)          /*!< Selects the BCLK source */
N/* CS_CTL1[DIVM] Bits */
N#define CS_CTL1_DIVM_OFS                         (16)                            /*!< DIVM Bit Offset */
N#define CS_CTL1_DIVM_MASK                        ((uint32_t)0x00070000)          /*!< DIVM Bit Mask */
N#define CS_CTL1_DIVM0                            ((uint32_t)0x00010000)          /*!< DIVM Bit 0 */
N#define CS_CTL1_DIVM1                            ((uint32_t)0x00020000)          /*!< DIVM Bit 1 */
N#define CS_CTL1_DIVM2                            ((uint32_t)0x00040000)          /*!< DIVM Bit 2 */
N#define CS_CTL1_DIVM_0                           ((uint32_t)0x00000000)          /*!< f(MCLK)/1 */
N#define CS_CTL1_DIVM_1                           ((uint32_t)0x00010000)          /*!< f(MCLK)/2 */
N#define CS_CTL1_DIVM_2                           ((uint32_t)0x00020000)          /*!< f(MCLK)/4 */
N#define CS_CTL1_DIVM_3                           ((uint32_t)0x00030000)          /*!< f(MCLK)/8 */
N#define CS_CTL1_DIVM_4                           ((uint32_t)0x00040000)          /*!< f(MCLK)/16 */
N#define CS_CTL1_DIVM_5                           ((uint32_t)0x00050000)          /*!< f(MCLK)/32 */
N#define CS_CTL1_DIVM_6                           ((uint32_t)0x00060000)          /*!< f(MCLK)/64 */
N#define CS_CTL1_DIVM_7                           ((uint32_t)0x00070000)          /*!< f(MCLK)/128 */
N#define CS_CTL1_DIVM__1                          ((uint32_t)0x00000000)          /*!< f(MCLK)/1 */
N#define CS_CTL1_DIVM__2                          ((uint32_t)0x00010000)          /*!< f(MCLK)/2 */
N#define CS_CTL1_DIVM__4                          ((uint32_t)0x00020000)          /*!< f(MCLK)/4 */
N#define CS_CTL1_DIVM__8                          ((uint32_t)0x00030000)          /*!< f(MCLK)/8 */
N#define CS_CTL1_DIVM__16                         ((uint32_t)0x00040000)          /*!< f(MCLK)/16 */
N#define CS_CTL1_DIVM__32                         ((uint32_t)0x00050000)          /*!< f(MCLK)/32 */
N#define CS_CTL1_DIVM__64                         ((uint32_t)0x00060000)          /*!< f(MCLK)/64 */
N#define CS_CTL1_DIVM__128                        ((uint32_t)0x00070000)          /*!< f(MCLK)/128 */
N/* CS_CTL1[DIVHS] Bits */
N#define CS_CTL1_DIVHS_OFS                        (20)                            /*!< DIVHS Bit Offset */
N#define CS_CTL1_DIVHS_MASK                       ((uint32_t)0x00700000)          /*!< DIVHS Bit Mask */
N#define CS_CTL1_DIVHS0                           ((uint32_t)0x00100000)          /*!< DIVHS Bit 0 */
N#define CS_CTL1_DIVHS1                           ((uint32_t)0x00200000)          /*!< DIVHS Bit 1 */
N#define CS_CTL1_DIVHS2                           ((uint32_t)0x00400000)          /*!< DIVHS Bit 2 */
N#define CS_CTL1_DIVHS_0                          ((uint32_t)0x00000000)          /*!< f(HSMCLK)/1 */
N#define CS_CTL1_DIVHS_1                          ((uint32_t)0x00100000)          /*!< f(HSMCLK)/2 */
N#define CS_CTL1_DIVHS_2                          ((uint32_t)0x00200000)          /*!< f(HSMCLK)/4 */
N#define CS_CTL1_DIVHS_3                          ((uint32_t)0x00300000)          /*!< f(HSMCLK)/8 */
N#define CS_CTL1_DIVHS_4                          ((uint32_t)0x00400000)          /*!< f(HSMCLK)/16 */
N#define CS_CTL1_DIVHS_5                          ((uint32_t)0x00500000)          /*!< f(HSMCLK)/32 */
N#define CS_CTL1_DIVHS_6                          ((uint32_t)0x00600000)          /*!< f(HSMCLK)/64 */
N#define CS_CTL1_DIVHS_7                          ((uint32_t)0x00700000)          /*!< f(HSMCLK)/128 */
N#define CS_CTL1_DIVHS__1                         ((uint32_t)0x00000000)          /*!< f(HSMCLK)/1 */
N#define CS_CTL1_DIVHS__2                         ((uint32_t)0x00100000)          /*!< f(HSMCLK)/2 */
N#define CS_CTL1_DIVHS__4                         ((uint32_t)0x00200000)          /*!< f(HSMCLK)/4 */
N#define CS_CTL1_DIVHS__8                         ((uint32_t)0x00300000)          /*!< f(HSMCLK)/8 */
N#define CS_CTL1_DIVHS__16                        ((uint32_t)0x00400000)          /*!< f(HSMCLK)/16 */
N#define CS_CTL1_DIVHS__32                        ((uint32_t)0x00500000)          /*!< f(HSMCLK)/32 */
N#define CS_CTL1_DIVHS__64                        ((uint32_t)0x00600000)          /*!< f(HSMCLK)/64 */
N#define CS_CTL1_DIVHS__128                       ((uint32_t)0x00700000)          /*!< f(HSMCLK)/128 */
N/* CS_CTL1[DIVA] Bits */
N#define CS_CTL1_DIVA_OFS                         (24)                            /*!< DIVA Bit Offset */
N#define CS_CTL1_DIVA_MASK                        ((uint32_t)0x07000000)          /*!< DIVA Bit Mask */
N#define CS_CTL1_DIVA0                            ((uint32_t)0x01000000)          /*!< DIVA Bit 0 */
N#define CS_CTL1_DIVA1                            ((uint32_t)0x02000000)          /*!< DIVA Bit 1 */
N#define CS_CTL1_DIVA2                            ((uint32_t)0x04000000)          /*!< DIVA Bit 2 */
N#define CS_CTL1_DIVA_0                           ((uint32_t)0x00000000)          /*!< f(ACLK)/1 */
N#define CS_CTL1_DIVA_1                           ((uint32_t)0x01000000)          /*!< f(ACLK)/2 */
N#define CS_CTL1_DIVA_2                           ((uint32_t)0x02000000)          /*!< f(ACLK)/4 */
N#define CS_CTL1_DIVA_3                           ((uint32_t)0x03000000)          /*!< f(ACLK)/8 */
N#define CS_CTL1_DIVA_4                           ((uint32_t)0x04000000)          /*!< f(ACLK)/16 */
N#define CS_CTL1_DIVA_5                           ((uint32_t)0x05000000)          /*!< f(ACLK)/32 */
N#define CS_CTL1_DIVA_6                           ((uint32_t)0x06000000)          /*!< f(ACLK)/64 */
N#define CS_CTL1_DIVA_7                           ((uint32_t)0x07000000)          /*!< f(ACLK)/128 */
N#define CS_CTL1_DIVA__1                          ((uint32_t)0x00000000)          /*!< f(ACLK)/1 */
N#define CS_CTL1_DIVA__2                          ((uint32_t)0x01000000)          /*!< f(ACLK)/2 */
N#define CS_CTL1_DIVA__4                          ((uint32_t)0x02000000)          /*!< f(ACLK)/4 */
N#define CS_CTL1_DIVA__8                          ((uint32_t)0x03000000)          /*!< f(ACLK)/8 */
N#define CS_CTL1_DIVA__16                         ((uint32_t)0x04000000)          /*!< f(ACLK)/16 */
N#define CS_CTL1_DIVA__32                         ((uint32_t)0x05000000)          /*!< f(ACLK)/32 */
N#define CS_CTL1_DIVA__64                         ((uint32_t)0x06000000)          /*!< f(ACLK)/64 */
N#define CS_CTL1_DIVA__128                        ((uint32_t)0x07000000)          /*!< f(ACLK)/128 */
N/* CS_CTL1[DIVS] Bits */
N#define CS_CTL1_DIVS_OFS                         (28)                            /*!< DIVS Bit Offset */
N#define CS_CTL1_DIVS_MASK                        ((uint32_t)0x70000000)          /*!< DIVS Bit Mask */
N#define CS_CTL1_DIVS0                            ((uint32_t)0x10000000)          /*!< DIVS Bit 0 */
N#define CS_CTL1_DIVS1                            ((uint32_t)0x20000000)          /*!< DIVS Bit 1 */
N#define CS_CTL1_DIVS2                            ((uint32_t)0x40000000)          /*!< DIVS Bit 2 */
N#define CS_CTL1_DIVS_0                           ((uint32_t)0x00000000)          /*!< f(SMCLK)/1 */
N#define CS_CTL1_DIVS_1                           ((uint32_t)0x10000000)          /*!< f(SMCLK)/2 */
N#define CS_CTL1_DIVS_2                           ((uint32_t)0x20000000)          /*!< f(SMCLK)/4 */
N#define CS_CTL1_DIVS_3                           ((uint32_t)0x30000000)          /*!< f(SMCLK)/8 */
N#define CS_CTL1_DIVS_4                           ((uint32_t)0x40000000)          /*!< f(SMCLK)/16 */
N#define CS_CTL1_DIVS_5                           ((uint32_t)0x50000000)          /*!< f(SMCLK)/32 */
N#define CS_CTL1_DIVS_6                           ((uint32_t)0x60000000)          /*!< f(SMCLK)/64 */
N#define CS_CTL1_DIVS_7                           ((uint32_t)0x70000000)          /*!< f(SMCLK)/128 */
N#define CS_CTL1_DIVS__1                          ((uint32_t)0x00000000)          /*!< f(SMCLK)/1 */
N#define CS_CTL1_DIVS__2                          ((uint32_t)0x10000000)          /*!< f(SMCLK)/2 */
N#define CS_CTL1_DIVS__4                          ((uint32_t)0x20000000)          /*!< f(SMCLK)/4 */
N#define CS_CTL1_DIVS__8                          ((uint32_t)0x30000000)          /*!< f(SMCLK)/8 */
N#define CS_CTL1_DIVS__16                         ((uint32_t)0x40000000)          /*!< f(SMCLK)/16 */
N#define CS_CTL1_DIVS__32                         ((uint32_t)0x50000000)          /*!< f(SMCLK)/32 */
N#define CS_CTL1_DIVS__64                         ((uint32_t)0x60000000)          /*!< f(SMCLK)/64 */
N#define CS_CTL1_DIVS__128                        ((uint32_t)0x70000000)          /*!< f(SMCLK)/128 */
N/* CS_CTL2[LFXTDRIVE] Bits */
N#define CS_CTL2_LFXTDRIVE_OFS                    ( 0)                            /*!< LFXTDRIVE Bit Offset */
N#define CS_CTL2_LFXTDRIVE_MASK                   ((uint32_t)0x00000003)          /*!< LFXTDRIVE Bit Mask */
N#define CS_CTL2_LFXTDRIVE0                       ((uint32_t)0x00000001)          /*!< LFXTDRIVE Bit 0 */
N#define CS_CTL2_LFXTDRIVE1                       ((uint32_t)0x00000002)          /*!< LFXTDRIVE Bit 1 */
N#define CS_CTL2_LFXTDRIVE_0                      ((uint32_t)0x00000000)          /*!< Lowest drive strength and current consumption LFXT oscillator. */
N#define CS_CTL2_LFXTDRIVE_1                      ((uint32_t)0x00000001)          /*!< Increased drive strength LFXT oscillator. */
N#define CS_CTL2_LFXTDRIVE_2                      ((uint32_t)0x00000002)          /*!< Increased drive strength LFXT oscillator. */
N#define CS_CTL2_LFXTDRIVE_3                      ((uint32_t)0x00000003)          /*!< Maximum drive strength and maximum current consumption LFXT oscillator. */
N/* CS_CTL2[LFXT_EN] Bits */
N#define CS_CTL2_LFXT_EN_OFS                      ( 8)                            /*!< LFXT_EN Bit Offset */
N#define CS_CTL2_LFXT_EN                          ((uint32_t)0x00000100)          /*!< Turns on the LFXT oscillator regardless if used as a clock resource */
N/* CS_CTL2[LFXTBYPASS] Bits */
N#define CS_CTL2_LFXTBYPASS_OFS                   ( 9)                            /*!< LFXTBYPASS Bit Offset */
N#define CS_CTL2_LFXTBYPASS                       ((uint32_t)0x00000200)          /*!< LFXT bypass select */
N/* CS_CTL2[HFXTDRIVE] Bits */
N#define CS_CTL2_HFXTDRIVE_OFS                    (16)                            /*!< HFXTDRIVE Bit Offset */
N#define CS_CTL2_HFXTDRIVE                        ((uint32_t)0x00010000)          /*!< HFXT oscillator drive selection */
N/* CS_CTL2[HFXTFREQ] Bits */
N#define CS_CTL2_HFXTFREQ_OFS                     (20)                            /*!< HFXTFREQ Bit Offset */
N#define CS_CTL2_HFXTFREQ_MASK                    ((uint32_t)0x00700000)          /*!< HFXTFREQ Bit Mask */
N#define CS_CTL2_HFXTFREQ0                        ((uint32_t)0x00100000)          /*!< HFXTFREQ Bit 0 */
N#define CS_CTL2_HFXTFREQ1                        ((uint32_t)0x00200000)          /*!< HFXTFREQ Bit 1 */
N#define CS_CTL2_HFXTFREQ2                        ((uint32_t)0x00400000)          /*!< HFXTFREQ Bit 2 */
N#define CS_CTL2_HFXTFREQ_0                       ((uint32_t)0x00000000)          /*!< 1 MHz to 4 MHz */
N#define CS_CTL2_HFXTFREQ_1                       ((uint32_t)0x00100000)          /*!< >4 MHz to 8 MHz */
N#define CS_CTL2_HFXTFREQ_2                       ((uint32_t)0x00200000)          /*!< >8 MHz to 16 MHz */
N#define CS_CTL2_HFXTFREQ_3                       ((uint32_t)0x00300000)          /*!< >16 MHz to 24 MHz */
N#define CS_CTL2_HFXTFREQ_4                       ((uint32_t)0x00400000)          /*!< >24 MHz to 32 MHz */
N#define CS_CTL2_HFXTFREQ_5                       ((uint32_t)0x00500000)          /*!< >32 MHz to 40 MHz */
N#define CS_CTL2_HFXTFREQ_6                       ((uint32_t)0x00600000)          /*!< >40 MHz to 48 MHz */
N#define CS_CTL2_HFXTFREQ_7                       ((uint32_t)0x00700000)          /*!< Reserved for future use. */
N/* CS_CTL2[HFXT_EN] Bits */
N#define CS_CTL2_HFXT_EN_OFS                      (24)                            /*!< HFXT_EN Bit Offset */
N#define CS_CTL2_HFXT_EN                          ((uint32_t)0x01000000)          /*!< Turns on the HFXT oscillator regardless if used as a clock resource */
N/* CS_CTL2[HFXTBYPASS] Bits */
N#define CS_CTL2_HFXTBYPASS_OFS                   (25)                            /*!< HFXTBYPASS Bit Offset */
N#define CS_CTL2_HFXTBYPASS                       ((uint32_t)0x02000000)          /*!< HFXT bypass select */
N/* CS_CTL3[FCNTLF] Bits */
N#define CS_CTL3_FCNTLF_OFS                       ( 0)                            /*!< FCNTLF Bit Offset */
N#define CS_CTL3_FCNTLF_MASK                      ((uint32_t)0x00000003)          /*!< FCNTLF Bit Mask */
N#define CS_CTL3_FCNTLF0                          ((uint32_t)0x00000001)          /*!< FCNTLF Bit 0 */
N#define CS_CTL3_FCNTLF1                          ((uint32_t)0x00000002)          /*!< FCNTLF Bit 1 */
N#define CS_CTL3_FCNTLF_0                         ((uint32_t)0x00000000)          /*!< 4096 cycles */
N#define CS_CTL3_FCNTLF_1                         ((uint32_t)0x00000001)          /*!< 8192 cycles */
N#define CS_CTL3_FCNTLF_2                         ((uint32_t)0x00000002)          /*!< 16384 cycles */
N#define CS_CTL3_FCNTLF_3                         ((uint32_t)0x00000003)          /*!< 32768 cycles */
N#define CS_CTL3_FCNTLF__4096                     ((uint32_t)0x00000000)          /*!< 4096 cycles */
N#define CS_CTL3_FCNTLF__8192                     ((uint32_t)0x00000001)          /*!< 8192 cycles */
N#define CS_CTL3_FCNTLF__16384                    ((uint32_t)0x00000002)          /*!< 16384 cycles */
N#define CS_CTL3_FCNTLF__32768                    ((uint32_t)0x00000003)          /*!< 32768 cycles */
N/* CS_CTL3[RFCNTLF] Bits */
N#define CS_CTL3_RFCNTLF_OFS                      ( 2)                            /*!< RFCNTLF Bit Offset */
N#define CS_CTL3_RFCNTLF                          ((uint32_t)0x00000004)          /*!< Reset start fault counter for LFXT */
N/* CS_CTL3[FCNTLF_EN] Bits */
N#define CS_CTL3_FCNTLF_EN_OFS                    ( 3)                            /*!< FCNTLF_EN Bit Offset */
N#define CS_CTL3_FCNTLF_EN                        ((uint32_t)0x00000008)          /*!< Enable start fault counter for LFXT */
N/* CS_CTL3[FCNTHF] Bits */
N#define CS_CTL3_FCNTHF_OFS                       ( 4)                            /*!< FCNTHF Bit Offset */
N#define CS_CTL3_FCNTHF_MASK                      ((uint32_t)0x00000030)          /*!< FCNTHF Bit Mask */
N#define CS_CTL3_FCNTHF0                          ((uint32_t)0x00000010)          /*!< FCNTHF Bit 0 */
N#define CS_CTL3_FCNTHF1                          ((uint32_t)0x00000020)          /*!< FCNTHF Bit 1 */
N#define CS_CTL3_FCNTHF_0                         ((uint32_t)0x00000000)          /*!< 2048 cycles */
N#define CS_CTL3_FCNTHF_1                         ((uint32_t)0x00000010)          /*!< 4096 cycles */
N#define CS_CTL3_FCNTHF_2                         ((uint32_t)0x00000020)          /*!< 8192 cycles */
N#define CS_CTL3_FCNTHF_3                         ((uint32_t)0x00000030)          /*!< 16384 cycles */
N#define CS_CTL3_FCNTHF__2048                     ((uint32_t)0x00000000)          /*!< 2048 cycles */
N#define CS_CTL3_FCNTHF__4096                     ((uint32_t)0x00000010)          /*!< 4096 cycles */
N#define CS_CTL3_FCNTHF__8192                     ((uint32_t)0x00000020)          /*!< 8192 cycles */
N#define CS_CTL3_FCNTHF__16384                    ((uint32_t)0x00000030)          /*!< 16384 cycles */
N/* CS_CTL3[RFCNTHF] Bits */
N#define CS_CTL3_RFCNTHF_OFS                      ( 6)                            /*!< RFCNTHF Bit Offset */
N#define CS_CTL3_RFCNTHF                          ((uint32_t)0x00000040)          /*!< Reset start fault counter for HFXT */
N/* CS_CTL3[FCNTHF_EN] Bits */
N#define CS_CTL3_FCNTHF_EN_OFS                    ( 7)                            /*!< FCNTHF_EN Bit Offset */
N#define CS_CTL3_FCNTHF_EN                        ((uint32_t)0x00000080)          /*!< Enable start fault counter for HFXT */
N/* CS_CLKEN[ACLK_EN] Bits */
N#define CS_CLKEN_ACLK_EN_OFS                     ( 0)                            /*!< ACLK_EN Bit Offset */
N#define CS_CLKEN_ACLK_EN                         ((uint32_t)0x00000001)          /*!< ACLK system clock conditional request enable */
N/* CS_CLKEN[MCLK_EN] Bits */
N#define CS_CLKEN_MCLK_EN_OFS                     ( 1)                            /*!< MCLK_EN Bit Offset */
N#define CS_CLKEN_MCLK_EN                         ((uint32_t)0x00000002)          /*!< MCLK system clock conditional request enable */
N/* CS_CLKEN[HSMCLK_EN] Bits */
N#define CS_CLKEN_HSMCLK_EN_OFS                   ( 2)                            /*!< HSMCLK_EN Bit Offset */
N#define CS_CLKEN_HSMCLK_EN                       ((uint32_t)0x00000004)          /*!< HSMCLK system clock conditional request enable */
N/* CS_CLKEN[SMCLK_EN] Bits */
N#define CS_CLKEN_SMCLK_EN_OFS                    ( 3)                            /*!< SMCLK_EN Bit Offset */
N#define CS_CLKEN_SMCLK_EN                        ((uint32_t)0x00000008)          /*!< SMCLK system clock conditional request enable */
N/* CS_CLKEN[VLO_EN] Bits */
N#define CS_CLKEN_VLO_EN_OFS                      ( 8)                            /*!< VLO_EN Bit Offset */
N#define CS_CLKEN_VLO_EN                          ((uint32_t)0x00000100)          /*!< Turns on the VLO oscillator */
N/* CS_CLKEN[REFO_EN] Bits */
N#define CS_CLKEN_REFO_EN_OFS                     ( 9)                            /*!< REFO_EN Bit Offset */
N#define CS_CLKEN_REFO_EN                         ((uint32_t)0x00000200)          /*!< Turns on the REFO oscillator */
N/* CS_CLKEN[MODOSC_EN] Bits */
N#define CS_CLKEN_MODOSC_EN_OFS                   (10)                            /*!< MODOSC_EN Bit Offset */
N#define CS_CLKEN_MODOSC_EN                       ((uint32_t)0x00000400)          /*!< Turns on the MODOSC oscillator */
N/* CS_CLKEN[REFOFSEL] Bits */
N#define CS_CLKEN_REFOFSEL_OFS                    (15)                            /*!< REFOFSEL Bit Offset */
N#define CS_CLKEN_REFOFSEL                        ((uint32_t)0x00008000)          /*!< Selects REFO nominal frequency */
N/* CS_STAT[DCO_ON] Bits */
N#define CS_STAT_DCO_ON_OFS                       ( 0)                            /*!< DCO_ON Bit Offset */
N#define CS_STAT_DCO_ON                           ((uint32_t)0x00000001)          /*!< DCO status */
N/* CS_STAT[DCOBIAS_ON] Bits */
N#define CS_STAT_DCOBIAS_ON_OFS                   ( 1)                            /*!< DCOBIAS_ON Bit Offset */
N#define CS_STAT_DCOBIAS_ON                       ((uint32_t)0x00000002)          /*!< DCO bias status */
N/* CS_STAT[HFXT_ON] Bits */
N#define CS_STAT_HFXT_ON_OFS                      ( 2)                            /*!< HFXT_ON Bit Offset */
N#define CS_STAT_HFXT_ON                          ((uint32_t)0x00000004)          /*!< HFXT status */
N/* CS_STAT[MODOSC_ON] Bits */
N#define CS_STAT_MODOSC_ON_OFS                    ( 4)                            /*!< MODOSC_ON Bit Offset */
N#define CS_STAT_MODOSC_ON                        ((uint32_t)0x00000010)          /*!< MODOSC status */
N/* CS_STAT[VLO_ON] Bits */
N#define CS_STAT_VLO_ON_OFS                       ( 5)                            /*!< VLO_ON Bit Offset */
N#define CS_STAT_VLO_ON                           ((uint32_t)0x00000020)          /*!< VLO status */
N/* CS_STAT[LFXT_ON] Bits */
N#define CS_STAT_LFXT_ON_OFS                      ( 6)                            /*!< LFXT_ON Bit Offset */
N#define CS_STAT_LFXT_ON                          ((uint32_t)0x00000040)          /*!< LFXT status */
N/* CS_STAT[REFO_ON] Bits */
N#define CS_STAT_REFO_ON_OFS                      ( 7)                            /*!< REFO_ON Bit Offset */
N#define CS_STAT_REFO_ON                          ((uint32_t)0x00000080)          /*!< REFO status */
N/* CS_STAT[ACLK_ON] Bits */
N#define CS_STAT_ACLK_ON_OFS                      (16)                            /*!< ACLK_ON Bit Offset */
N#define CS_STAT_ACLK_ON                          ((uint32_t)0x00010000)          /*!< ACLK system clock status */
N/* CS_STAT[MCLK_ON] Bits */
N#define CS_STAT_MCLK_ON_OFS                      (17)                            /*!< MCLK_ON Bit Offset */
N#define CS_STAT_MCLK_ON                          ((uint32_t)0x00020000)          /*!< MCLK system clock status */
N/* CS_STAT[HSMCLK_ON] Bits */
N#define CS_STAT_HSMCLK_ON_OFS                    (18)                            /*!< HSMCLK_ON Bit Offset */
N#define CS_STAT_HSMCLK_ON                        ((uint32_t)0x00040000)          /*!< HSMCLK system clock status */
N/* CS_STAT[SMCLK_ON] Bits */
N#define CS_STAT_SMCLK_ON_OFS                     (19)                            /*!< SMCLK_ON Bit Offset */
N#define CS_STAT_SMCLK_ON                         ((uint32_t)0x00080000)          /*!< SMCLK system clock status */
N/* CS_STAT[MODCLK_ON] Bits */
N#define CS_STAT_MODCLK_ON_OFS                    (20)                            /*!< MODCLK_ON Bit Offset */
N#define CS_STAT_MODCLK_ON                        ((uint32_t)0x00100000)          /*!< MODCLK system clock status */
N/* CS_STAT[VLOCLK_ON] Bits */
N#define CS_STAT_VLOCLK_ON_OFS                    (21)                            /*!< VLOCLK_ON Bit Offset */
N#define CS_STAT_VLOCLK_ON                        ((uint32_t)0x00200000)          /*!< VLOCLK system clock status */
N/* CS_STAT[LFXTCLK_ON] Bits */
N#define CS_STAT_LFXTCLK_ON_OFS                   (22)                            /*!< LFXTCLK_ON Bit Offset */
N#define CS_STAT_LFXTCLK_ON                       ((uint32_t)0x00400000)          /*!< LFXTCLK system clock status */
N/* CS_STAT[REFOCLK_ON] Bits */
N#define CS_STAT_REFOCLK_ON_OFS                   (23)                            /*!< REFOCLK_ON Bit Offset */
N#define CS_STAT_REFOCLK_ON                       ((uint32_t)0x00800000)          /*!< REFOCLK system clock status */
N/* CS_STAT[ACLK_READY] Bits */
N#define CS_STAT_ACLK_READY_OFS                   (24)                            /*!< ACLK_READY Bit Offset */
N#define CS_STAT_ACLK_READY                       ((uint32_t)0x01000000)          /*!< ACLK Ready status */
N/* CS_STAT[MCLK_READY] Bits */
N#define CS_STAT_MCLK_READY_OFS                   (25)                            /*!< MCLK_READY Bit Offset */
N#define CS_STAT_MCLK_READY                       ((uint32_t)0x02000000)          /*!< MCLK Ready status */
N/* CS_STAT[HSMCLK_READY] Bits */
N#define CS_STAT_HSMCLK_READY_OFS                 (26)                            /*!< HSMCLK_READY Bit Offset */
N#define CS_STAT_HSMCLK_READY                     ((uint32_t)0x04000000)          /*!< HSMCLK Ready status */
N/* CS_STAT[SMCLK_READY] Bits */
N#define CS_STAT_SMCLK_READY_OFS                  (27)                            /*!< SMCLK_READY Bit Offset */
N#define CS_STAT_SMCLK_READY                      ((uint32_t)0x08000000)          /*!< SMCLK Ready status */
N/* CS_STAT[BCLK_READY] Bits */
N#define CS_STAT_BCLK_READY_OFS                   (28)                            /*!< BCLK_READY Bit Offset */
N#define CS_STAT_BCLK_READY                       ((uint32_t)0x10000000)          /*!< BCLK Ready status */
N/* CS_IE[LFXTIE] Bits */
N#define CS_IE_LFXTIE_OFS                         ( 0)                            /*!< LFXTIE Bit Offset */
N#define CS_IE_LFXTIE                             ((uint32_t)0x00000001)          /*!< LFXT oscillator fault flag interrupt enable */
N/* CS_IE[HFXTIE] Bits */
N#define CS_IE_HFXTIE_OFS                         ( 1)                            /*!< HFXTIE Bit Offset */
N#define CS_IE_HFXTIE                             ((uint32_t)0x00000002)          /*!< HFXT oscillator fault flag interrupt enable */
N/* CS_IE[DCOR_OPNIE] Bits */
N#define CS_IE_DCOR_OPNIE_OFS                     ( 6)                            /*!< DCOR_OPNIE Bit Offset */
N#define CS_IE_DCOR_OPNIE                         ((uint32_t)0x00000040)          /*!< DCO external resistor open circuit fault flag interrupt enable. */
N/* CS_IE[FCNTLFIE] Bits */
N#define CS_IE_FCNTLFIE_OFS                       ( 8)                            /*!< FCNTLFIE Bit Offset */
N#define CS_IE_FCNTLFIE                           ((uint32_t)0x00000100)          /*!< Start fault counter interrupt enable LFXT */
N/* CS_IE[FCNTHFIE] Bits */
N#define CS_IE_FCNTHFIE_OFS                       ( 9)                            /*!< FCNTHFIE Bit Offset */
N#define CS_IE_FCNTHFIE                           ((uint32_t)0x00000200)          /*!< Start fault counter interrupt enable HFXT */
N/* CS_IFG[LFXTIFG] Bits */
N#define CS_IFG_LFXTIFG_OFS                       ( 0)                            /*!< LFXTIFG Bit Offset */
N#define CS_IFG_LFXTIFG                           ((uint32_t)0x00000001)          /*!< LFXT oscillator fault flag */
N/* CS_IFG[HFXTIFG] Bits */
N#define CS_IFG_HFXTIFG_OFS                       ( 1)                            /*!< HFXTIFG Bit Offset */
N#define CS_IFG_HFXTIFG                           ((uint32_t)0x00000002)          /*!< HFXT oscillator fault flag */
N/* CS_IFG[DCOR_SHTIFG] Bits */
N#define CS_IFG_DCOR_SHTIFG_OFS                   ( 5)                            /*!< DCOR_SHTIFG Bit Offset */
N#define CS_IFG_DCOR_SHTIFG                       ((uint32_t)0x00000020)          /*!< DCO external resistor short circuit fault flag. */
N/* CS_IFG[DCOR_OPNIFG] Bits */
N#define CS_IFG_DCOR_OPNIFG_OFS                   ( 6)                            /*!< DCOR_OPNIFG Bit Offset */
N#define CS_IFG_DCOR_OPNIFG                       ((uint32_t)0x00000040)          /*!< DCO external resistor open circuit fault flag. */
N/* CS_IFG[FCNTLFIFG] Bits */
N#define CS_IFG_FCNTLFIFG_OFS                     ( 8)                            /*!< FCNTLFIFG Bit Offset */
N#define CS_IFG_FCNTLFIFG                         ((uint32_t)0x00000100)          /*!< Start fault counter interrupt flag LFXT */
N/* CS_IFG[FCNTHFIFG] Bits */
N#define CS_IFG_FCNTHFIFG_OFS                     ( 9)                            /*!< FCNTHFIFG Bit Offset */
N#define CS_IFG_FCNTHFIFG                         ((uint32_t)0x00000200)          /*!< Start fault counter interrupt flag HFXT */
N/* CS_CLRIFG[CLR_LFXTIFG] Bits */
N#define CS_CLRIFG_CLR_LFXTIFG_OFS                ( 0)                            /*!< CLR_LFXTIFG Bit Offset */
N#define CS_CLRIFG_CLR_LFXTIFG                    ((uint32_t)0x00000001)          /*!< Clear LFXT oscillator fault interrupt flag */
N/* CS_CLRIFG[CLR_HFXTIFG] Bits */
N#define CS_CLRIFG_CLR_HFXTIFG_OFS                ( 1)                            /*!< CLR_HFXTIFG Bit Offset */
N#define CS_CLRIFG_CLR_HFXTIFG                    ((uint32_t)0x00000002)          /*!< Clear HFXT oscillator fault interrupt flag */
N/* CS_CLRIFG[CLR_DCOR_OPNIFG] Bits */
N#define CS_CLRIFG_CLR_DCOR_OPNIFG_OFS            ( 6)                            /*!< CLR_DCOR_OPNIFG Bit Offset */
N#define CS_CLRIFG_CLR_DCOR_OPNIFG                ((uint32_t)0x00000040)          /*!< Clear DCO external resistor open circuit fault interrupt flag. */
N/* CS_CLRIFG[CLR_FCNTLFIFG] Bits */
N#define CS_CLRIFG_CLR_FCNTLFIFG_OFS              ( 8)                            /*!< CLR_FCNTLFIFG Bit Offset */
N#define CS_CLRIFG_CLR_FCNTLFIFG                  ((uint32_t)0x00000100)          /*!< Start fault counter clear interrupt flag LFXT */
N/* CS_CLRIFG[CLR_FCNTHFIFG] Bits */
N#define CS_CLRIFG_CLR_FCNTHFIFG_OFS              ( 9)                            /*!< CLR_FCNTHFIFG Bit Offset */
N#define CS_CLRIFG_CLR_FCNTHFIFG                  ((uint32_t)0x00000200)          /*!< Start fault counter clear interrupt flag HFXT */
N/* CS_SETIFG[SET_LFXTIFG] Bits */
N#define CS_SETIFG_SET_LFXTIFG_OFS                ( 0)                            /*!< SET_LFXTIFG Bit Offset */
N#define CS_SETIFG_SET_LFXTIFG                    ((uint32_t)0x00000001)          /*!< Set LFXT oscillator fault interrupt flag */
N/* CS_SETIFG[SET_HFXTIFG] Bits */
N#define CS_SETIFG_SET_HFXTIFG_OFS                ( 1)                            /*!< SET_HFXTIFG Bit Offset */
N#define CS_SETIFG_SET_HFXTIFG                    ((uint32_t)0x00000002)          /*!< Set HFXT oscillator fault interrupt flag */
N/* CS_SETIFG[SET_DCOR_OPNIFG] Bits */
N#define CS_SETIFG_SET_DCOR_OPNIFG_OFS            ( 6)                            /*!< SET_DCOR_OPNIFG Bit Offset */
N#define CS_SETIFG_SET_DCOR_OPNIFG                ((uint32_t)0x00000040)          /*!< Set DCO external resistor open circuit fault interrupt flag. */
N/* CS_SETIFG[SET_FCNTHFIFG] Bits */
N#define CS_SETIFG_SET_FCNTHFIFG_OFS              ( 9)                            /*!< SET_FCNTHFIFG Bit Offset */
N#define CS_SETIFG_SET_FCNTHFIFG                  ((uint32_t)0x00000200)          /*!< Start fault counter set interrupt flag HFXT */
N/* CS_SETIFG[SET_FCNTLFIFG] Bits */
N#define CS_SETIFG_SET_FCNTLFIFG_OFS              ( 8)                            /*!< SET_FCNTLFIFG Bit Offset */
N#define CS_SETIFG_SET_FCNTLFIFG                  ((uint32_t)0x00000100)          /*!< Start fault counter set interrupt flag LFXT */
N/* CS_DCOERCAL0[DCO_TCCAL] Bits */
N#define CS_DCOERCAL0_DCO_TCCAL_OFS               ( 0)                            /*!< DCO_TCCAL Bit Offset */
N#define CS_DCOERCAL0_DCO_TCCAL_MASK              ((uint32_t)0x00000003)          /*!< DCO_TCCAL Bit Mask */
N/* CS_DCOERCAL0[DCO_FCAL_RSEL04] Bits */
N#define CS_DCOERCAL0_DCO_FCAL_RSEL04_OFS         (16)                            /*!< DCO_FCAL_RSEL04 Bit Offset */
N#define CS_DCOERCAL0_DCO_FCAL_RSEL04_MASK        ((uint32_t)0x03FF0000)          /*!< DCO_FCAL_RSEL04 Bit Mask */
N/* CS_DCOERCAL1[DCO_FCAL_RSEL5] Bits */
N#define CS_DCOERCAL1_DCO_FCAL_RSEL5_OFS          ( 0)                            /*!< DCO_FCAL_RSEL5 Bit Offset */
N#define CS_DCOERCAL1_DCO_FCAL_RSEL5_MASK         ((uint32_t)0x000003FF)          /*!< DCO_FCAL_RSEL5 Bit Mask */
N/* Pre-defined bitfield values */
N#define CS_KEY_VAL                               ((uint32_t)0x0000695A)          /*!< CS control key value */
N
N/******************************************************************************
N* DIO Bits
N******************************************************************************/
N/* DIO_IV[IV] Bits */
N#define DIO_PORT_IV_OFS                          ( 0)                            /*!< DIO Port IV Bit Offset */
N#define DIO_PORT_IV_MASK                         ((uint16_t)0x001F)              /*!< DIO Port IV Bit Mask */
N#define DIO_PORT_IV0                             ((uint16_t)0x0001)              /*!< DIO Port IV Bit 0 */
N#define DIO_PORT_IV1                             ((uint16_t)0x0002)              /*!< DIO Port IV Bit 1 */
N#define DIO_PORT_IV2                             ((uint16_t)0x0004)              /*!< DIO Port IV Bit 2 */
N#define DIO_PORT_IV3                             ((uint16_t)0x0008)              /*!< DIO Port IV Bit 3 */
N#define DIO_PORT_IV4                             ((uint16_t)0x0010)              /*!< DIO Port IV Bit 4 */
N#define DIO_PORT_IV_0                            ((uint16_t)0x0000)              /*!< No interrupt pending */
N#define DIO_PORT_IV_2                            ((uint16_t)0x0002)              /*!< Interrupt Source: Port x.0 interrupt; Interrupt Flag: IFG0; Interrupt  */
N                                                                                 /* Priority: Highest */
N#define DIO_PORT_IV_4                            ((uint16_t)0x0004)              /*!< Interrupt Source: Port x.1 interrupt; Interrupt Flag: IFG1 */
N#define DIO_PORT_IV_6                            ((uint16_t)0x0006)              /*!< Interrupt Source: Port x.2 interrupt; Interrupt Flag: IFG2 */
N#define DIO_PORT_IV_8                            ((uint16_t)0x0008)              /*!< Interrupt Source: Port x.3 interrupt; Interrupt Flag: IFG3 */
N#define DIO_PORT_IV_10                           ((uint16_t)0x000A)              /*!< Interrupt Source: Port x.4 interrupt; Interrupt Flag: IFG4 */
N#define DIO_PORT_IV_12                           ((uint16_t)0x000C)              /*!< Interrupt Source: Port x.5 interrupt; Interrupt Flag: IFG5 */
N#define DIO_PORT_IV_14                           ((uint16_t)0x000E)              /*!< Interrupt Source: Port x.6 interrupt; Interrupt Flag: IFG6 */
N#define DIO_PORT_IV_16                           ((uint16_t)0x0010)              /*!< Interrupt Source: Port x.7 interrupt; Interrupt Flag: IFG7; Interrupt  */
N                                                                                 /* Priority: Lowest */
N#define DIO_PORT_IV__NONE                        ((uint16_t)0x0000)              /*!< No interrupt pending */
N#define DIO_PORT_IV__IFG0                        ((uint16_t)0x0002)              /*!< Interrupt Source: Port x.0 interrupt; Interrupt Flag: IFG0; Interrupt  */
N                                                                                 /* Priority: Highest */
N#define DIO_PORT_IV__IFG1                        ((uint16_t)0x0004)              /*!< Interrupt Source: Port x.1 interrupt; Interrupt Flag: IFG1 */
N#define DIO_PORT_IV__IFG2                        ((uint16_t)0x0006)              /*!< Interrupt Source: Port x.2 interrupt; Interrupt Flag: IFG2 */
N#define DIO_PORT_IV__IFG3                        ((uint16_t)0x0008)              /*!< Interrupt Source: Port x.3 interrupt; Interrupt Flag: IFG3 */
N#define DIO_PORT_IV__IFG4                        ((uint16_t)0x000A)              /*!< Interrupt Source: Port x.4 interrupt; Interrupt Flag: IFG4 */
N#define DIO_PORT_IV__IFG5                        ((uint16_t)0x000C)              /*!< Interrupt Source: Port x.5 interrupt; Interrupt Flag: IFG5 */
N#define DIO_PORT_IV__IFG6                        ((uint16_t)0x000E)              /*!< Interrupt Source: Port x.6 interrupt; Interrupt Flag: IFG6 */
N#define DIO_PORT_IV__IFG7                        ((uint16_t)0x0010)              /*!< Interrupt Source: Port x.7 interrupt; Interrupt Flag: IFG7; Interrupt  */
N                                                                                 /* Priority: Lowest */
N
N
N/******************************************************************************
N* DMA Bits
N******************************************************************************/
N/* DMA_DEVICE_CFG[NUM_DMA_CHANNELS] Bits */
N#define DMA_DEVICE_CFG_NUM_DMA_CHANNELS_OFS      ( 0)                            /*!< NUM_DMA_CHANNELS Bit Offset */
N#define DMA_DEVICE_CFG_NUM_DMA_CHANNELS_MASK     ((uint32_t)0x000000FF)          /*!< NUM_DMA_CHANNELS Bit Mask */
N/* DMA_DEVICE_CFG[NUM_SRC_PER_CHANNEL] Bits */
N#define DMA_DEVICE_CFG_NUM_SRC_PER_CHANNEL_OFS   ( 8)                            /*!< NUM_SRC_PER_CHANNEL Bit Offset */
N#define DMA_DEVICE_CFG_NUM_SRC_PER_CHANNEL_MASK  ((uint32_t)0x0000FF00)          /*!< NUM_SRC_PER_CHANNEL Bit Mask */
N/* DMA_SW_CHTRIG[CH0] Bits */
N#define DMA_SW_CHTRIG_CH0_OFS                    ( 0)                            /*!< CH0 Bit Offset */
N#define DMA_SW_CHTRIG_CH0                        ((uint32_t)0x00000001)          /*!< Write 1, triggers DMA_CHANNEL0 */
N/* DMA_SW_CHTRIG[CH1] Bits */
N#define DMA_SW_CHTRIG_CH1_OFS                    ( 1)                            /*!< CH1 Bit Offset */
N#define DMA_SW_CHTRIG_CH1                        ((uint32_t)0x00000002)          /*!< Write 1, triggers DMA_CHANNEL1 */
N/* DMA_SW_CHTRIG[CH2] Bits */
N#define DMA_SW_CHTRIG_CH2_OFS                    ( 2)                            /*!< CH2 Bit Offset */
N#define DMA_SW_CHTRIG_CH2                        ((uint32_t)0x00000004)          /*!< Write 1, triggers DMA_CHANNEL2 */
N/* DMA_SW_CHTRIG[CH3] Bits */
N#define DMA_SW_CHTRIG_CH3_OFS                    ( 3)                            /*!< CH3 Bit Offset */
N#define DMA_SW_CHTRIG_CH3                        ((uint32_t)0x00000008)          /*!< Write 1, triggers DMA_CHANNEL3 */
N/* DMA_SW_CHTRIG[CH4] Bits */
N#define DMA_SW_CHTRIG_CH4_OFS                    ( 4)                            /*!< CH4 Bit Offset */
N#define DMA_SW_CHTRIG_CH4                        ((uint32_t)0x00000010)          /*!< Write 1, triggers DMA_CHANNEL4 */
N/* DMA_SW_CHTRIG[CH5] Bits */
N#define DMA_SW_CHTRIG_CH5_OFS                    ( 5)                            /*!< CH5 Bit Offset */
N#define DMA_SW_CHTRIG_CH5                        ((uint32_t)0x00000020)          /*!< Write 1, triggers DMA_CHANNEL5 */
N/* DMA_SW_CHTRIG[CH6] Bits */
N#define DMA_SW_CHTRIG_CH6_OFS                    ( 6)                            /*!< CH6 Bit Offset */
N#define DMA_SW_CHTRIG_CH6                        ((uint32_t)0x00000040)          /*!< Write 1, triggers DMA_CHANNEL6 */
N/* DMA_SW_CHTRIG[CH7] Bits */
N#define DMA_SW_CHTRIG_CH7_OFS                    ( 7)                            /*!< CH7 Bit Offset */
N#define DMA_SW_CHTRIG_CH7                        ((uint32_t)0x00000080)          /*!< Write 1, triggers DMA_CHANNEL7 */
N/* DMA_SW_CHTRIG[CH8] Bits */
N#define DMA_SW_CHTRIG_CH8_OFS                    ( 8)                            /*!< CH8 Bit Offset */
N#define DMA_SW_CHTRIG_CH8                        ((uint32_t)0x00000100)          /*!< Write 1, triggers DMA_CHANNEL8 */
N/* DMA_SW_CHTRIG[CH9] Bits */
N#define DMA_SW_CHTRIG_CH9_OFS                    ( 9)                            /*!< CH9 Bit Offset */
N#define DMA_SW_CHTRIG_CH9                        ((uint32_t)0x00000200)          /*!< Write 1, triggers DMA_CHANNEL9 */
N/* DMA_SW_CHTRIG[CH10] Bits */
N#define DMA_SW_CHTRIG_CH10_OFS                   (10)                            /*!< CH10 Bit Offset */
N#define DMA_SW_CHTRIG_CH10                       ((uint32_t)0x00000400)          /*!< Write 1, triggers DMA_CHANNEL10 */
N/* DMA_SW_CHTRIG[CH11] Bits */
N#define DMA_SW_CHTRIG_CH11_OFS                   (11)                            /*!< CH11 Bit Offset */
N#define DMA_SW_CHTRIG_CH11                       ((uint32_t)0x00000800)          /*!< Write 1, triggers DMA_CHANNEL11 */
N/* DMA_SW_CHTRIG[CH12] Bits */
N#define DMA_SW_CHTRIG_CH12_OFS                   (12)                            /*!< CH12 Bit Offset */
N#define DMA_SW_CHTRIG_CH12                       ((uint32_t)0x00001000)          /*!< Write 1, triggers DMA_CHANNEL12 */
N/* DMA_SW_CHTRIG[CH13] Bits */
N#define DMA_SW_CHTRIG_CH13_OFS                   (13)                            /*!< CH13 Bit Offset */
N#define DMA_SW_CHTRIG_CH13                       ((uint32_t)0x00002000)          /*!< Write 1, triggers DMA_CHANNEL13 */
N/* DMA_SW_CHTRIG[CH14] Bits */
N#define DMA_SW_CHTRIG_CH14_OFS                   (14)                            /*!< CH14 Bit Offset */
N#define DMA_SW_CHTRIG_CH14                       ((uint32_t)0x00004000)          /*!< Write 1, triggers DMA_CHANNEL14 */
N/* DMA_SW_CHTRIG[CH15] Bits */
N#define DMA_SW_CHTRIG_CH15_OFS                   (15)                            /*!< CH15 Bit Offset */
N#define DMA_SW_CHTRIG_CH15                       ((uint32_t)0x00008000)          /*!< Write 1, triggers DMA_CHANNEL15 */
N/* DMA_SW_CHTRIG[CH16] Bits */
N#define DMA_SW_CHTRIG_CH16_OFS                   (16)                            /*!< CH16 Bit Offset */
N#define DMA_SW_CHTRIG_CH16                       ((uint32_t)0x00010000)          /*!< Write 1, triggers DMA_CHANNEL16 */
N/* DMA_SW_CHTRIG[CH17] Bits */
N#define DMA_SW_CHTRIG_CH17_OFS                   (17)                            /*!< CH17 Bit Offset */
N#define DMA_SW_CHTRIG_CH17                       ((uint32_t)0x00020000)          /*!< Write 1, triggers DMA_CHANNEL17 */
N/* DMA_SW_CHTRIG[CH18] Bits */
N#define DMA_SW_CHTRIG_CH18_OFS                   (18)                            /*!< CH18 Bit Offset */
N#define DMA_SW_CHTRIG_CH18                       ((uint32_t)0x00040000)          /*!< Write 1, triggers DMA_CHANNEL18 */
N/* DMA_SW_CHTRIG[CH19] Bits */
N#define DMA_SW_CHTRIG_CH19_OFS                   (19)                            /*!< CH19 Bit Offset */
N#define DMA_SW_CHTRIG_CH19                       ((uint32_t)0x00080000)          /*!< Write 1, triggers DMA_CHANNEL19 */
N/* DMA_SW_CHTRIG[CH20] Bits */
N#define DMA_SW_CHTRIG_CH20_OFS                   (20)                            /*!< CH20 Bit Offset */
N#define DMA_SW_CHTRIG_CH20                       ((uint32_t)0x00100000)          /*!< Write 1, triggers DMA_CHANNEL20 */
N/* DMA_SW_CHTRIG[CH21] Bits */
N#define DMA_SW_CHTRIG_CH21_OFS                   (21)                            /*!< CH21 Bit Offset */
N#define DMA_SW_CHTRIG_CH21                       ((uint32_t)0x00200000)          /*!< Write 1, triggers DMA_CHANNEL21 */
N/* DMA_SW_CHTRIG[CH22] Bits */
N#define DMA_SW_CHTRIG_CH22_OFS                   (22)                            /*!< CH22 Bit Offset */
N#define DMA_SW_CHTRIG_CH22                       ((uint32_t)0x00400000)          /*!< Write 1, triggers DMA_CHANNEL22 */
N/* DMA_SW_CHTRIG[CH23] Bits */
N#define DMA_SW_CHTRIG_CH23_OFS                   (23)                            /*!< CH23 Bit Offset */
N#define DMA_SW_CHTRIG_CH23                       ((uint32_t)0x00800000)          /*!< Write 1, triggers DMA_CHANNEL23 */
N/* DMA_SW_CHTRIG[CH24] Bits */
N#define DMA_SW_CHTRIG_CH24_OFS                   (24)                            /*!< CH24 Bit Offset */
N#define DMA_SW_CHTRIG_CH24                       ((uint32_t)0x01000000)          /*!< Write 1, triggers DMA_CHANNEL24 */
N/* DMA_SW_CHTRIG[CH25] Bits */
N#define DMA_SW_CHTRIG_CH25_OFS                   (25)                            /*!< CH25 Bit Offset */
N#define DMA_SW_CHTRIG_CH25                       ((uint32_t)0x02000000)          /*!< Write 1, triggers DMA_CHANNEL25 */
N/* DMA_SW_CHTRIG[CH26] Bits */
N#define DMA_SW_CHTRIG_CH26_OFS                   (26)                            /*!< CH26 Bit Offset */
N#define DMA_SW_CHTRIG_CH26                       ((uint32_t)0x04000000)          /*!< Write 1, triggers DMA_CHANNEL26 */
N/* DMA_SW_CHTRIG[CH27] Bits */
N#define DMA_SW_CHTRIG_CH27_OFS                   (27)                            /*!< CH27 Bit Offset */
N#define DMA_SW_CHTRIG_CH27                       ((uint32_t)0x08000000)          /*!< Write 1, triggers DMA_CHANNEL27 */
N/* DMA_SW_CHTRIG[CH28] Bits */
N#define DMA_SW_CHTRIG_CH28_OFS                   (28)                            /*!< CH28 Bit Offset */
N#define DMA_SW_CHTRIG_CH28                       ((uint32_t)0x10000000)          /*!< Write 1, triggers DMA_CHANNEL28 */
N/* DMA_SW_CHTRIG[CH29] Bits */
N#define DMA_SW_CHTRIG_CH29_OFS                   (29)                            /*!< CH29 Bit Offset */
N#define DMA_SW_CHTRIG_CH29                       ((uint32_t)0x20000000)          /*!< Write 1, triggers DMA_CHANNEL29 */
N/* DMA_SW_CHTRIG[CH30] Bits */
N#define DMA_SW_CHTRIG_CH30_OFS                   (30)                            /*!< CH30 Bit Offset */
N#define DMA_SW_CHTRIG_CH30                       ((uint32_t)0x40000000)          /*!< Write 1, triggers DMA_CHANNEL30 */
N/* DMA_SW_CHTRIG[CH31] Bits */
N#define DMA_SW_CHTRIG_CH31_OFS                   (31)                            /*!< CH31 Bit Offset */
N#define DMA_SW_CHTRIG_CH31                       ((uint32_t)0x80000000)          /*!< Write 1, triggers DMA_CHANNEL31 */
N/* DMA_CHN_SRCCFG[DMA_SRC] Bits */
N#define DMA_CHN_SRCCFG_DMA_SRC_OFS               ( 0)                            /*!< DMA_SRC Bit Offset */
N#define DMA_CHN_SRCCFG_DMA_SRC_MASK              ((uint32_t)0x000000FF)          /*!< DMA_SRC Bit Mask */
N/* DMA_INT1_SRCCFG[INT_SRC] Bits */
N#define DMA_INT1_SRCCFG_INT_SRC_OFS              ( 0)                            /*!< INT_SRC Bit Offset */
N#define DMA_INT1_SRCCFG_INT_SRC_MASK             ((uint32_t)0x0000001F)          /*!< INT_SRC Bit Mask */
N/* DMA_INT1_SRCCFG[EN] Bits */
N#define DMA_INT1_SRCCFG_EN_OFS                   ( 5)                            /*!< EN Bit Offset */
N#define DMA_INT1_SRCCFG_EN                       ((uint32_t)0x00000020)          /*!< Enables DMA_INT1 mapping */
N/* DMA_INT2_SRCCFG[INT_SRC] Bits */
N#define DMA_INT2_SRCCFG_INT_SRC_OFS              ( 0)                            /*!< INT_SRC Bit Offset */
N#define DMA_INT2_SRCCFG_INT_SRC_MASK             ((uint32_t)0x0000001F)          /*!< INT_SRC Bit Mask */
N/* DMA_INT2_SRCCFG[EN] Bits */
N#define DMA_INT2_SRCCFG_EN_OFS                   ( 5)                            /*!< EN Bit Offset */
N#define DMA_INT2_SRCCFG_EN                       ((uint32_t)0x00000020)          /*!< Enables DMA_INT2 mapping */
N/* DMA_INT3_SRCCFG[INT_SRC] Bits */
N#define DMA_INT3_SRCCFG_INT_SRC_OFS              ( 0)                            /*!< INT_SRC Bit Offset */
N#define DMA_INT3_SRCCFG_INT_SRC_MASK             ((uint32_t)0x0000001F)          /*!< INT_SRC Bit Mask */
N/* DMA_INT3_SRCCFG[EN] Bits */
N#define DMA_INT3_SRCCFG_EN_OFS                   ( 5)                            /*!< EN Bit Offset */
N#define DMA_INT3_SRCCFG_EN                       ((uint32_t)0x00000020)          /*!< Enables DMA_INT3 mapping */
N/* DMA_INT0_SRCFLG[CH0] Bits */
N#define DMA_INT0_SRCFLG_CH0_OFS                  ( 0)                            /*!< CH0 Bit Offset */
N#define DMA_INT0_SRCFLG_CH0                      ((uint32_t)0x00000001)          /*!< Channel 0 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH1] Bits */
N#define DMA_INT0_SRCFLG_CH1_OFS                  ( 1)                            /*!< CH1 Bit Offset */
N#define DMA_INT0_SRCFLG_CH1                      ((uint32_t)0x00000002)          /*!< Channel 1 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH2] Bits */
N#define DMA_INT0_SRCFLG_CH2_OFS                  ( 2)                            /*!< CH2 Bit Offset */
N#define DMA_INT0_SRCFLG_CH2                      ((uint32_t)0x00000004)          /*!< Channel 2 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH3] Bits */
N#define DMA_INT0_SRCFLG_CH3_OFS                  ( 3)                            /*!< CH3 Bit Offset */
N#define DMA_INT0_SRCFLG_CH3                      ((uint32_t)0x00000008)          /*!< Channel 3 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH4] Bits */
N#define DMA_INT0_SRCFLG_CH4_OFS                  ( 4)                            /*!< CH4 Bit Offset */
N#define DMA_INT0_SRCFLG_CH4                      ((uint32_t)0x00000010)          /*!< Channel 4 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH5] Bits */
N#define DMA_INT0_SRCFLG_CH5_OFS                  ( 5)                            /*!< CH5 Bit Offset */
N#define DMA_INT0_SRCFLG_CH5                      ((uint32_t)0x00000020)          /*!< Channel 5 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH6] Bits */
N#define DMA_INT0_SRCFLG_CH6_OFS                  ( 6)                            /*!< CH6 Bit Offset */
N#define DMA_INT0_SRCFLG_CH6                      ((uint32_t)0x00000040)          /*!< Channel 6 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH7] Bits */
N#define DMA_INT0_SRCFLG_CH7_OFS                  ( 7)                            /*!< CH7 Bit Offset */
N#define DMA_INT0_SRCFLG_CH7                      ((uint32_t)0x00000080)          /*!< Channel 7 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH8] Bits */
N#define DMA_INT0_SRCFLG_CH8_OFS                  ( 8)                            /*!< CH8 Bit Offset */
N#define DMA_INT0_SRCFLG_CH8                      ((uint32_t)0x00000100)          /*!< Channel 8 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH9] Bits */
N#define DMA_INT0_SRCFLG_CH9_OFS                  ( 9)                            /*!< CH9 Bit Offset */
N#define DMA_INT0_SRCFLG_CH9                      ((uint32_t)0x00000200)          /*!< Channel 9 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH10] Bits */
N#define DMA_INT0_SRCFLG_CH10_OFS                 (10)                            /*!< CH10 Bit Offset */
N#define DMA_INT0_SRCFLG_CH10                     ((uint32_t)0x00000400)          /*!< Channel 10 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH11] Bits */
N#define DMA_INT0_SRCFLG_CH11_OFS                 (11)                            /*!< CH11 Bit Offset */
N#define DMA_INT0_SRCFLG_CH11                     ((uint32_t)0x00000800)          /*!< Channel 11 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH12] Bits */
N#define DMA_INT0_SRCFLG_CH12_OFS                 (12)                            /*!< CH12 Bit Offset */
N#define DMA_INT0_SRCFLG_CH12                     ((uint32_t)0x00001000)          /*!< Channel 12 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH13] Bits */
N#define DMA_INT0_SRCFLG_CH13_OFS                 (13)                            /*!< CH13 Bit Offset */
N#define DMA_INT0_SRCFLG_CH13                     ((uint32_t)0x00002000)          /*!< Channel 13 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH14] Bits */
N#define DMA_INT0_SRCFLG_CH14_OFS                 (14)                            /*!< CH14 Bit Offset */
N#define DMA_INT0_SRCFLG_CH14                     ((uint32_t)0x00004000)          /*!< Channel 14 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH15] Bits */
N#define DMA_INT0_SRCFLG_CH15_OFS                 (15)                            /*!< CH15 Bit Offset */
N#define DMA_INT0_SRCFLG_CH15                     ((uint32_t)0x00008000)          /*!< Channel 15 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH16] Bits */
N#define DMA_INT0_SRCFLG_CH16_OFS                 (16)                            /*!< CH16 Bit Offset */
N#define DMA_INT0_SRCFLG_CH16                     ((uint32_t)0x00010000)          /*!< Channel 16 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH17] Bits */
N#define DMA_INT0_SRCFLG_CH17_OFS                 (17)                            /*!< CH17 Bit Offset */
N#define DMA_INT0_SRCFLG_CH17                     ((uint32_t)0x00020000)          /*!< Channel 17 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH18] Bits */
N#define DMA_INT0_SRCFLG_CH18_OFS                 (18)                            /*!< CH18 Bit Offset */
N#define DMA_INT0_SRCFLG_CH18                     ((uint32_t)0x00040000)          /*!< Channel 18 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH19] Bits */
N#define DMA_INT0_SRCFLG_CH19_OFS                 (19)                            /*!< CH19 Bit Offset */
N#define DMA_INT0_SRCFLG_CH19                     ((uint32_t)0x00080000)          /*!< Channel 19 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH20] Bits */
N#define DMA_INT0_SRCFLG_CH20_OFS                 (20)                            /*!< CH20 Bit Offset */
N#define DMA_INT0_SRCFLG_CH20                     ((uint32_t)0x00100000)          /*!< Channel 20 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH21] Bits */
N#define DMA_INT0_SRCFLG_CH21_OFS                 (21)                            /*!< CH21 Bit Offset */
N#define DMA_INT0_SRCFLG_CH21                     ((uint32_t)0x00200000)          /*!< Channel 21 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH22] Bits */
N#define DMA_INT0_SRCFLG_CH22_OFS                 (22)                            /*!< CH22 Bit Offset */
N#define DMA_INT0_SRCFLG_CH22                     ((uint32_t)0x00400000)          /*!< Channel 22 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH23] Bits */
N#define DMA_INT0_SRCFLG_CH23_OFS                 (23)                            /*!< CH23 Bit Offset */
N#define DMA_INT0_SRCFLG_CH23                     ((uint32_t)0x00800000)          /*!< Channel 23 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH24] Bits */
N#define DMA_INT0_SRCFLG_CH24_OFS                 (24)                            /*!< CH24 Bit Offset */
N#define DMA_INT0_SRCFLG_CH24                     ((uint32_t)0x01000000)          /*!< Channel 24 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH25] Bits */
N#define DMA_INT0_SRCFLG_CH25_OFS                 (25)                            /*!< CH25 Bit Offset */
N#define DMA_INT0_SRCFLG_CH25                     ((uint32_t)0x02000000)          /*!< Channel 25 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH26] Bits */
N#define DMA_INT0_SRCFLG_CH26_OFS                 (26)                            /*!< CH26 Bit Offset */
N#define DMA_INT0_SRCFLG_CH26                     ((uint32_t)0x04000000)          /*!< Channel 26 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH27] Bits */
N#define DMA_INT0_SRCFLG_CH27_OFS                 (27)                            /*!< CH27 Bit Offset */
N#define DMA_INT0_SRCFLG_CH27                     ((uint32_t)0x08000000)          /*!< Channel 27 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH28] Bits */
N#define DMA_INT0_SRCFLG_CH28_OFS                 (28)                            /*!< CH28 Bit Offset */
N#define DMA_INT0_SRCFLG_CH28                     ((uint32_t)0x10000000)          /*!< Channel 28 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH29] Bits */
N#define DMA_INT0_SRCFLG_CH29_OFS                 (29)                            /*!< CH29 Bit Offset */
N#define DMA_INT0_SRCFLG_CH29                     ((uint32_t)0x20000000)          /*!< Channel 29 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH30] Bits */
N#define DMA_INT0_SRCFLG_CH30_OFS                 (30)                            /*!< CH30 Bit Offset */
N#define DMA_INT0_SRCFLG_CH30                     ((uint32_t)0x40000000)          /*!< Channel 30 was the source of DMA_INT0 */
N/* DMA_INT0_SRCFLG[CH31] Bits */
N#define DMA_INT0_SRCFLG_CH31_OFS                 (31)                            /*!< CH31 Bit Offset */
N#define DMA_INT0_SRCFLG_CH31                     ((uint32_t)0x80000000)          /*!< Channel 31 was the source of DMA_INT0 */
N/* DMA_INT0_CLRFLG[CH0] Bits */
N#define DMA_INT0_CLRFLG_CH0_OFS                  ( 0)                            /*!< CH0 Bit Offset */
N#define DMA_INT0_CLRFLG_CH0                      ((uint32_t)0x00000001)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH1] Bits */
N#define DMA_INT0_CLRFLG_CH1_OFS                  ( 1)                            /*!< CH1 Bit Offset */
N#define DMA_INT0_CLRFLG_CH1                      ((uint32_t)0x00000002)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH2] Bits */
N#define DMA_INT0_CLRFLG_CH2_OFS                  ( 2)                            /*!< CH2 Bit Offset */
N#define DMA_INT0_CLRFLG_CH2                      ((uint32_t)0x00000004)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH3] Bits */
N#define DMA_INT0_CLRFLG_CH3_OFS                  ( 3)                            /*!< CH3 Bit Offset */
N#define DMA_INT0_CLRFLG_CH3                      ((uint32_t)0x00000008)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH4] Bits */
N#define DMA_INT0_CLRFLG_CH4_OFS                  ( 4)                            /*!< CH4 Bit Offset */
N#define DMA_INT0_CLRFLG_CH4                      ((uint32_t)0x00000010)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH5] Bits */
N#define DMA_INT0_CLRFLG_CH5_OFS                  ( 5)                            /*!< CH5 Bit Offset */
N#define DMA_INT0_CLRFLG_CH5                      ((uint32_t)0x00000020)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH6] Bits */
N#define DMA_INT0_CLRFLG_CH6_OFS                  ( 6)                            /*!< CH6 Bit Offset */
N#define DMA_INT0_CLRFLG_CH6                      ((uint32_t)0x00000040)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH7] Bits */
N#define DMA_INT0_CLRFLG_CH7_OFS                  ( 7)                            /*!< CH7 Bit Offset */
N#define DMA_INT0_CLRFLG_CH7                      ((uint32_t)0x00000080)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH8] Bits */
N#define DMA_INT0_CLRFLG_CH8_OFS                  ( 8)                            /*!< CH8 Bit Offset */
N#define DMA_INT0_CLRFLG_CH8                      ((uint32_t)0x00000100)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH9] Bits */
N#define DMA_INT0_CLRFLG_CH9_OFS                  ( 9)                            /*!< CH9 Bit Offset */
N#define DMA_INT0_CLRFLG_CH9                      ((uint32_t)0x00000200)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH10] Bits */
N#define DMA_INT0_CLRFLG_CH10_OFS                 (10)                            /*!< CH10 Bit Offset */
N#define DMA_INT0_CLRFLG_CH10                     ((uint32_t)0x00000400)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH11] Bits */
N#define DMA_INT0_CLRFLG_CH11_OFS                 (11)                            /*!< CH11 Bit Offset */
N#define DMA_INT0_CLRFLG_CH11                     ((uint32_t)0x00000800)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH12] Bits */
N#define DMA_INT0_CLRFLG_CH12_OFS                 (12)                            /*!< CH12 Bit Offset */
N#define DMA_INT0_CLRFLG_CH12                     ((uint32_t)0x00001000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH13] Bits */
N#define DMA_INT0_CLRFLG_CH13_OFS                 (13)                            /*!< CH13 Bit Offset */
N#define DMA_INT0_CLRFLG_CH13                     ((uint32_t)0x00002000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH14] Bits */
N#define DMA_INT0_CLRFLG_CH14_OFS                 (14)                            /*!< CH14 Bit Offset */
N#define DMA_INT0_CLRFLG_CH14                     ((uint32_t)0x00004000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH15] Bits */
N#define DMA_INT0_CLRFLG_CH15_OFS                 (15)                            /*!< CH15 Bit Offset */
N#define DMA_INT0_CLRFLG_CH15                     ((uint32_t)0x00008000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH16] Bits */
N#define DMA_INT0_CLRFLG_CH16_OFS                 (16)                            /*!< CH16 Bit Offset */
N#define DMA_INT0_CLRFLG_CH16                     ((uint32_t)0x00010000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH17] Bits */
N#define DMA_INT0_CLRFLG_CH17_OFS                 (17)                            /*!< CH17 Bit Offset */
N#define DMA_INT0_CLRFLG_CH17                     ((uint32_t)0x00020000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH18] Bits */
N#define DMA_INT0_CLRFLG_CH18_OFS                 (18)                            /*!< CH18 Bit Offset */
N#define DMA_INT0_CLRFLG_CH18                     ((uint32_t)0x00040000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH19] Bits */
N#define DMA_INT0_CLRFLG_CH19_OFS                 (19)                            /*!< CH19 Bit Offset */
N#define DMA_INT0_CLRFLG_CH19                     ((uint32_t)0x00080000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH20] Bits */
N#define DMA_INT0_CLRFLG_CH20_OFS                 (20)                            /*!< CH20 Bit Offset */
N#define DMA_INT0_CLRFLG_CH20                     ((uint32_t)0x00100000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH21] Bits */
N#define DMA_INT0_CLRFLG_CH21_OFS                 (21)                            /*!< CH21 Bit Offset */
N#define DMA_INT0_CLRFLG_CH21                     ((uint32_t)0x00200000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH22] Bits */
N#define DMA_INT0_CLRFLG_CH22_OFS                 (22)                            /*!< CH22 Bit Offset */
N#define DMA_INT0_CLRFLG_CH22                     ((uint32_t)0x00400000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH23] Bits */
N#define DMA_INT0_CLRFLG_CH23_OFS                 (23)                            /*!< CH23 Bit Offset */
N#define DMA_INT0_CLRFLG_CH23                     ((uint32_t)0x00800000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH24] Bits */
N#define DMA_INT0_CLRFLG_CH24_OFS                 (24)                            /*!< CH24 Bit Offset */
N#define DMA_INT0_CLRFLG_CH24                     ((uint32_t)0x01000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH25] Bits */
N#define DMA_INT0_CLRFLG_CH25_OFS                 (25)                            /*!< CH25 Bit Offset */
N#define DMA_INT0_CLRFLG_CH25                     ((uint32_t)0x02000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH26] Bits */
N#define DMA_INT0_CLRFLG_CH26_OFS                 (26)                            /*!< CH26 Bit Offset */
N#define DMA_INT0_CLRFLG_CH26                     ((uint32_t)0x04000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH27] Bits */
N#define DMA_INT0_CLRFLG_CH27_OFS                 (27)                            /*!< CH27 Bit Offset */
N#define DMA_INT0_CLRFLG_CH27                     ((uint32_t)0x08000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH28] Bits */
N#define DMA_INT0_CLRFLG_CH28_OFS                 (28)                            /*!< CH28 Bit Offset */
N#define DMA_INT0_CLRFLG_CH28                     ((uint32_t)0x10000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH29] Bits */
N#define DMA_INT0_CLRFLG_CH29_OFS                 (29)                            /*!< CH29 Bit Offset */
N#define DMA_INT0_CLRFLG_CH29                     ((uint32_t)0x20000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH30] Bits */
N#define DMA_INT0_CLRFLG_CH30_OFS                 (30)                            /*!< CH30 Bit Offset */
N#define DMA_INT0_CLRFLG_CH30                     ((uint32_t)0x40000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_INT0_CLRFLG[CH31] Bits */
N#define DMA_INT0_CLRFLG_CH31_OFS                 (31)                            /*!< CH31 Bit Offset */
N#define DMA_INT0_CLRFLG_CH31                     ((uint32_t)0x80000000)          /*!< Clear corresponding DMA_INT0_SRCFLG_REG */
N/* DMA_STAT[MASTEN] Bits */
N#define DMA_STAT_MASTEN_OFS                      ( 0)                            /*!< MASTEN Bit Offset */
N#define DMA_STAT_MASTEN                          ((uint32_t)0x00000001)          
N/* DMA_STAT[STATE] Bits */
N#define DMA_STAT_STATE_OFS                       ( 4)                            /*!< STATE Bit Offset */
N#define DMA_STAT_STATE_MASK                      ((uint32_t)0x000000F0)          /*!< STATE Bit Mask */
N#define DMA_STAT_STATE0                          ((uint32_t)0x00000010)          /*!< STATE Bit 0 */
N#define DMA_STAT_STATE1                          ((uint32_t)0x00000020)          /*!< STATE Bit 1 */
N#define DMA_STAT_STATE2                          ((uint32_t)0x00000040)          /*!< STATE Bit 2 */
N#define DMA_STAT_STATE3                          ((uint32_t)0x00000080)          /*!< STATE Bit 3 */
N#define DMA_STAT_STATE_0                         ((uint32_t)0x00000000)          /*!< idle */
N#define DMA_STAT_STATE_1                         ((uint32_t)0x00000010)          /*!< reading channel controller data */
N#define DMA_STAT_STATE_2                         ((uint32_t)0x00000020)          /*!< reading source data end pointer */
N#define DMA_STAT_STATE_3                         ((uint32_t)0x00000030)          /*!< reading destination data end pointer */
N#define DMA_STAT_STATE_4                         ((uint32_t)0x00000040)          /*!< reading source data */
N#define DMA_STAT_STATE_5                         ((uint32_t)0x00000050)          /*!< writing destination data */
N#define DMA_STAT_STATE_6                         ((uint32_t)0x00000060)          /*!< waiting for DMA request to clear */
N#define DMA_STAT_STATE_7                         ((uint32_t)0x00000070)          /*!< writing channel controller data */
N#define DMA_STAT_STATE_8                         ((uint32_t)0x00000080)          /*!< stalled */
N#define DMA_STAT_STATE_9                         ((uint32_t)0x00000090)          /*!< done */
N#define DMA_STAT_STATE_10                        ((uint32_t)0x000000A0)          /*!< peripheral scatter-gather transition */
N#define DMA_STAT_STATE_11                        ((uint32_t)0x000000B0)          /*!< Reserved */
N#define DMA_STAT_STATE_12                        ((uint32_t)0x000000C0)          /*!< Reserved */
N#define DMA_STAT_STATE_13                        ((uint32_t)0x000000D0)          /*!< Reserved */
N#define DMA_STAT_STATE_14                        ((uint32_t)0x000000E0)          /*!< Reserved */
N#define DMA_STAT_STATE_15                        ((uint32_t)0x000000F0)          /*!< Reserved */
N/* DMA_STAT[DMACHANS] Bits */
N#define DMA_STAT_DMACHANS_OFS                    (16)                            /*!< DMACHANS Bit Offset */
N#define DMA_STAT_DMACHANS_MASK                   ((uint32_t)0x001F0000)          /*!< DMACHANS Bit Mask */
N#define DMA_STAT_DMACHANS0                       ((uint32_t)0x00010000)          /*!< DMACHANS Bit 0 */
N#define DMA_STAT_DMACHANS1                       ((uint32_t)0x00020000)          /*!< DMACHANS Bit 1 */
N#define DMA_STAT_DMACHANS2                       ((uint32_t)0x00040000)          /*!< DMACHANS Bit 2 */
N#define DMA_STAT_DMACHANS3                       ((uint32_t)0x00080000)          /*!< DMACHANS Bit 3 */
N#define DMA_STAT_DMACHANS4                       ((uint32_t)0x00100000)          /*!< DMACHANS Bit 4 */
N#define DMA_STAT_DMACHANS_0                      ((uint32_t)0x00000000)          /*!< Controller configured to use 1 DMA channel */
N#define DMA_STAT_DMACHANS_1                      ((uint32_t)0x00010000)          /*!< Controller configured to use 2 DMA channels */
N#define DMA_STAT_DMACHANS_30                     ((uint32_t)0x001E0000)          /*!< Controller configured to use 31 DMA channels */
N#define DMA_STAT_DMACHANS_31                     ((uint32_t)0x001F0000)          /*!< Controller configured to use 32 DMA channels */
N/* DMA_STAT[TESTSTAT] Bits */
N#define DMA_STAT_TESTSTAT_OFS                    (28)                            /*!< TESTSTAT Bit Offset */
N#define DMA_STAT_TESTSTAT_MASK                   ((uint32_t)0xF0000000)          /*!< TESTSTAT Bit Mask */
N#define DMA_STAT_TESTSTAT0                       ((uint32_t)0x10000000)          /*!< TESTSTAT Bit 0 */
N#define DMA_STAT_TESTSTAT1                       ((uint32_t)0x20000000)          /*!< TESTSTAT Bit 1 */
N#define DMA_STAT_TESTSTAT2                       ((uint32_t)0x40000000)          /*!< TESTSTAT Bit 2 */
N#define DMA_STAT_TESTSTAT3                       ((uint32_t)0x80000000)          /*!< TESTSTAT Bit 3 */
N#define DMA_STAT_TESTSTAT_0                      ((uint32_t)0x00000000)          /*!< Controller does not include the integration test logic */
N#define DMA_STAT_TESTSTAT_1                      ((uint32_t)0x10000000)          /*!< Controller includes the integration test logic */
N/* DMA_CFG[MASTEN] Bits */
N#define DMA_CFG_MASTEN_OFS                       ( 0)                            /*!< MASTEN Bit Offset */
N#define DMA_CFG_MASTEN                           ((uint32_t)0x00000001)          
N/* DMA_CFG[CHPROTCTRL] Bits */
N#define DMA_CFG_CHPROTCTRL_OFS                   ( 5)                            /*!< CHPROTCTRL Bit Offset */
N#define DMA_CFG_CHPROTCTRL_MASK                  ((uint32_t)0x000000E0)          /*!< CHPROTCTRL Bit Mask */
N/* DMA_CTLBASE[ADDR] Bits */
N#define DMA_CTLBASE_ADDR_OFS                     ( 5)                            /*!< ADDR Bit Offset */
N#define DMA_CTLBASE_ADDR_MASK                    ((uint32_t)0xFFFFFFE0)          /*!< ADDR Bit Mask */
N/* DMA_ERRCLR[ERRCLR] Bits */
N#define DMA_ERRCLR_ERRCLR_OFS                    ( 0)                            /*!< ERRCLR Bit Offset */
N#define DMA_ERRCLR_ERRCLR                        ((uint32_t)0x00000001)          
N/* DMA channel definitions and memory structure alignment */
N#define __MCU_NUM_DMA_CHANNELS__                8
N#define DMA_CHANNEL_CONTROL_STRUCT_SIZE         0x10
N#define DMA_CONTROL_MEMORY_ALIGNMENT            (__MCU_NUM_DMA_CHANNELS__ * DMA_CHANNEL_CONTROL_STRUCT_SIZE)
N
N/* UDMA_STAT Control Bits */
N#define UDMA_STAT_DMACHANS_M                    ((uint32_t)0x001F0000)           /*!< Available uDMA Channels Minus 1 */
N#define UDMA_STAT_STATE_M                       ((uint32_t)0x000000F0)           /*!< Control State Machine Status */
N#define UDMA_STAT_STATE_IDLE                    ((uint32_t)0x00000000)           /*!< Idle */
N#define UDMA_STAT_STATE_RD_CTRL                 ((uint32_t)0x00000010)           /*!< Reading channel controller data */
N#define UDMA_STAT_STATE_RD_SRCENDP              ((uint32_t)0x00000020)           /*!< Reading source end pointer */
N#define UDMA_STAT_STATE_RD_DSTENDP              ((uint32_t)0x00000030)           /*!< Reading destination end pointer */
N#define UDMA_STAT_STATE_RD_SRCDAT               ((uint32_t)0x00000040)           /*!< Reading source data */
N#define UDMA_STAT_STATE_WR_DSTDAT               ((uint32_t)0x00000050)           /*!< Writing destination data */
N#define UDMA_STAT_STATE_WAIT                    ((uint32_t)0x00000060)           /*!< Waiting for uDMA request to clear */
N#define UDMA_STAT_STATE_WR_CTRL                 ((uint32_t)0x00000070)           /*!< Writing channel controller data */
N#define UDMA_STAT_STATE_STALL                   ((uint32_t)0x00000080)           /*!< Stalled */
N#define UDMA_STAT_STATE_DONE                    ((uint32_t)0x00000090)           /*!< Done */
N#define UDMA_STAT_STATE_UNDEF                   ((uint32_t)0x000000A0)           /*!< Undefined */
N#define UDMA_STAT_MASTEN                        ((uint32_t)0x00000001)           /*!< Master Enable Status */
N#define UDMA_STAT_DMACHANS_S                    (16)
N
N/* UDMA_CFG Control Bits */
N#define UDMA_CFG_MASTEN                         ((uint32_t)0x00000001)           /*!< Controller Master Enable */
N
N/* UDMA_CTLBASE Control Bits */
N#define UDMA_CTLBASE_ADDR_M                     ((uint32_t)0xFFFFFC00)           /*!< Channel Control Base Address */
N#define UDMA_CTLBASE_ADDR_S                     (10)
N
N/* UDMA_ALTBASE Control Bits */
N#define UDMA_ALTBASE_ADDR_M                     ((uint32_t)0xFFFFFFFF)           /*!< Alternate Channel Address Pointer */
N#define UDMA_ALTBASE_ADDR_S                     ( 0)
N
N/* UDMA_WAITSTAT Control Bits */
N#define UDMA_WAITSTAT_WAITREQ_M                 ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Wait Status */
N
N/* UDMA_SWREQ Control Bits */
N#define UDMA_SWREQ_M                            ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Software Request */
N
N/* UDMA_USEBURSTSET Control Bits */
N#define UDMA_USEBURSTSET_SET_M                  ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Useburst Set */
N
N/* UDMA_USEBURSTCLR Control Bits */
N#define UDMA_USEBURSTCLR_CLR_M                  ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Useburst Clear */
N
N/* UDMA_REQMASKSET Control Bits */
N#define UDMA_REQMASKSET_SET_M                   ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Request Mask Set */
N
N/* UDMA_REQMASKCLR Control Bits */
N#define UDMA_REQMASKCLR_CLR_M                   ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Request Mask Clear */
N
N/* UDMA_ENASET Control Bits */
N#define UDMA_ENASET_SET_M                       ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Enable Set */
N
N/* UDMA_ENACLR Control Bits */
N#define UDMA_ENACLR_CLR_M                       ((uint32_t)0xFFFFFFFF)           /*!< Clear Channel [n] Enable Clear */
N
N/* UDMA_ALTSET Control Bits */
N#define UDMA_ALTSET_SET_M                       ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Alternate Set */
N
N/* UDMA_ALTCLR Control Bits */
N#define UDMA_ALTCLR_CLR_M                       ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Alternate Clear */
N
N/* UDMA_PRIOSET Control Bits */
N#define UDMA_PRIOSET_SET_M                      ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Priority Set */
N
N/* UDMA_PRIOCLR Control Bits */
N#define UDMA_PRIOCLR_CLR_M                      ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Priority Clear */
N
N/* UDMA_ERRCLR Control Bits */
N#define UDMA_ERRCLR_ERRCLR                      ((uint32_t)0x00000001)           /*!< uDMA Bus Error Status */
N
N/* UDMA_CHASGN Control Bits */
N#define UDMA_CHASGN_M                           ((uint32_t)0xFFFFFFFF)           /*!< Channel [n] Assignment Select */
N#define UDMA_CHASGN_PRIMARY                     ((uint32_t)0x00000000)           /*!< Use the primary channel assignment */
N#define UDMA_CHASGN_SECONDARY                   ((uint32_t)0x00000001)           /*!< Use the secondary channel assignment */
N
N/* Micro Direct Memory Access (uDMA) offsets */
N#define UDMA_O_SRCENDP                          ((uint32_t)0x00000000)           /*!< DMA Channel Source Address End Pointer */
N#define UDMA_O_DSTENDP                          ((uint32_t)0x00000004)           /*!< DMA Channel Destination Address End Pointer */
N#define UDMA_O_CHCTL                            ((uint32_t)0x00000008)           /*!< DMA Channel Control Word */
N
N/* UDMA_O_SRCENDP Control Bits */
N#define UDMA_SRCENDP_ADDR_M                     ((uint32_t)0xFFFFFFFF)           /*!< Source Address End Pointer */
N#define UDMA_SRCENDP_ADDR_S                     ( 0)
N
N/* UDMA_O_DSTENDP Control Bits */
N#define UDMA_DSTENDP_ADDR_M                     ((uint32_t)0xFFFFFFFF)           /*!< Destination Address End Pointer */
N#define UDMA_DSTENDP_ADDR_S                     ( 0)
N
N/* UDMA_O_CHCTL Control Bits */
N#define UDMA_CHCTL_DSTINC_M                     ((uint32_t)0xC0000000)           /*!< Destination Address Increment */
N#define UDMA_CHCTL_DSTINC_8                     ((uint32_t)0x00000000)           /*!< Byte */
N#define UDMA_CHCTL_DSTINC_16                    ((uint32_t)0x40000000)           /*!< Half-word */
N#define UDMA_CHCTL_DSTINC_32                    ((uint32_t)0x80000000)           /*!< Word */
N#define UDMA_CHCTL_DSTINC_NONE                  ((uint32_t)0xC0000000)           /*!< No increment */
N#define UDMA_CHCTL_DSTSIZE_M                    ((uint32_t)0x30000000)           /*!< Destination Data Size */
N#define UDMA_CHCTL_DSTSIZE_8                    ((uint32_t)0x00000000)           /*!< Byte */
N#define UDMA_CHCTL_DSTSIZE_16                   ((uint32_t)0x10000000)           /*!< Half-word */
N#define UDMA_CHCTL_DSTSIZE_32                   ((uint32_t)0x20000000)           /*!< Word */
N#define UDMA_CHCTL_SRCINC_M                     ((uint32_t)0x0C000000)           /*!< Source Address Increment */
N#define UDMA_CHCTL_SRCINC_8                     ((uint32_t)0x00000000)           /*!< Byte */
N#define UDMA_CHCTL_SRCINC_16                    ((uint32_t)0x04000000)           /*!< Half-word */
N#define UDMA_CHCTL_SRCINC_32                    ((uint32_t)0x08000000)           /*!< Word */
N#define UDMA_CHCTL_SRCINC_NONE                  ((uint32_t)0x0C000000)           /*!< No increment */
N#define UDMA_CHCTL_SRCSIZE_M                    ((uint32_t)0x03000000)           /*!< Source Data Size */
N#define UDMA_CHCTL_SRCSIZE_8                    ((uint32_t)0x00000000)           /*!< Byte */
N#define UDMA_CHCTL_SRCSIZE_16                   ((uint32_t)0x01000000)           /*!< Half-word */
N#define UDMA_CHCTL_SRCSIZE_32                   ((uint32_t)0x02000000)           /*!< Word */
N#define UDMA_CHCTL_ARBSIZE_M                    ((uint32_t)0x0003C000)           /*!< Arbitration Size */
N#define UDMA_CHCTL_ARBSIZE_1                    ((uint32_t)0x00000000)           /*!< 1 Transfer */
N#define UDMA_CHCTL_ARBSIZE_2                    ((uint32_t)0x00004000)           /*!< 2 Transfers */
N#define UDMA_CHCTL_ARBSIZE_4                    ((uint32_t)0x00008000)           /*!< 4 Transfers */
N#define UDMA_CHCTL_ARBSIZE_8                    ((uint32_t)0x0000C000)           /*!< 8 Transfers */
N#define UDMA_CHCTL_ARBSIZE_16                   ((uint32_t)0x00010000)           /*!< 16 Transfers */
N#define UDMA_CHCTL_ARBSIZE_32                   ((uint32_t)0x00014000)           /*!< 32 Transfers */
N#define UDMA_CHCTL_ARBSIZE_64                   ((uint32_t)0x00018000)           /*!< 64 Transfers */
N#define UDMA_CHCTL_ARBSIZE_128                  ((uint32_t)0x0001C000)           /*!< 128 Transfers */
N#define UDMA_CHCTL_ARBSIZE_256                  ((uint32_t)0x00020000)           /*!< 256 Transfers */
N#define UDMA_CHCTL_ARBSIZE_512                  ((uint32_t)0x00024000)           /*!< 512 Transfers */
N#define UDMA_CHCTL_ARBSIZE_1024                 ((uint32_t)0x00028000)           /*!< 1024 Transfers */
N#define UDMA_CHCTL_XFERSIZE_M                   ((uint32_t)0x00003FF0)           /*!< Transfer Size (minus 1) */
N#define UDMA_CHCTL_NXTUSEBURST                  ((uint32_t)0x00000008)           /*!< Next Useburst */
N#define UDMA_CHCTL_XFERMODE_M                   ((uint32_t)0x00000007)           /*!< uDMA Transfer Mode */
N#define UDMA_CHCTL_XFERMODE_STOP                ((uint32_t)0x00000000)           /*!< Stop */
N#define UDMA_CHCTL_XFERMODE_BASIC               ((uint32_t)0x00000001)           /*!< Basic */
N#define UDMA_CHCTL_XFERMODE_AUTO                ((uint32_t)0x00000002)           /*!< Auto-Request */
N#define UDMA_CHCTL_XFERMODE_PINGPONG            ((uint32_t)0x00000003)           /*!< Ping-Pong */
N#define UDMA_CHCTL_XFERMODE_MEM_SG              ((uint32_t)0x00000004)           /*!< Memory Scatter-Gather */
N#define UDMA_CHCTL_XFERMODE_MEM_SGA             ((uint32_t)0x00000005)           /*!< Alternate Memory Scatter-Gather */
N#define UDMA_CHCTL_XFERMODE_PER_SG              ((uint32_t)0x00000006)           /*!< Peripheral Scatter-Gather */
N#define UDMA_CHCTL_XFERMODE_PER_SGA             ((uint32_t)0x00000007)           /*!< Alternate Peripheral Scatter-Gather */
N
N#define UDMA_CHCTL_XFERSIZE_S                   ( 4)
N
N
N/******************************************************************************
N* DWT Bits
N******************************************************************************/
N
N
N/******************************************************************************
N* EUSCI_A Bits
N******************************************************************************/
N/* EUSCI_A_CTLW0[SWRST] Bits */
N#define EUSCI_A_CTLW0_SWRST_OFS                  ( 0)                            /*!< UCSWRST Bit Offset */
N#define EUSCI_A_CTLW0_SWRST                      ((uint16_t)0x0001)              /*!< Software reset enable */
N/* EUSCI_A_CTLW0[TXBRK] Bits */
N#define EUSCI_A_CTLW0_TXBRK_OFS                  ( 1)                            /*!< UCTXBRK Bit Offset */
N#define EUSCI_A_CTLW0_TXBRK                      ((uint16_t)0x0002)              /*!< Transmit break */
N/* EUSCI_A_CTLW0[TXADDR] Bits */
N#define EUSCI_A_CTLW0_TXADDR_OFS                 ( 2)                            /*!< UCTXADDR Bit Offset */
N#define EUSCI_A_CTLW0_TXADDR                     ((uint16_t)0x0004)              /*!< Transmit address */
N/* EUSCI_A_CTLW0[DORM] Bits */
N#define EUSCI_A_CTLW0_DORM_OFS                   ( 3)                            /*!< UCDORM Bit Offset */
N#define EUSCI_A_CTLW0_DORM                       ((uint16_t)0x0008)              /*!< Dormant */
N/* EUSCI_A_CTLW0[BRKIE] Bits */
N#define EUSCI_A_CTLW0_BRKIE_OFS                  ( 4)                            /*!< UCBRKIE Bit Offset */
N#define EUSCI_A_CTLW0_BRKIE                      ((uint16_t)0x0010)              /*!< Receive break character interrupt enable */
N/* EUSCI_A_CTLW0[RXEIE] Bits */
N#define EUSCI_A_CTLW0_RXEIE_OFS                  ( 5)                            /*!< UCRXEIE Bit Offset */
N#define EUSCI_A_CTLW0_RXEIE                      ((uint16_t)0x0020)              /*!< Receive erroneous-character interrupt enable */
N/* EUSCI_A_CTLW0[SSEL] Bits */
N#define EUSCI_A_CTLW0_SSEL_OFS                   ( 6)                            /*!< UCSSEL Bit Offset */
N#define EUSCI_A_CTLW0_SSEL_MASK                  ((uint16_t)0x00C0)              /*!< UCSSEL Bit Mask */
N#define EUSCI_A_CTLW0_SSEL0                      ((uint16_t)0x0040)              /*!< SSEL Bit 0 */
N#define EUSCI_A_CTLW0_SSEL1                      ((uint16_t)0x0080)              /*!< SSEL Bit 1 */
N#define EUSCI_A_CTLW0_UCSSEL_0                   ((uint16_t)0x0000)              /*!< UCLK */
N#define EUSCI_A_CTLW0_UCSSEL_1                   ((uint16_t)0x0040)              /*!< ACLK */
N#define EUSCI_A_CTLW0_UCSSEL_2                   ((uint16_t)0x0080)              /*!< SMCLK */
N#define EUSCI_A_CTLW0_SSEL__UCLK                 ((uint16_t)0x0000)              /*!< UCLK */
N#define EUSCI_A_CTLW0_SSEL__ACLK                 ((uint16_t)0x0040)              /*!< ACLK */
N#define EUSCI_A_CTLW0_SSEL__SMCLK                ((uint16_t)0x0080)              /*!< SMCLK */
N/* EUSCI_A_CTLW0[SYNC] Bits */
N#define EUSCI_A_CTLW0_SYNC_OFS                   ( 8)                            /*!< UCSYNC Bit Offset */
N#define EUSCI_A_CTLW0_SYNC                       ((uint16_t)0x0100)              /*!< Synchronous mode enable */
N/* EUSCI_A_CTLW0[MODE] Bits */
N#define EUSCI_A_CTLW0_MODE_OFS                   ( 9)                            /*!< UCMODE Bit Offset */
N#define EUSCI_A_CTLW0_MODE_MASK                  ((uint16_t)0x0600)              /*!< UCMODE Bit Mask */
N#define EUSCI_A_CTLW0_MODE0                      ((uint16_t)0x0200)              /*!< MODE Bit 0 */
N#define EUSCI_A_CTLW0_MODE1                      ((uint16_t)0x0400)              /*!< MODE Bit 1 */
N#define EUSCI_A_CTLW0_MODE_0                     ((uint16_t)0x0000)              /*!< UART mode */
N#define EUSCI_A_CTLW0_MODE_1                     ((uint16_t)0x0200)              /*!< Idle-line multiprocessor mode */
N#define EUSCI_A_CTLW0_MODE_2                     ((uint16_t)0x0400)              /*!< Address-bit multiprocessor mode */
N#define EUSCI_A_CTLW0_MODE_3                     ((uint16_t)0x0600)              /*!< UART mode with automatic baud-rate detection */
N/* EUSCI_A_CTLW0[SPB] Bits */
N#define EUSCI_A_CTLW0_SPB_OFS                    (11)                            /*!< UCSPB Bit Offset */
N#define EUSCI_A_CTLW0_SPB                        ((uint16_t)0x0800)              /*!< Stop bit select */
N/* EUSCI_A_CTLW0[SEVENBIT] Bits */
N#define EUSCI_A_CTLW0_SEVENBIT_OFS               (12)                            /*!< UC7BIT Bit Offset */
N#define EUSCI_A_CTLW0_SEVENBIT                   ((uint16_t)0x1000)              /*!< Character length */
N/* EUSCI_A_CTLW0[MSB] Bits */
N#define EUSCI_A_CTLW0_MSB_OFS                    (13)                            /*!< UCMSB Bit Offset */
N#define EUSCI_A_CTLW0_MSB                        ((uint16_t)0x2000)              /*!< MSB first select */
N/* EUSCI_A_CTLW0[PAR] Bits */
N#define EUSCI_A_CTLW0_PAR_OFS                    (14)                            /*!< UCPAR Bit Offset */
N#define EUSCI_A_CTLW0_PAR                        ((uint16_t)0x4000)              /*!< Parity select */
N/* EUSCI_A_CTLW0[PEN] Bits */
N#define EUSCI_A_CTLW0_PEN_OFS                    (15)                            /*!< UCPEN Bit Offset */
N#define EUSCI_A_CTLW0_PEN                        ((uint16_t)0x8000)              /*!< Parity enable */
N/* EUSCI_A_CTLW0[STEM] Bits */
N#define EUSCI_A_CTLW0_STEM_OFS                   ( 1)                            /*!< UCSTEM Bit Offset */
N#define EUSCI_A_CTLW0_STEM                       ((uint16_t)0x0002)              /*!< STE mode select in master mode. */
N/* EUSCI_A_CTLW0[MST] Bits */
N#define EUSCI_A_CTLW0_MST_OFS                    (11)                            /*!< UCMST Bit Offset */
N#define EUSCI_A_CTLW0_MST                        ((uint16_t)0x0800)              /*!< Master mode select */
N/* EUSCI_A_CTLW0[CKPL] Bits */
N#define EUSCI_A_CTLW0_CKPL_OFS                   (14)                            /*!< UCCKPL Bit Offset */
N#define EUSCI_A_CTLW0_CKPL                       ((uint16_t)0x4000)              /*!< Clock polarity select */
N/* EUSCI_A_CTLW0[CKPH] Bits */
N#define EUSCI_A_CTLW0_CKPH_OFS                   (15)                            /*!< UCCKPH Bit Offset */
N#define EUSCI_A_CTLW0_CKPH                       ((uint16_t)0x8000)              /*!< Clock phase select */
N/* EUSCI_A_CTLW1[GLIT] Bits */
N#define EUSCI_A_CTLW1_GLIT_OFS                   ( 0)                            /*!< UCGLIT Bit Offset */
N#define EUSCI_A_CTLW1_GLIT_MASK                  ((uint16_t)0x0003)              /*!< UCGLIT Bit Mask */
N#define EUSCI_A_CTLW1_GLIT0                      ((uint16_t)0x0001)              /*!< GLIT Bit 0 */
N#define EUSCI_A_CTLW1_GLIT1                      ((uint16_t)0x0002)              /*!< GLIT Bit 1 */
N#define EUSCI_A_CTLW1_GLIT_0                     ((uint16_t)0x0000)              /*!< Approximately 2 ns (equivalent of 1 delay element) */
N#define EUSCI_A_CTLW1_GLIT_1                     ((uint16_t)0x0001)              /*!< Approximately 50 ns */
N#define EUSCI_A_CTLW1_GLIT_2                     ((uint16_t)0x0002)              /*!< Approximately 100 ns */
N#define EUSCI_A_CTLW1_GLIT_3                     ((uint16_t)0x0003)              /*!< Approximately 200 ns */
N/* EUSCI_A_MCTLW[OS16] Bits */
N#define EUSCI_A_MCTLW_OS16_OFS                   ( 0)                            /*!< UCOS16 Bit Offset */
N#define EUSCI_A_MCTLW_OS16                       ((uint16_t)0x0001)              /*!< Oversampling mode enabled */
N/* EUSCI_A_MCTLW[BRF] Bits */
N#define EUSCI_A_MCTLW_BRF_OFS                    ( 4)                            /*!< UCBRF Bit Offset */
N#define EUSCI_A_MCTLW_BRF_MASK                   ((uint16_t)0x00F0)              /*!< UCBRF Bit Mask */
N/* EUSCI_A_MCTLW[BRS] Bits */
N#define EUSCI_A_MCTLW_BRS_OFS                    ( 8)                            /*!< UCBRS Bit Offset */
N#define EUSCI_A_MCTLW_BRS_MASK                   ((uint16_t)0xFF00)              /*!< UCBRS Bit Mask */
N/* EUSCI_A_STATW[BUSY] Bits */
N#define EUSCI_A_STATW_BUSY_OFS                   ( 0)                            /*!< UCBUSY Bit Offset */
N#define EUSCI_A_STATW_BUSY                       ((uint16_t)0x0001)              /*!< eUSCI_A busy */
N/* EUSCI_A_STATW[ADDR_IDLE] Bits */
N#define EUSCI_A_STATW_ADDR_IDLE_OFS              ( 1)                            /*!< UCADDR_UCIDLE Bit Offset */
N#define EUSCI_A_STATW_ADDR_IDLE                  ((uint16_t)0x0002)              /*!< Address received / Idle line detected */
N/* EUSCI_A_STATW[RXERR] Bits */
N#define EUSCI_A_STATW_RXERR_OFS                  ( 2)                            /*!< UCRXERR Bit Offset */
N#define EUSCI_A_STATW_RXERR                      ((uint16_t)0x0004)              /*!< Receive error flag */
N/* EUSCI_A_STATW[BRK] Bits */
N#define EUSCI_A_STATW_BRK_OFS                    ( 3)                            /*!< UCBRK Bit Offset */
N#define EUSCI_A_STATW_BRK                        ((uint16_t)0x0008)              /*!< Break detect flag */
N/* EUSCI_A_STATW[PE] Bits */
N#define EUSCI_A_STATW_PE_OFS                     ( 4)                            /*!< UCPE Bit Offset */
N#define EUSCI_A_STATW_PE                         ((uint16_t)0x0010)              
N/* EUSCI_A_STATW[OE] Bits */
N#define EUSCI_A_STATW_OE_OFS                     ( 5)                            /*!< UCOE Bit Offset */
N#define EUSCI_A_STATW_OE                         ((uint16_t)0x0020)              /*!< Overrun error flag */
N/* EUSCI_A_STATW[FE] Bits */
N#define EUSCI_A_STATW_FE_OFS                     ( 6)                            /*!< UCFE Bit Offset */
N#define EUSCI_A_STATW_FE                         ((uint16_t)0x0040)              /*!< Framing error flag */
N/* EUSCI_A_STATW[LISTEN] Bits */
N#define EUSCI_A_STATW_LISTEN_OFS                 ( 7)                            /*!< UCLISTEN Bit Offset */
N#define EUSCI_A_STATW_LISTEN                     ((uint16_t)0x0080)              /*!< Listen enable */
N/* EUSCI_A_STATW[SPI_BUSY] Bits */
N#define EUSCI_A_STATW_SPI_BUSY_OFS               ( 0)                            /*!< UCBUSY Bit Offset */
N#define EUSCI_A_STATW_SPI_BUSY                   ((uint16_t)0x0001)              /*!< eUSCI_A busy */
N/* EUSCI_A_RXBUF[RXBUF] Bits */
N#define EUSCI_A_RXBUF_RXBUF_OFS                  ( 0)                            /*!< UCRXBUF Bit Offset */
N#define EUSCI_A_RXBUF_RXBUF_MASK                 ((uint16_t)0x00FF)              /*!< UCRXBUF Bit Mask */
N/* EUSCI_A_TXBUF[TXBUF] Bits */
N#define EUSCI_A_TXBUF_TXBUF_OFS                  ( 0)                            /*!< UCTXBUF Bit Offset */
N#define EUSCI_A_TXBUF_TXBUF_MASK                 ((uint16_t)0x00FF)              /*!< UCTXBUF Bit Mask */
N/* EUSCI_A_ABCTL[ABDEN] Bits */
N#define EUSCI_A_ABCTL_ABDEN_OFS                  ( 0)                            /*!< UCABDEN Bit Offset */
N#define EUSCI_A_ABCTL_ABDEN                      ((uint16_t)0x0001)              /*!< Automatic baud-rate detect enable */
N/* EUSCI_A_ABCTL[BTOE] Bits */
N#define EUSCI_A_ABCTL_BTOE_OFS                   ( 2)                            /*!< UCBTOE Bit Offset */
N#define EUSCI_A_ABCTL_BTOE                       ((uint16_t)0x0004)              /*!< Break time out error */
N/* EUSCI_A_ABCTL[STOE] Bits */
N#define EUSCI_A_ABCTL_STOE_OFS                   ( 3)                            /*!< UCSTOE Bit Offset */
N#define EUSCI_A_ABCTL_STOE                       ((uint16_t)0x0008)              /*!< Synch field time out error */
N/* EUSCI_A_ABCTL[DELIM] Bits */
N#define EUSCI_A_ABCTL_DELIM_OFS                  ( 4)                            /*!< UCDELIM Bit Offset */
N#define EUSCI_A_ABCTL_DELIM_MASK                 ((uint16_t)0x0030)              /*!< UCDELIM Bit Mask */
N#define EUSCI_A_ABCTL_DELIM0                     ((uint16_t)0x0010)              /*!< DELIM Bit 0 */
N#define EUSCI_A_ABCTL_DELIM1                     ((uint16_t)0x0020)              /*!< DELIM Bit 1 */
N#define EUSCI_A_ABCTL_DELIM_0                    ((uint16_t)0x0000)              /*!< 1 bit time */
N#define EUSCI_A_ABCTL_DELIM_1                    ((uint16_t)0x0010)              /*!< 2 bit times */
N#define EUSCI_A_ABCTL_DELIM_2                    ((uint16_t)0x0020)              /*!< 3 bit times */
N#define EUSCI_A_ABCTL_DELIM_3                    ((uint16_t)0x0030)              /*!< 4 bit times */
N/* EUSCI_A_IRCTL[IREN] Bits */
N#define EUSCI_A_IRCTL_IREN_OFS                   ( 0)                            /*!< UCIREN Bit Offset */
N#define EUSCI_A_IRCTL_IREN                       ((uint16_t)0x0001)              /*!< IrDA encoder/decoder enable */
N/* EUSCI_A_IRCTL[IRTXCLK] Bits */
N#define EUSCI_A_IRCTL_IRTXCLK_OFS                ( 1)                            /*!< UCIRTXCLK Bit Offset */
N#define EUSCI_A_IRCTL_IRTXCLK                    ((uint16_t)0x0002)              /*!< IrDA transmit pulse clock select */
N/* EUSCI_A_IRCTL[IRTXPL] Bits */
N#define EUSCI_A_IRCTL_IRTXPL_OFS                 ( 2)                            /*!< UCIRTXPL Bit Offset */
N#define EUSCI_A_IRCTL_IRTXPL_MASK                ((uint16_t)0x00FC)              /*!< UCIRTXPL Bit Mask */
N/* EUSCI_A_IRCTL[IRRXFE] Bits */
N#define EUSCI_A_IRCTL_IRRXFE_OFS                 ( 8)                            /*!< UCIRRXFE Bit Offset */
N#define EUSCI_A_IRCTL_IRRXFE                     ((uint16_t)0x0100)              /*!< IrDA receive filter enabled */
N/* EUSCI_A_IRCTL[IRRXPL] Bits */
N#define EUSCI_A_IRCTL_IRRXPL_OFS                 ( 9)                            /*!< UCIRRXPL Bit Offset */
N#define EUSCI_A_IRCTL_IRRXPL                     ((uint16_t)0x0200)              /*!< IrDA receive input UCAxRXD polarity */
N/* EUSCI_A_IRCTL[IRRXFL] Bits */
N#define EUSCI_A_IRCTL_IRRXFL_OFS                 (10)                            /*!< UCIRRXFL Bit Offset */
N#define EUSCI_A_IRCTL_IRRXFL_MASK                ((uint16_t)0x3C00)              /*!< UCIRRXFL Bit Mask */
N/* EUSCI_A_IE[RXIE] Bits */
N#define EUSCI_A_IE_RXIE_OFS                      ( 0)                            /*!< UCRXIE Bit Offset */
N#define EUSCI_A_IE_RXIE                          ((uint16_t)0x0001)              /*!< Receive interrupt enable */
N/* EUSCI_A_IE[TXIE] Bits */
N#define EUSCI_A_IE_TXIE_OFS                      ( 1)                            /*!< UCTXIE Bit Offset */
N#define EUSCI_A_IE_TXIE                          ((uint16_t)0x0002)              /*!< Transmit interrupt enable */
N/* EUSCI_A_IE[STTIE] Bits */
N#define EUSCI_A_IE_STTIE_OFS                     ( 2)                            /*!< UCSTTIE Bit Offset */
N#define EUSCI_A_IE_STTIE                         ((uint16_t)0x0004)              /*!< Start bit interrupt enable */
N/* EUSCI_A_IE[TXCPTIE] Bits */
N#define EUSCI_A_IE_TXCPTIE_OFS                   ( 3)                            /*!< UCTXCPTIE Bit Offset */
N#define EUSCI_A_IE_TXCPTIE                       ((uint16_t)0x0008)              /*!< Transmit complete interrupt enable */
N/* EUSCI_A_IFG[RXIFG] Bits */
N#define EUSCI_A_IFG_RXIFG_OFS                    ( 0)                            /*!< UCRXIFG Bit Offset */
N#define EUSCI_A_IFG_RXIFG                        ((uint16_t)0x0001)              /*!< Receive interrupt flag */
N/* EUSCI_A_IFG[TXIFG] Bits */
N#define EUSCI_A_IFG_TXIFG_OFS                    ( 1)                            /*!< UCTXIFG Bit Offset */
N#define EUSCI_A_IFG_TXIFG                        ((uint16_t)0x0002)              /*!< Transmit interrupt flag */
N/* EUSCI_A_IFG[STTIFG] Bits */
N#define EUSCI_A_IFG_STTIFG_OFS                   ( 2)                            /*!< UCSTTIFG Bit Offset */
N#define EUSCI_A_IFG_STTIFG                       ((uint16_t)0x0004)              /*!< Start bit interrupt flag */
N/* EUSCI_A_IFG[TXCPTIFG] Bits */
N#define EUSCI_A_IFG_TXCPTIFG_OFS                 ( 3)                            /*!< UCTXCPTIFG Bit Offset */
N#define EUSCI_A_IFG_TXCPTIFG                     ((uint16_t)0x0008)              /*!< Transmit ready interrupt enable */
N/* legacy definitions for backward compatibility to version 2100 */
N#define EUSCI_A__RXIE_OFS                        EUSCI_A_IE_RXIE_OFS             /*!< UCRXIE Bit Offset */
N#define EUSCI_A__RXIE                            EUSCI_A_IE_RXIE                 /*!< Receive interrupt enable */
N#define EUSCI_A__TXIE_OFS                        EUSCI_A_IE_TXIE_OFS             /*!< UCTXIE Bit Offset */
N#define EUSCI_A__TXIE                            EUSCI_A_IE_TXIE                 /*!< Transmit interrupt enable */
N
N
N/******************************************************************************
N* EUSCI_B Bits
N******************************************************************************/
N/* EUSCI_B_CTLW0[SWRST] Bits */
N#define EUSCI_B_CTLW0_SWRST_OFS                  ( 0)                            /*!< UCSWRST Bit Offset */
N#define EUSCI_B_CTLW0_SWRST                      ((uint16_t)0x0001)              /*!< Software reset enable */
N/* EUSCI_B_CTLW0[TXSTT] Bits */
N#define EUSCI_B_CTLW0_TXSTT_OFS                  ( 1)                            /*!< UCTXSTT Bit Offset */
N#define EUSCI_B_CTLW0_TXSTT                      ((uint16_t)0x0002)              /*!< Transmit START condition in master mode */
N/* EUSCI_B_CTLW0[TXSTP] Bits */
N#define EUSCI_B_CTLW0_TXSTP_OFS                  ( 2)                            /*!< UCTXSTP Bit Offset */
N#define EUSCI_B_CTLW0_TXSTP                      ((uint16_t)0x0004)              /*!< Transmit STOP condition in master mode */
N/* EUSCI_B_CTLW0[TXNACK] Bits */
N#define EUSCI_B_CTLW0_TXNACK_OFS                 ( 3)                            /*!< UCTXNACK Bit Offset */
N#define EUSCI_B_CTLW0_TXNACK                     ((uint16_t)0x0008)              /*!< Transmit a NACK */
N/* EUSCI_B_CTLW0[TR] Bits */
N#define EUSCI_B_CTLW0_TR_OFS                     ( 4)                            /*!< UCTR Bit Offset */
N#define EUSCI_B_CTLW0_TR                         ((uint16_t)0x0010)              /*!< Transmitter/receiver */
N/* EUSCI_B_CTLW0[TXACK] Bits */
N#define EUSCI_B_CTLW0_TXACK_OFS                  ( 5)                            /*!< UCTXACK Bit Offset */
N#define EUSCI_B_CTLW0_TXACK                      ((uint16_t)0x0020)              /*!< Transmit ACK condition in slave mode */
N/* EUSCI_B_CTLW0[SSEL] Bits */
N#define EUSCI_B_CTLW0_SSEL_OFS                   ( 6)                            /*!< UCSSEL Bit Offset */
N#define EUSCI_B_CTLW0_SSEL_MASK                  ((uint16_t)0x00C0)              /*!< UCSSEL Bit Mask */
N#define EUSCI_B_CTLW0_SSEL0                      ((uint16_t)0x0040)              /*!< SSEL Bit 0 */
N#define EUSCI_B_CTLW0_SSEL1                      ((uint16_t)0x0080)              /*!< SSEL Bit 1 */
N#define EUSCI_B_CTLW0_UCSSEL_0                   ((uint16_t)0x0000)              /*!< UCLKI */
N#define EUSCI_B_CTLW0_UCSSEL_1                   ((uint16_t)0x0040)              /*!< ACLK */
N#define EUSCI_B_CTLW0_UCSSEL_2                   ((uint16_t)0x0080)              /*!< SMCLK */
N#define EUSCI_B_CTLW0_UCSSEL_3                   ((uint16_t)0x00C0)              /*!< SMCLK */
N#define EUSCI_B_CTLW0_SSEL__UCLKI                ((uint16_t)0x0000)              /*!< UCLKI */
N#define EUSCI_B_CTLW0_SSEL__ACLK                 ((uint16_t)0x0040)              /*!< ACLK */
N#define EUSCI_B_CTLW0_SSEL__SMCLK                ((uint16_t)0x0080)              /*!< SMCLK */
N/* EUSCI_B_CTLW0[SYNC] Bits */
N#define EUSCI_B_CTLW0_SYNC_OFS                   ( 8)                            /*!< UCSYNC Bit Offset */
N#define EUSCI_B_CTLW0_SYNC                       ((uint16_t)0x0100)              /*!< Synchronous mode enable */
N/* EUSCI_B_CTLW0[MODE] Bits */
N#define EUSCI_B_CTLW0_MODE_OFS                   ( 9)                            /*!< UCMODE Bit Offset */
N#define EUSCI_B_CTLW0_MODE_MASK                  ((uint16_t)0x0600)              /*!< UCMODE Bit Mask */
N#define EUSCI_B_CTLW0_MODE0                      ((uint16_t)0x0200)              /*!< MODE Bit 0 */
N#define EUSCI_B_CTLW0_MODE1                      ((uint16_t)0x0400)              /*!< MODE Bit 1 */
N#define EUSCI_B_CTLW0_MODE_0                     ((uint16_t)0x0000)              /*!< 3-pin SPI */
N#define EUSCI_B_CTLW0_MODE_1                     ((uint16_t)0x0200)              /*!< 4-pin SPI (master or slave enabled if STE = 1) */
N#define EUSCI_B_CTLW0_MODE_2                     ((uint16_t)0x0400)              /*!< 4-pin SPI (master or slave enabled if STE = 0) */
N#define EUSCI_B_CTLW0_MODE_3                     ((uint16_t)0x0600)              /*!< I2C mode */
N/* EUSCI_B_CTLW0[MST] Bits */
N#define EUSCI_B_CTLW0_MST_OFS                    (11)                            /*!< UCMST Bit Offset */
N#define EUSCI_B_CTLW0_MST                        ((uint16_t)0x0800)              /*!< Master mode select */
N/* EUSCI_B_CTLW0[MM] Bits */
N#define EUSCI_B_CTLW0_MM_OFS                     (13)                            /*!< UCMM Bit Offset */
N#define EUSCI_B_CTLW0_MM                         ((uint16_t)0x2000)              /*!< Multi-master environment select */
N/* EUSCI_B_CTLW0[SLA10] Bits */
N#define EUSCI_B_CTLW0_SLA10_OFS                  (14)                            /*!< UCSLA10 Bit Offset */
N#define EUSCI_B_CTLW0_SLA10                      ((uint16_t)0x4000)              /*!< Slave addressing mode select */
N/* EUSCI_B_CTLW0[A10] Bits */
N#define EUSCI_B_CTLW0_A10_OFS                    (15)                            /*!< UCA10 Bit Offset */
N#define EUSCI_B_CTLW0_A10                        ((uint16_t)0x8000)              /*!< Own addressing mode select */
N/* EUSCI_B_CTLW0[STEM] Bits */
N#define EUSCI_B_CTLW0_STEM_OFS                   ( 1)                            /*!< UCSTEM Bit Offset */
N#define EUSCI_B_CTLW0_STEM                       ((uint16_t)0x0002)              /*!< STE mode select in master mode. */
N/* EUSCI_B_CTLW0[SEVENBIT] Bits */
N#define EUSCI_B_CTLW0_SEVENBIT_OFS               (12)                            /*!< UC7BIT Bit Offset */
N#define EUSCI_B_CTLW0_SEVENBIT                   ((uint16_t)0x1000)              /*!< Character length */
N/* EUSCI_B_CTLW0[MSB] Bits */
N#define EUSCI_B_CTLW0_MSB_OFS                    (13)                            /*!< UCMSB Bit Offset */
N#define EUSCI_B_CTLW0_MSB                        ((uint16_t)0x2000)              /*!< MSB first select */
N/* EUSCI_B_CTLW0[CKPL] Bits */
N#define EUSCI_B_CTLW0_CKPL_OFS                   (14)                            /*!< UCCKPL Bit Offset */
N#define EUSCI_B_CTLW0_CKPL                       ((uint16_t)0x4000)              /*!< Clock polarity select */
N/* EUSCI_B_CTLW0[CKPH] Bits */
N#define EUSCI_B_CTLW0_CKPH_OFS                   (15)                            /*!< UCCKPH Bit Offset */
N#define EUSCI_B_CTLW0_CKPH                       ((uint16_t)0x8000)              /*!< Clock phase select */
N/* EUSCI_B_CTLW1[GLIT] Bits */
N#define EUSCI_B_CTLW1_GLIT_OFS                   ( 0)                            /*!< UCGLIT Bit Offset */
N#define EUSCI_B_CTLW1_GLIT_MASK                  ((uint16_t)0x0003)              /*!< UCGLIT Bit Mask */
N#define EUSCI_B_CTLW1_GLIT0                      ((uint16_t)0x0001)              /*!< GLIT Bit 0 */
N#define EUSCI_B_CTLW1_GLIT1                      ((uint16_t)0x0002)              /*!< GLIT Bit 1 */
N#define EUSCI_B_CTLW1_GLIT_0                     ((uint16_t)0x0000)              /*!< 50 ns */
N#define EUSCI_B_CTLW1_GLIT_1                     ((uint16_t)0x0001)              /*!< 25 ns */
N#define EUSCI_B_CTLW1_GLIT_2                     ((uint16_t)0x0002)              /*!< 12.5 ns */
N#define EUSCI_B_CTLW1_GLIT_3                     ((uint16_t)0x0003)              /*!< 6.25 ns */
N/* EUSCI_B_CTLW1[ASTP] Bits */
N#define EUSCI_B_CTLW1_ASTP_OFS                   ( 2)                            /*!< UCASTP Bit Offset */
N#define EUSCI_B_CTLW1_ASTP_MASK                  ((uint16_t)0x000C)              /*!< UCASTP Bit Mask */
N#define EUSCI_B_CTLW1_ASTP0                      ((uint16_t)0x0004)              /*!< ASTP Bit 0 */
N#define EUSCI_B_CTLW1_ASTP1                      ((uint16_t)0x0008)              /*!< ASTP Bit 1 */
N#define EUSCI_B_CTLW1_ASTP_0                     ((uint16_t)0x0000)              /*!< No automatic STOP generation. The STOP condition is generated after the user  */
N                                                                                 /* sets the UCTXSTP bit. The value in UCBxTBCNT is a don't care. */
N#define EUSCI_B_CTLW1_ASTP_1                     ((uint16_t)0x0004)              /*!< UCBCNTIFG is set with the byte counter reaches the threshold defined in  */
N                                                                                 /* UCBxTBCNT */
N#define EUSCI_B_CTLW1_ASTP_2                     ((uint16_t)0x0008)              /*!< A STOP condition is generated automatically after the byte counter value  */
N                                                                                 /* reached UCBxTBCNT. UCBCNTIFG is set with the byte counter reaching the */
N                                                                                 /* threshold */
N/* EUSCI_B_CTLW1[SWACK] Bits */
N#define EUSCI_B_CTLW1_SWACK_OFS                  ( 4)                            /*!< UCSWACK Bit Offset */
N#define EUSCI_B_CTLW1_SWACK                      ((uint16_t)0x0010)              /*!< SW or HW ACK control */
N/* EUSCI_B_CTLW1[STPNACK] Bits */
N#define EUSCI_B_CTLW1_STPNACK_OFS                ( 5)                            /*!< UCSTPNACK Bit Offset */
N#define EUSCI_B_CTLW1_STPNACK                    ((uint16_t)0x0020)              /*!< ACK all master bytes */
N/* EUSCI_B_CTLW1[CLTO] Bits */
N#define EUSCI_B_CTLW1_CLTO_OFS                   ( 6)                            /*!< UCCLTO Bit Offset */
N#define EUSCI_B_CTLW1_CLTO_MASK                  ((uint16_t)0x00C0)              /*!< UCCLTO Bit Mask */
N#define EUSCI_B_CTLW1_CLTO0                      ((uint16_t)0x0040)              /*!< CLTO Bit 0 */
N#define EUSCI_B_CTLW1_CLTO1                      ((uint16_t)0x0080)              /*!< CLTO Bit 1 */
N#define EUSCI_B_CTLW1_CLTO_0                     ((uint16_t)0x0000)              /*!< Disable clock low timeout counter */
N#define EUSCI_B_CTLW1_CLTO_1                     ((uint16_t)0x0040)              /*!< 135 000 SYSCLK cycles (approximately 28 ms) */
N#define EUSCI_B_CTLW1_CLTO_2                     ((uint16_t)0x0080)              /*!< 150 000 SYSCLK cycles (approximately 31 ms) */
N#define EUSCI_B_CTLW1_CLTO_3                     ((uint16_t)0x00C0)              /*!< 165 000 SYSCLK cycles (approximately 34 ms) */
N/* EUSCI_B_CTLW1[ETXINT] Bits */
N#define EUSCI_B_CTLW1_ETXINT_OFS                 ( 8)                            /*!< UCETXINT Bit Offset */
N#define EUSCI_B_CTLW1_ETXINT                     ((uint16_t)0x0100)              /*!< Early UCTXIFG0 */
N/* EUSCI_B_STATW[BBUSY] Bits */
N#define EUSCI_B_STATW_BBUSY_OFS                  ( 4)                            /*!< UCBBUSY Bit Offset */
N#define EUSCI_B_STATW_BBUSY                      ((uint16_t)0x0010)              /*!< Bus busy */
N/* EUSCI_B_STATW[GC] Bits */
N#define EUSCI_B_STATW_GC_OFS                     ( 5)                            /*!< UCGC Bit Offset */
N#define EUSCI_B_STATW_GC                         ((uint16_t)0x0020)              /*!< General call address received */
N/* EUSCI_B_STATW[SCLLOW] Bits */
N#define EUSCI_B_STATW_SCLLOW_OFS                 ( 6)                            /*!< UCSCLLOW Bit Offset */
N#define EUSCI_B_STATW_SCLLOW                     ((uint16_t)0x0040)              /*!< SCL low */
N/* EUSCI_B_STATW[BCNT] Bits */
N#define EUSCI_B_STATW_BCNT_OFS                   ( 8)                            /*!< UCBCNT Bit Offset */
N#define EUSCI_B_STATW_BCNT_MASK                  ((uint16_t)0xFF00)              /*!< UCBCNT Bit Mask */
N/* EUSCI_B_STATW[SPI_BUSY] Bits */
N#define EUSCI_B_STATW_SPI_BUSY_OFS               ( 0)                            /*!< UCBUSY Bit Offset */
N#define EUSCI_B_STATW_SPI_BUSY                   ((uint16_t)0x0001)              /*!< eUSCI_B busy */
N/* EUSCI_B_STATW[OE] Bits */
N#define EUSCI_B_STATW_OE_OFS                     ( 5)                            /*!< UCOE Bit Offset */
N#define EUSCI_B_STATW_OE                         ((uint16_t)0x0020)              /*!< Overrun error flag */
N/* EUSCI_B_STATW[FE] Bits */
N#define EUSCI_B_STATW_FE_OFS                     ( 6)                            /*!< UCFE Bit Offset */
N#define EUSCI_B_STATW_FE                         ((uint16_t)0x0040)              /*!< Framing error flag */
N/* EUSCI_B_STATW[LISTEN] Bits */
N#define EUSCI_B_STATW_LISTEN_OFS                 ( 7)                            /*!< UCLISTEN Bit Offset */
N#define EUSCI_B_STATW_LISTEN                     ((uint16_t)0x0080)              /*!< Listen enable */
N/* EUSCI_B_TBCNT[TBCNT] Bits */
N#define EUSCI_B_TBCNT_TBCNT_OFS                  ( 0)                            /*!< UCTBCNT Bit Offset */
N#define EUSCI_B_TBCNT_TBCNT_MASK                 ((uint16_t)0x00FF)              /*!< UCTBCNT Bit Mask */
N/* EUSCI_B_RXBUF[RXBUF] Bits */
N#define EUSCI_B_RXBUF_RXBUF_OFS                  ( 0)                            /*!< UCRXBUF Bit Offset */
N#define EUSCI_B_RXBUF_RXBUF_MASK                 ((uint16_t)0x00FF)              /*!< UCRXBUF Bit Mask */
N/* EUSCI_B_TXBUF[TXBUF] Bits */
N#define EUSCI_B_TXBUF_TXBUF_OFS                  ( 0)                            /*!< UCTXBUF Bit Offset */
N#define EUSCI_B_TXBUF_TXBUF_MASK                 ((uint16_t)0x00FF)              /*!< UCTXBUF Bit Mask */
N/* EUSCI_B_I2COA0[I2COA0] Bits */
N#define EUSCI_B_I2COA0_I2COA0_OFS                ( 0)                            /*!< I2COA0 Bit Offset */
N#define EUSCI_B_I2COA0_I2COA0_MASK               ((uint16_t)0x03FF)              /*!< I2COA0 Bit Mask */
N/* EUSCI_B_I2COA0[OAEN] Bits */
N#define EUSCI_B_I2COA0_OAEN_OFS                  (10)                            /*!< UCOAEN Bit Offset */
N#define EUSCI_B_I2COA0_OAEN                      ((uint16_t)0x0400)              /*!< Own Address enable register */
N/* EUSCI_B_I2COA0[GCEN] Bits */
N#define EUSCI_B_I2COA0_GCEN_OFS                  (15)                            /*!< UCGCEN Bit Offset */
N#define EUSCI_B_I2COA0_GCEN                      ((uint16_t)0x8000)              /*!< General call response enable */
N/* EUSCI_B_I2COA1[I2COA1] Bits */
N#define EUSCI_B_I2COA1_I2COA1_OFS                ( 0)                            /*!< I2COA1 Bit Offset */
N#define EUSCI_B_I2COA1_I2COA1_MASK               ((uint16_t)0x03FF)              /*!< I2COA1 Bit Mask */
N/* EUSCI_B_I2COA1[OAEN] Bits */
N#define EUSCI_B_I2COA1_OAEN_OFS                  (10)                            /*!< UCOAEN Bit Offset */
N#define EUSCI_B_I2COA1_OAEN                      ((uint16_t)0x0400)              /*!< Own Address enable register */
N/* EUSCI_B_I2COA2[I2COA2] Bits */
N#define EUSCI_B_I2COA2_I2COA2_OFS                ( 0)                            /*!< I2COA2 Bit Offset */
N#define EUSCI_B_I2COA2_I2COA2_MASK               ((uint16_t)0x03FF)              /*!< I2COA2 Bit Mask */
N/* EUSCI_B_I2COA2[OAEN] Bits */
N#define EUSCI_B_I2COA2_OAEN_OFS                  (10)                            /*!< UCOAEN Bit Offset */
N#define EUSCI_B_I2COA2_OAEN                      ((uint16_t)0x0400)              /*!< Own Address enable register */
N/* EUSCI_B_I2COA3[I2COA3] Bits */
N#define EUSCI_B_I2COA3_I2COA3_OFS                ( 0)                            /*!< I2COA3 Bit Offset */
N#define EUSCI_B_I2COA3_I2COA3_MASK               ((uint16_t)0x03FF)              /*!< I2COA3 Bit Mask */
N/* EUSCI_B_I2COA3[OAEN] Bits */
N#define EUSCI_B_I2COA3_OAEN_OFS                  (10)                            /*!< UCOAEN Bit Offset */
N#define EUSCI_B_I2COA3_OAEN                      ((uint16_t)0x0400)              /*!< Own Address enable register */
N/* EUSCI_B_ADDRX[ADDRX] Bits */
N#define EUSCI_B_ADDRX_ADDRX_OFS                  ( 0)                            /*!< ADDRX Bit Offset */
N#define EUSCI_B_ADDRX_ADDRX_MASK                 ((uint16_t)0x03FF)              /*!< ADDRX Bit Mask */
N#define EUSCI_B_ADDRX_ADDRX0                     ((uint16_t)0x0001)              /*!< ADDRX Bit 0 */
N#define EUSCI_B_ADDRX_ADDRX1                     ((uint16_t)0x0002)              /*!< ADDRX Bit 1 */
N#define EUSCI_B_ADDRX_ADDRX2                     ((uint16_t)0x0004)              /*!< ADDRX Bit 2 */
N#define EUSCI_B_ADDRX_ADDRX3                     ((uint16_t)0x0008)              /*!< ADDRX Bit 3 */
N#define EUSCI_B_ADDRX_ADDRX4                     ((uint16_t)0x0010)              /*!< ADDRX Bit 4 */
N#define EUSCI_B_ADDRX_ADDRX5                     ((uint16_t)0x0020)              /*!< ADDRX Bit 5 */
N#define EUSCI_B_ADDRX_ADDRX6                     ((uint16_t)0x0040)              /*!< ADDRX Bit 6 */
N#define EUSCI_B_ADDRX_ADDRX7                     ((uint16_t)0x0080)              /*!< ADDRX Bit 7 */
N#define EUSCI_B_ADDRX_ADDRX8                     ((uint16_t)0x0100)              /*!< ADDRX Bit 8 */
N#define EUSCI_B_ADDRX_ADDRX9                     ((uint16_t)0x0200)              /*!< ADDRX Bit 9 */
N/* EUSCI_B_ADDMASK[ADDMASK] Bits */
N#define EUSCI_B_ADDMASK_ADDMASK_OFS              ( 0)                            /*!< ADDMASK Bit Offset */
N#define EUSCI_B_ADDMASK_ADDMASK_MASK             ((uint16_t)0x03FF)              /*!< ADDMASK Bit Mask */
N/* EUSCI_B_I2CSA[I2CSA] Bits */
N#define EUSCI_B_I2CSA_I2CSA_OFS                  ( 0)                            /*!< I2CSA Bit Offset */
N#define EUSCI_B_I2CSA_I2CSA_MASK                 ((uint16_t)0x03FF)              /*!< I2CSA Bit Mask */
N/* EUSCI_B_IE[RXIE0] Bits */
N#define EUSCI_B_IE_RXIE0_OFS                     ( 0)                            /*!< UCRXIE0 Bit Offset */
N#define EUSCI_B_IE_RXIE0                         ((uint16_t)0x0001)              /*!< Receive interrupt enable 0 */
N/* EUSCI_B_IE[TXIE0] Bits */
N#define EUSCI_B_IE_TXIE0_OFS                     ( 1)                            /*!< UCTXIE0 Bit Offset */
N#define EUSCI_B_IE_TXIE0                         ((uint16_t)0x0002)              /*!< Transmit interrupt enable 0 */
N/* EUSCI_B_IE[STTIE] Bits */
N#define EUSCI_B_IE_STTIE_OFS                     ( 2)                            /*!< UCSTTIE Bit Offset */
N#define EUSCI_B_IE_STTIE                         ((uint16_t)0x0004)              /*!< START condition interrupt enable */
N/* EUSCI_B_IE[STPIE] Bits */
N#define EUSCI_B_IE_STPIE_OFS                     ( 3)                            /*!< UCSTPIE Bit Offset */
N#define EUSCI_B_IE_STPIE                         ((uint16_t)0x0008)              /*!< STOP condition interrupt enable */
N/* EUSCI_B_IE[ALIE] Bits */
N#define EUSCI_B_IE_ALIE_OFS                      ( 4)                            /*!< UCALIE Bit Offset */
N#define EUSCI_B_IE_ALIE                          ((uint16_t)0x0010)              /*!< Arbitration lost interrupt enable */
N/* EUSCI_B_IE[NACKIE] Bits */
N#define EUSCI_B_IE_NACKIE_OFS                    ( 5)                            /*!< UCNACKIE Bit Offset */
N#define EUSCI_B_IE_NACKIE                        ((uint16_t)0x0020)              /*!< Not-acknowledge interrupt enable */
N/* EUSCI_B_IE[BCNTIE] Bits */
N#define EUSCI_B_IE_BCNTIE_OFS                    ( 6)                            /*!< UCBCNTIE Bit Offset */
N#define EUSCI_B_IE_BCNTIE                        ((uint16_t)0x0040)              /*!< Byte counter interrupt enable */
N/* EUSCI_B_IE[CLTOIE] Bits */
N#define EUSCI_B_IE_CLTOIE_OFS                    ( 7)                            /*!< UCCLTOIE Bit Offset */
N#define EUSCI_B_IE_CLTOIE                        ((uint16_t)0x0080)              /*!< Clock low timeout interrupt enable */
N/* EUSCI_B_IE[RXIE1] Bits */
N#define EUSCI_B_IE_RXIE1_OFS                     ( 8)                            /*!< UCRXIE1 Bit Offset */
N#define EUSCI_B_IE_RXIE1                         ((uint16_t)0x0100)              /*!< Receive interrupt enable 1 */
N/* EUSCI_B_IE[TXIE1] Bits */
N#define EUSCI_B_IE_TXIE1_OFS                     ( 9)                            /*!< UCTXIE1 Bit Offset */
N#define EUSCI_B_IE_TXIE1                         ((uint16_t)0x0200)              /*!< Transmit interrupt enable 1 */
N/* EUSCI_B_IE[RXIE2] Bits */
N#define EUSCI_B_IE_RXIE2_OFS                     (10)                            /*!< UCRXIE2 Bit Offset */
N#define EUSCI_B_IE_RXIE2                         ((uint16_t)0x0400)              /*!< Receive interrupt enable 2 */
N/* EUSCI_B_IE[TXIE2] Bits */
N#define EUSCI_B_IE_TXIE2_OFS                     (11)                            /*!< UCTXIE2 Bit Offset */
N#define EUSCI_B_IE_TXIE2                         ((uint16_t)0x0800)              /*!< Transmit interrupt enable 2 */
N/* EUSCI_B_IE[RXIE3] Bits */
N#define EUSCI_B_IE_RXIE3_OFS                     (12)                            /*!< UCRXIE3 Bit Offset */
N#define EUSCI_B_IE_RXIE3                         ((uint16_t)0x1000)              /*!< Receive interrupt enable 3 */
N/* EUSCI_B_IE[TXIE3] Bits */
N#define EUSCI_B_IE_TXIE3_OFS                     (13)                            /*!< UCTXIE3 Bit Offset */
N#define EUSCI_B_IE_TXIE3                         ((uint16_t)0x2000)              /*!< Transmit interrupt enable 3 */
N/* EUSCI_B_IE[BIT9IE] Bits */
N#define EUSCI_B_IE_BIT9IE_OFS                    (14)                            /*!< UCBIT9IE Bit Offset */
N#define EUSCI_B_IE_BIT9IE                        ((uint16_t)0x4000)              /*!< Bit position 9 interrupt enable */
N/* EUSCI_B_IE[RXIE] Bits */
N#define EUSCI_B_IE_RXIE_OFS                      ( 0)                            /*!< UCRXIE Bit Offset */
N#define EUSCI_B_IE_RXIE                          ((uint16_t)0x0001)              /*!< Receive interrupt enable */
N/* EUSCI_B_IE[TXIE] Bits */
N#define EUSCI_B_IE_TXIE_OFS                      ( 1)                            /*!< UCTXIE Bit Offset */
N#define EUSCI_B_IE_TXIE                          ((uint16_t)0x0002)              /*!< Transmit interrupt enable */
N/* EUSCI_B_IFG[RXIFG0] Bits */
N#define EUSCI_B_IFG_RXIFG0_OFS                   ( 0)                            /*!< UCRXIFG0 Bit Offset */
N#define EUSCI_B_IFG_RXIFG0                       ((uint16_t)0x0001)              /*!< eUSCI_B receive interrupt flag 0 */
N/* EUSCI_B_IFG[TXIFG0] Bits */
N#define EUSCI_B_IFG_TXIFG0_OFS                   ( 1)                            /*!< UCTXIFG0 Bit Offset */
N#define EUSCI_B_IFG_TXIFG0                       ((uint16_t)0x0002)              /*!< eUSCI_B transmit interrupt flag 0 */
N/* EUSCI_B_IFG[STTIFG] Bits */
N#define EUSCI_B_IFG_STTIFG_OFS                   ( 2)                            /*!< UCSTTIFG Bit Offset */
N#define EUSCI_B_IFG_STTIFG                       ((uint16_t)0x0004)              /*!< START condition interrupt flag */
N/* EUSCI_B_IFG[STPIFG] Bits */
N#define EUSCI_B_IFG_STPIFG_OFS                   ( 3)                            /*!< UCSTPIFG Bit Offset */
N#define EUSCI_B_IFG_STPIFG                       ((uint16_t)0x0008)              /*!< STOP condition interrupt flag */
N/* EUSCI_B_IFG[ALIFG] Bits */
N#define EUSCI_B_IFG_ALIFG_OFS                    ( 4)                            /*!< UCALIFG Bit Offset */
N#define EUSCI_B_IFG_ALIFG                        ((uint16_t)0x0010)              /*!< Arbitration lost interrupt flag */
N/* EUSCI_B_IFG[NACKIFG] Bits */
N#define EUSCI_B_IFG_NACKIFG_OFS                  ( 5)                            /*!< UCNACKIFG Bit Offset */
N#define EUSCI_B_IFG_NACKIFG                      ((uint16_t)0x0020)              /*!< Not-acknowledge received interrupt flag */
N/* EUSCI_B_IFG[BCNTIFG] Bits */
N#define EUSCI_B_IFG_BCNTIFG_OFS                  ( 6)                            /*!< UCBCNTIFG Bit Offset */
N#define EUSCI_B_IFG_BCNTIFG                      ((uint16_t)0x0040)              /*!< Byte counter interrupt flag */
N/* EUSCI_B_IFG[CLTOIFG] Bits */
N#define EUSCI_B_IFG_CLTOIFG_OFS                  ( 7)                            /*!< UCCLTOIFG Bit Offset */
N#define EUSCI_B_IFG_CLTOIFG                      ((uint16_t)0x0080)              /*!< Clock low timeout interrupt flag */
N/* EUSCI_B_IFG[RXIFG1] Bits */
N#define EUSCI_B_IFG_RXIFG1_OFS                   ( 8)                            /*!< UCRXIFG1 Bit Offset */
N#define EUSCI_B_IFG_RXIFG1                       ((uint16_t)0x0100)              /*!< eUSCI_B receive interrupt flag 1 */
N/* EUSCI_B_IFG[TXIFG1] Bits */
N#define EUSCI_B_IFG_TXIFG1_OFS                   ( 9)                            /*!< UCTXIFG1 Bit Offset */
N#define EUSCI_B_IFG_TXIFG1                       ((uint16_t)0x0200)              /*!< eUSCI_B transmit interrupt flag 1 */
N/* EUSCI_B_IFG[RXIFG2] Bits */
N#define EUSCI_B_IFG_RXIFG2_OFS                   (10)                            /*!< UCRXIFG2 Bit Offset */
N#define EUSCI_B_IFG_RXIFG2                       ((uint16_t)0x0400)              /*!< eUSCI_B receive interrupt flag 2 */
N/* EUSCI_B_IFG[TXIFG2] Bits */
N#define EUSCI_B_IFG_TXIFG2_OFS                   (11)                            /*!< UCTXIFG2 Bit Offset */
N#define EUSCI_B_IFG_TXIFG2                       ((uint16_t)0x0800)              /*!< eUSCI_B transmit interrupt flag 2 */
N/* EUSCI_B_IFG[RXIFG3] Bits */
N#define EUSCI_B_IFG_RXIFG3_OFS                   (12)                            /*!< UCRXIFG3 Bit Offset */
N#define EUSCI_B_IFG_RXIFG3                       ((uint16_t)0x1000)              /*!< eUSCI_B receive interrupt flag 3 */
N/* EUSCI_B_IFG[TXIFG3] Bits */
N#define EUSCI_B_IFG_TXIFG3_OFS                   (13)                            /*!< UCTXIFG3 Bit Offset */
N#define EUSCI_B_IFG_TXIFG3                       ((uint16_t)0x2000)              /*!< eUSCI_B transmit interrupt flag 3 */
N/* EUSCI_B_IFG[BIT9IFG] Bits */
N#define EUSCI_B_IFG_BIT9IFG_OFS                  (14)                            /*!< UCBIT9IFG Bit Offset */
N#define EUSCI_B_IFG_BIT9IFG                      ((uint16_t)0x4000)              /*!< Bit position 9 interrupt flag */
N/* EUSCI_B_IFG[RXIFG] Bits */
N#define EUSCI_B_IFG_RXIFG_OFS                    ( 0)                            /*!< UCRXIFG Bit Offset */
N#define EUSCI_B_IFG_RXIFG                        ((uint16_t)0x0001)              /*!< Receive interrupt flag */
N/* EUSCI_B_IFG[TXIFG] Bits */
N#define EUSCI_B_IFG_TXIFG_OFS                    ( 1)                            /*!< UCTXIFG Bit Offset */
N#define EUSCI_B_IFG_TXIFG                        ((uint16_t)0x0002)              /*!< Transmit interrupt flag */
N/* legacy definitions for backward compatibility to version 2100 */
N#define EUSCI_B__RXIE_OFS                        EUSCI_B_IE_RXIE_OFS             /*!< UCRXIE Bit Offset */
N#define EUSCI_B__RXIE                            EUSCI_B_IE_RXIE                 /*!< Receive interrupt enable */
N#define EUSCI_B__TXIE_OFS                        EUSCI_B_IE_TXIE_OFS             /*!< UCTXIE Bit Offset */
N#define EUSCI_B__TXIE                            EUSCI_B_IE_TXIE                 /*!< Transmit interrupt enable */
N
N
N/******************************************************************************
N* FLCTL Bits
N******************************************************************************/
N/* FLCTL_POWER_STAT[PSTAT] Bits */
N#define FLCTL_POWER_STAT_PSTAT_OFS               ( 0)                            /*!< PSTAT Bit Offset */
N#define FLCTL_POWER_STAT_PSTAT_MASK              ((uint32_t)0x00000007)          /*!< PSTAT Bit Mask */
N#define FLCTL_POWER_STAT_PSTAT0                  ((uint32_t)0x00000001)          /*!< PSTAT Bit 0 */
N#define FLCTL_POWER_STAT_PSTAT1                  ((uint32_t)0x00000002)          /*!< PSTAT Bit 1 */
N#define FLCTL_POWER_STAT_PSTAT2                  ((uint32_t)0x00000004)          /*!< PSTAT Bit 2 */
N#define FLCTL_POWER_STAT_PSTAT_0                 ((uint32_t)0x00000000)          /*!< Flash IP in power-down mode */
N#define FLCTL_POWER_STAT_PSTAT_1                 ((uint32_t)0x00000001)          /*!< Flash IP Vdd domain power-up in progress */
N#define FLCTL_POWER_STAT_PSTAT_2                 ((uint32_t)0x00000002)          /*!< PSS LDO_GOOD, IREF_OK and VREF_OK check in progress */
N#define FLCTL_POWER_STAT_PSTAT_3                 ((uint32_t)0x00000003)          /*!< Flash IP SAFE_LV check in progress */
N#define FLCTL_POWER_STAT_PSTAT_4                 ((uint32_t)0x00000004)          /*!< Flash IP Active */
N#define FLCTL_POWER_STAT_PSTAT_5                 ((uint32_t)0x00000005)          /*!< Flash IP Active in Low-Frequency Active and Low-Frequency LPM0 modes. */
N#define FLCTL_POWER_STAT_PSTAT_6                 ((uint32_t)0x00000006)          /*!< Flash IP in Standby mode */
N#define FLCTL_POWER_STAT_PSTAT_7                 ((uint32_t)0x00000007)          /*!< Flash IP in Current mirror boost state */
N/* FLCTL_POWER_STAT[LDOSTAT] Bits */
N#define FLCTL_POWER_STAT_LDOSTAT_OFS             ( 3)                            /*!< LDOSTAT Bit Offset */
N#define FLCTL_POWER_STAT_LDOSTAT                 ((uint32_t)0x00000008)          /*!< PSS FLDO GOOD status */
N/* FLCTL_POWER_STAT[VREFSTAT] Bits */
N#define FLCTL_POWER_STAT_VREFSTAT_OFS            ( 4)                            /*!< VREFSTAT Bit Offset */
N#define FLCTL_POWER_STAT_VREFSTAT                ((uint32_t)0x00000010)          /*!< PSS VREF stable status */
N/* FLCTL_POWER_STAT[IREFSTAT] Bits */
N#define FLCTL_POWER_STAT_IREFSTAT_OFS            ( 5)                            /*!< IREFSTAT Bit Offset */
N#define FLCTL_POWER_STAT_IREFSTAT                ((uint32_t)0x00000020)          /*!< PSS IREF stable status */
N/* FLCTL_POWER_STAT[TRIMSTAT] Bits */
N#define FLCTL_POWER_STAT_TRIMSTAT_OFS            ( 6)                            /*!< TRIMSTAT Bit Offset */
N#define FLCTL_POWER_STAT_TRIMSTAT                ((uint32_t)0x00000040)          /*!< PSS trim done status */
N/* FLCTL_POWER_STAT[RD_2T] Bits */
N#define FLCTL_POWER_STAT_RD_2T_OFS               ( 7)                            /*!< RD_2T Bit Offset */
N#define FLCTL_POWER_STAT_RD_2T                   ((uint32_t)0x00000080)          /*!< Indicates if Flash is being accessed in 2T mode */
N/* FLCTL_BANK0_RDCTL[RD_MODE] Bits */
N#define FLCTL_BANK0_RDCTL_RD_MODE_OFS            ( 0)                            /*!< RD_MODE Bit Offset */
N#define FLCTL_BANK0_RDCTL_RD_MODE_MASK           ((uint32_t)0x0000000F)          /*!< RD_MODE Bit Mask */
N#define FLCTL_BANK0_RDCTL_RD_MODE0               ((uint32_t)0x00000001)          /*!< RD_MODE Bit 0 */
N#define FLCTL_BANK0_RDCTL_RD_MODE1               ((uint32_t)0x00000002)          /*!< RD_MODE Bit 1 */
N#define FLCTL_BANK0_RDCTL_RD_MODE2               ((uint32_t)0x00000004)          /*!< RD_MODE Bit 2 */
N#define FLCTL_BANK0_RDCTL_RD_MODE3               ((uint32_t)0x00000008)          /*!< RD_MODE Bit 3 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_0              ((uint32_t)0x00000000)          /*!< Normal read mode */
N#define FLCTL_BANK0_RDCTL_RD_MODE_1              ((uint32_t)0x00000001)          /*!< Read Margin 0 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_2              ((uint32_t)0x00000002)          /*!< Read Margin 1 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_3              ((uint32_t)0x00000003)          /*!< Program Verify */
N#define FLCTL_BANK0_RDCTL_RD_MODE_4              ((uint32_t)0x00000004)          /*!< Erase Verify */
N#define FLCTL_BANK0_RDCTL_RD_MODE_5              ((uint32_t)0x00000005)          /*!< Leakage Verify */
N#define FLCTL_BANK0_RDCTL_RD_MODE_9              ((uint32_t)0x00000009)          /*!< Read Margin 0B */
N#define FLCTL_BANK0_RDCTL_RD_MODE_10             ((uint32_t)0x0000000A)          /*!< Read Margin 1B */
N/* FLCTL_BANK0_RDCTL[BUFI] Bits */
N#define FLCTL_BANK0_RDCTL_BUFI_OFS               ( 4)                            /*!< BUFI Bit Offset */
N#define FLCTL_BANK0_RDCTL_BUFI                   ((uint32_t)0x00000010)          /*!< Enables read buffering feature for instruction fetches to this Bank */
N/* FLCTL_BANK0_RDCTL[BUFD] Bits */
N#define FLCTL_BANK0_RDCTL_BUFD_OFS               ( 5)                            /*!< BUFD Bit Offset */
N#define FLCTL_BANK0_RDCTL_BUFD                   ((uint32_t)0x00000020)          /*!< Enables read buffering feature for data reads to this Bank */
N/* FLCTL_BANK0_RDCTL[WAIT] Bits */
N#define FLCTL_BANK0_RDCTL_WAIT_OFS               (12)                            /*!< WAIT Bit Offset */
N#define FLCTL_BANK0_RDCTL_WAIT_MASK              ((uint32_t)0x0000F000)          /*!< WAIT Bit Mask */
N#define FLCTL_BANK0_RDCTL_WAIT0                  ((uint32_t)0x00001000)          /*!< WAIT Bit 0 */
N#define FLCTL_BANK0_RDCTL_WAIT1                  ((uint32_t)0x00002000)          /*!< WAIT Bit 1 */
N#define FLCTL_BANK0_RDCTL_WAIT2                  ((uint32_t)0x00004000)          /*!< WAIT Bit 2 */
N#define FLCTL_BANK0_RDCTL_WAIT3                  ((uint32_t)0x00008000)          /*!< WAIT Bit 3 */
N#define FLCTL_BANK0_RDCTL_WAIT_0                 ((uint32_t)0x00000000)          /*!< 0 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_1                 ((uint32_t)0x00001000)          /*!< 1 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_2                 ((uint32_t)0x00002000)          /*!< 2 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_3                 ((uint32_t)0x00003000)          /*!< 3 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_4                 ((uint32_t)0x00004000)          /*!< 4 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_5                 ((uint32_t)0x00005000)          /*!< 5 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_6                 ((uint32_t)0x00006000)          /*!< 6 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_7                 ((uint32_t)0x00007000)          /*!< 7 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_8                 ((uint32_t)0x00008000)          /*!< 8 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_9                 ((uint32_t)0x00009000)          /*!< 9 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_10                ((uint32_t)0x0000A000)          /*!< 10 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_11                ((uint32_t)0x0000B000)          /*!< 11 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_12                ((uint32_t)0x0000C000)          /*!< 12 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_13                ((uint32_t)0x0000D000)          /*!< 13 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_14                ((uint32_t)0x0000E000)          /*!< 14 wait states */
N#define FLCTL_BANK0_RDCTL_WAIT_15                ((uint32_t)0x0000F000)          /*!< 15 wait states */
N/* FLCTL_BANK0_RDCTL[RD_MODE_STATUS] Bits */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_OFS     (16)                            /*!< RD_MODE_STATUS Bit Offset */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_MASK    ((uint32_t)0x000F0000)          /*!< RD_MODE_STATUS Bit Mask */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS0        ((uint32_t)0x00010000)          /*!< RD_MODE_STATUS Bit 0 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS1        ((uint32_t)0x00020000)          /*!< RD_MODE_STATUS Bit 1 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS2        ((uint32_t)0x00040000)          /*!< RD_MODE_STATUS Bit 2 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS3        ((uint32_t)0x00080000)          /*!< RD_MODE_STATUS Bit 3 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_0       ((uint32_t)0x00000000)          /*!< Normal read mode */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_1       ((uint32_t)0x00010000)          /*!< Read Margin 0 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_2       ((uint32_t)0x00020000)          /*!< Read Margin 1 */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_3       ((uint32_t)0x00030000)          /*!< Program Verify */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_4       ((uint32_t)0x00040000)          /*!< Erase Verify */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_5       ((uint32_t)0x00050000)          /*!< Leakage Verify */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_9       ((uint32_t)0x00090000)          /*!< Read Margin 0B */
N#define FLCTL_BANK0_RDCTL_RD_MODE_STATUS_10      ((uint32_t)0x000A0000)          /*!< Read Margin 1B */
N/* FLCTL_BANK1_RDCTL[RD_MODE] Bits */
N#define FLCTL_BANK1_RDCTL_RD_MODE_OFS            ( 0)                            /*!< RD_MODE Bit Offset */
N#define FLCTL_BANK1_RDCTL_RD_MODE_MASK           ((uint32_t)0x0000000F)          /*!< RD_MODE Bit Mask */
N#define FLCTL_BANK1_RDCTL_RD_MODE0               ((uint32_t)0x00000001)          /*!< RD_MODE Bit 0 */
N#define FLCTL_BANK1_RDCTL_RD_MODE1               ((uint32_t)0x00000002)          /*!< RD_MODE Bit 1 */
N#define FLCTL_BANK1_RDCTL_RD_MODE2               ((uint32_t)0x00000004)          /*!< RD_MODE Bit 2 */
N#define FLCTL_BANK1_RDCTL_RD_MODE3               ((uint32_t)0x00000008)          /*!< RD_MODE Bit 3 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_0              ((uint32_t)0x00000000)          /*!< Normal read mode */
N#define FLCTL_BANK1_RDCTL_RD_MODE_1              ((uint32_t)0x00000001)          /*!< Read Margin 0 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_2              ((uint32_t)0x00000002)          /*!< Read Margin 1 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_3              ((uint32_t)0x00000003)          /*!< Program Verify */
N#define FLCTL_BANK1_RDCTL_RD_MODE_4              ((uint32_t)0x00000004)          /*!< Erase Verify */
N#define FLCTL_BANK1_RDCTL_RD_MODE_5              ((uint32_t)0x00000005)          /*!< Leakage Verify */
N#define FLCTL_BANK1_RDCTL_RD_MODE_9              ((uint32_t)0x00000009)          /*!< Read Margin 0B */
N#define FLCTL_BANK1_RDCTL_RD_MODE_10             ((uint32_t)0x0000000A)          /*!< Read Margin 1B */
N/* FLCTL_BANK1_RDCTL[BUFI] Bits */
N#define FLCTL_BANK1_RDCTL_BUFI_OFS               ( 4)                            /*!< BUFI Bit Offset */
N#define FLCTL_BANK1_RDCTL_BUFI                   ((uint32_t)0x00000010)          /*!< Enables read buffering feature for instruction fetches to this Bank */
N/* FLCTL_BANK1_RDCTL[BUFD] Bits */
N#define FLCTL_BANK1_RDCTL_BUFD_OFS               ( 5)                            /*!< BUFD Bit Offset */
N#define FLCTL_BANK1_RDCTL_BUFD                   ((uint32_t)0x00000020)          /*!< Enables read buffering feature for data reads to this Bank */
N/* FLCTL_BANK1_RDCTL[RD_MODE_STATUS] Bits */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_OFS     (16)                            /*!< RD_MODE_STATUS Bit Offset */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_MASK    ((uint32_t)0x000F0000)          /*!< RD_MODE_STATUS Bit Mask */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS0        ((uint32_t)0x00010000)          /*!< RD_MODE_STATUS Bit 0 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS1        ((uint32_t)0x00020000)          /*!< RD_MODE_STATUS Bit 1 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS2        ((uint32_t)0x00040000)          /*!< RD_MODE_STATUS Bit 2 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS3        ((uint32_t)0x00080000)          /*!< RD_MODE_STATUS Bit 3 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_0       ((uint32_t)0x00000000)          /*!< Normal read mode */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_1       ((uint32_t)0x00010000)          /*!< Read Margin 0 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_2       ((uint32_t)0x00020000)          /*!< Read Margin 1 */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_3       ((uint32_t)0x00030000)          /*!< Program Verify */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_4       ((uint32_t)0x00040000)          /*!< Erase Verify */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_5       ((uint32_t)0x00050000)          /*!< Leakage Verify */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_9       ((uint32_t)0x00090000)          /*!< Read Margin 0B */
N#define FLCTL_BANK1_RDCTL_RD_MODE_STATUS_10      ((uint32_t)0x000A0000)          /*!< Read Margin 1B */
N/* FLCTL_BANK1_RDCTL[WAIT] Bits */
N#define FLCTL_BANK1_RDCTL_WAIT_OFS               (12)                            /*!< WAIT Bit Offset */
N#define FLCTL_BANK1_RDCTL_WAIT_MASK              ((uint32_t)0x0000F000)          /*!< WAIT Bit Mask */
N#define FLCTL_BANK1_RDCTL_WAIT0                  ((uint32_t)0x00001000)          /*!< WAIT Bit 0 */
N#define FLCTL_BANK1_RDCTL_WAIT1                  ((uint32_t)0x00002000)          /*!< WAIT Bit 1 */
N#define FLCTL_BANK1_RDCTL_WAIT2                  ((uint32_t)0x00004000)          /*!< WAIT Bit 2 */
N#define FLCTL_BANK1_RDCTL_WAIT3                  ((uint32_t)0x00008000)          /*!< WAIT Bit 3 */
N#define FLCTL_BANK1_RDCTL_WAIT_0                 ((uint32_t)0x00000000)          /*!< 0 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_1                 ((uint32_t)0x00001000)          /*!< 1 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_2                 ((uint32_t)0x00002000)          /*!< 2 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_3                 ((uint32_t)0x00003000)          /*!< 3 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_4                 ((uint32_t)0x00004000)          /*!< 4 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_5                 ((uint32_t)0x00005000)          /*!< 5 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_6                 ((uint32_t)0x00006000)          /*!< 6 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_7                 ((uint32_t)0x00007000)          /*!< 7 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_8                 ((uint32_t)0x00008000)          /*!< 8 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_9                 ((uint32_t)0x00009000)          /*!< 9 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_10                ((uint32_t)0x0000A000)          /*!< 10 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_11                ((uint32_t)0x0000B000)          /*!< 11 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_12                ((uint32_t)0x0000C000)          /*!< 12 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_13                ((uint32_t)0x0000D000)          /*!< 13 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_14                ((uint32_t)0x0000E000)          /*!< 14 wait states */
N#define FLCTL_BANK1_RDCTL_WAIT_15                ((uint32_t)0x0000F000)          /*!< 15 wait states */
N/* FLCTL_RDBRST_CTLSTAT[START] Bits */
N#define FLCTL_RDBRST_CTLSTAT_START_OFS           ( 0)                            /*!< START Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_START               ((uint32_t)0x00000001)          /*!< Start of burst/compare operation */
N/* FLCTL_RDBRST_CTLSTAT[MEM_TYPE] Bits */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE_OFS        ( 1)                            /*!< MEM_TYPE Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE_MASK       ((uint32_t)0x00000006)          /*!< MEM_TYPE Bit Mask */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE0           ((uint32_t)0x00000002)          /*!< MEM_TYPE Bit 0 */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE1           ((uint32_t)0x00000004)          /*!< MEM_TYPE Bit 1 */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE_0          ((uint32_t)0x00000000)          /*!< Main Memory */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE_1          ((uint32_t)0x00000002)          /*!< Information Memory */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE_2          ((uint32_t)0x00000004)          /*!< Reserved */
N#define FLCTL_RDBRST_CTLSTAT_MEM_TYPE_3          ((uint32_t)0x00000006)          /*!< Engineering Memory */
N/* FLCTL_RDBRST_CTLSTAT[STOP_FAIL] Bits */
N#define FLCTL_RDBRST_CTLSTAT_STOP_FAIL_OFS       ( 3)                            /*!< STOP_FAIL Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_STOP_FAIL           ((uint32_t)0x00000008)          /*!< Terminate burst/compare operation */
N/* FLCTL_RDBRST_CTLSTAT[DATA_CMP] Bits */
N#define FLCTL_RDBRST_CTLSTAT_DATA_CMP_OFS        ( 4)                            /*!< DATA_CMP Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_DATA_CMP            ((uint32_t)0x00000010)          /*!< Data pattern used for comparison against memory read data */
N/* FLCTL_RDBRST_CTLSTAT[TEST_EN] Bits */
N#define FLCTL_RDBRST_CTLSTAT_TEST_EN_OFS         ( 6)                            /*!< TEST_EN Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_TEST_EN             ((uint32_t)0x00000040)          /*!< Enable comparison against test data compare registers */
N/* FLCTL_RDBRST_CTLSTAT[BRST_STAT] Bits */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT_OFS       (16)                            /*!< BRST_STAT Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT_MASK      ((uint32_t)0x00030000)          /*!< BRST_STAT Bit Mask */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT0          ((uint32_t)0x00010000)          /*!< BRST_STAT Bit 0 */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT1          ((uint32_t)0x00020000)          /*!< BRST_STAT Bit 1 */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT_0         ((uint32_t)0x00000000)          /*!< Idle */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT_1         ((uint32_t)0x00010000)          /*!< Burst/Compare START bit written, but operation pending */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT_2         ((uint32_t)0x00020000)          /*!< Burst/Compare in progress */
N#define FLCTL_RDBRST_CTLSTAT_BRST_STAT_3         ((uint32_t)0x00030000)          /*!< Burst complete (status of completed burst remains in this state unless  */
N                                                                                 /* explicitly cleared by SW) */
N/* FLCTL_RDBRST_CTLSTAT[CMP_ERR] Bits */
N#define FLCTL_RDBRST_CTLSTAT_CMP_ERR_OFS         (18)                            /*!< CMP_ERR Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_CMP_ERR             ((uint32_t)0x00040000)          /*!< Burst/Compare Operation encountered atleast one data */
N/* FLCTL_RDBRST_CTLSTAT[ADDR_ERR] Bits */
N#define FLCTL_RDBRST_CTLSTAT_ADDR_ERR_OFS        (19)                            /*!< ADDR_ERR Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_ADDR_ERR            ((uint32_t)0x00080000)          /*!< Burst/Compare Operation was terminated due to access to */
N/* FLCTL_RDBRST_CTLSTAT[CLR_STAT] Bits */
N#define FLCTL_RDBRST_CTLSTAT_CLR_STAT_OFS        (23)                            /*!< CLR_STAT Bit Offset */
N#define FLCTL_RDBRST_CTLSTAT_CLR_STAT            ((uint32_t)0x00800000)          /*!< Clear status bits 19-16 of this register */
N/* FLCTL_RDBRST_STARTADDR[START_ADDRESS] Bits */
N#define FLCTL_RDBRST_STARTADDR_START_ADDRESS_OFS ( 0)                            /*!< START_ADDRESS Bit Offset */
N#define FLCTL_RDBRST_STARTADDR_START_ADDRESS_MASK ((uint32_t)0x001FFFFF)          /*!< START_ADDRESS Bit Mask */
N/* FLCTL_RDBRST_LEN[BURST_LENGTH] Bits */
N#define FLCTL_RDBRST_LEN_BURST_LENGTH_OFS        ( 0)                            /*!< BURST_LENGTH Bit Offset */
N#define FLCTL_RDBRST_LEN_BURST_LENGTH_MASK       ((uint32_t)0x001FFFFF)          /*!< BURST_LENGTH Bit Mask */
N/* FLCTL_RDBRST_FAILADDR[FAIL_ADDRESS] Bits */
N#define FLCTL_RDBRST_FAILADDR_FAIL_ADDRESS_OFS   ( 0)                            /*!< FAIL_ADDRESS Bit Offset */
N#define FLCTL_RDBRST_FAILADDR_FAIL_ADDRESS_MASK  ((uint32_t)0x001FFFFF)          /*!< FAIL_ADDRESS Bit Mask */
N/* FLCTL_RDBRST_FAILCNT[FAIL_COUNT] Bits */
N#define FLCTL_RDBRST_FAILCNT_FAIL_COUNT_OFS      ( 0)                            /*!< FAIL_COUNT Bit Offset */
N#define FLCTL_RDBRST_FAILCNT_FAIL_COUNT_MASK     ((uint32_t)0x0001FFFF)          /*!< FAIL_COUNT Bit Mask */
N/* FLCTL_PRG_CTLSTAT[ENABLE] Bits */
N#define FLCTL_PRG_CTLSTAT_ENABLE_OFS             ( 0)                            /*!< ENABLE Bit Offset */
N#define FLCTL_PRG_CTLSTAT_ENABLE                 ((uint32_t)0x00000001)          /*!< Master control for all word program operations */
N/* FLCTL_PRG_CTLSTAT[MODE] Bits */
N#define FLCTL_PRG_CTLSTAT_MODE_OFS               ( 1)                            /*!< MODE Bit Offset */
N#define FLCTL_PRG_CTLSTAT_MODE                   ((uint32_t)0x00000002)          /*!< Write mode */
N/* FLCTL_PRG_CTLSTAT[VER_PRE] Bits */
N#define FLCTL_PRG_CTLSTAT_VER_PRE_OFS            ( 2)                            /*!< VER_PRE Bit Offset */
N#define FLCTL_PRG_CTLSTAT_VER_PRE                ((uint32_t)0x00000004)          /*!< Controls automatic pre program verify operations */
N/* FLCTL_PRG_CTLSTAT[VER_PST] Bits */
N#define FLCTL_PRG_CTLSTAT_VER_PST_OFS            ( 3)                            /*!< VER_PST Bit Offset */
N#define FLCTL_PRG_CTLSTAT_VER_PST                ((uint32_t)0x00000008)          /*!< Controls automatic post program verify operations */
N/* FLCTL_PRG_CTLSTAT[STATUS] Bits */
N#define FLCTL_PRG_CTLSTAT_STATUS_OFS             (16)                            /*!< STATUS Bit Offset */
N#define FLCTL_PRG_CTLSTAT_STATUS_MASK            ((uint32_t)0x00030000)          /*!< STATUS Bit Mask */
N#define FLCTL_PRG_CTLSTAT_STATUS0                ((uint32_t)0x00010000)          /*!< STATUS Bit 0 */
N#define FLCTL_PRG_CTLSTAT_STATUS1                ((uint32_t)0x00020000)          /*!< STATUS Bit 1 */
N#define FLCTL_PRG_CTLSTAT_STATUS_0               ((uint32_t)0x00000000)          /*!< Idle (no program operation currently active) */
N#define FLCTL_PRG_CTLSTAT_STATUS_1               ((uint32_t)0x00010000)          /*!< Single word program operation triggered, but pending */
N#define FLCTL_PRG_CTLSTAT_STATUS_2               ((uint32_t)0x00020000)          /*!< Single word program in progress */
N#define FLCTL_PRG_CTLSTAT_STATUS_3               ((uint32_t)0x00030000)          /*!< Reserved (Idle) */
N/* FLCTL_PRG_CTLSTAT[BNK_ACT] Bits */
N#define FLCTL_PRG_CTLSTAT_BNK_ACT_OFS            (18)                            /*!< BNK_ACT Bit Offset */
N#define FLCTL_PRG_CTLSTAT_BNK_ACT                ((uint32_t)0x00040000)          /*!< Bank active */
N/* FLCTL_PRGBRST_CTLSTAT[START] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_START_OFS          ( 0)                            /*!< START Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_START              ((uint32_t)0x00000001)          /*!< Trigger start of burst program operation */
N/* FLCTL_PRGBRST_CTLSTAT[TYPE] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE_OFS           ( 1)                            /*!< TYPE Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE_MASK          ((uint32_t)0x00000006)          /*!< TYPE Bit Mask */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE0              ((uint32_t)0x00000002)          /*!< TYPE Bit 0 */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE1              ((uint32_t)0x00000004)          /*!< TYPE Bit 1 */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE_0             ((uint32_t)0x00000000)          /*!< Main Memory */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE_1             ((uint32_t)0x00000002)          /*!< Information Memory */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE_2             ((uint32_t)0x00000004)          /*!< Reserved */
N#define FLCTL_PRGBRST_CTLSTAT_TYPE_3             ((uint32_t)0x00000006)          /*!< Engineering Memory */
N/* FLCTL_PRGBRST_CTLSTAT[LEN] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_LEN_OFS            ( 3)                            /*!< LEN Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_LEN_MASK           ((uint32_t)0x00000038)          /*!< LEN Bit Mask */
N#define FLCTL_PRGBRST_CTLSTAT_LEN0               ((uint32_t)0x00000008)          /*!< LEN Bit 0 */
N#define FLCTL_PRGBRST_CTLSTAT_LEN1               ((uint32_t)0x00000010)          /*!< LEN Bit 1 */
N#define FLCTL_PRGBRST_CTLSTAT_LEN2               ((uint32_t)0x00000020)          /*!< LEN Bit 2 */
N#define FLCTL_PRGBRST_CTLSTAT_LEN_0              ((uint32_t)0x00000000)          /*!< No burst operation */
N#define FLCTL_PRGBRST_CTLSTAT_LEN_1              ((uint32_t)0x00000008)          /*!< 1 word burst of 128 bits, starting with address in the  */
N                                                                                 /* FLCTL_PRGBRST_STARTADDR Register */
N#define FLCTL_PRGBRST_CTLSTAT_LEN_2              ((uint32_t)0x00000010)          /*!< 2*128 bits burst write, starting with address in the FLCTL_PRGBRST_STARTADDR  */
N                                                                                 /* Register */
N#define FLCTL_PRGBRST_CTLSTAT_LEN_3              ((uint32_t)0x00000018)          /*!< 3*128 bits burst write, starting with address in the FLCTL_PRGBRST_STARTADDR  */
N                                                                                 /* Register */
N#define FLCTL_PRGBRST_CTLSTAT_LEN_4              ((uint32_t)0x00000020)          /*!< 4*128 bits burst write, starting with address in the FLCTL_PRGBRST_STARTADDR  */
N                                                                                 /* Register */
N/* FLCTL_PRGBRST_CTLSTAT[AUTO_PRE] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_AUTO_PRE_OFS       ( 6)                            /*!< AUTO_PRE Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_AUTO_PRE           ((uint32_t)0x00000040)          /*!< Auto-Verify operation before the Burst Program */
N/* FLCTL_PRGBRST_CTLSTAT[AUTO_PST] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_AUTO_PST_OFS       ( 7)                            /*!< AUTO_PST Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_AUTO_PST           ((uint32_t)0x00000080)          /*!< Auto-Verify operation after the Burst Program */
N/* FLCTL_PRGBRST_CTLSTAT[BURST_STATUS] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_OFS   (16)                            /*!< BURST_STATUS Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_MASK  ((uint32_t)0x00070000)          /*!< BURST_STATUS Bit Mask */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS0      ((uint32_t)0x00010000)          /*!< BURST_STATUS Bit 0 */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS1      ((uint32_t)0x00020000)          /*!< BURST_STATUS Bit 1 */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS2      ((uint32_t)0x00040000)          /*!< BURST_STATUS Bit 2 */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_0     ((uint32_t)0x00000000)          /*!< Idle (Burst not active) */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_1     ((uint32_t)0x00010000)          /*!< Burst program started but pending */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_2     ((uint32_t)0x00020000)          /*!< Burst active, with 1st 128 bit word being written into Flash */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_3     ((uint32_t)0x00030000)          /*!< Burst active, with 2nd 128 bit word being written into Flash */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_4     ((uint32_t)0x00040000)          /*!< Burst active, with 3rd 128 bit word being written into Flash */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_5     ((uint32_t)0x00050000)          /*!< Burst active, with 4th 128 bit word being written into Flash */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_6     ((uint32_t)0x00060000)          /*!< Reserved (Idle) */
N#define FLCTL_PRGBRST_CTLSTAT_BURST_STATUS_7     ((uint32_t)0x00070000)          /*!< Burst Complete (status of completed burst remains in this state unless  */
N                                                                                 /* explicitly cleared by SW) */
N/* FLCTL_PRGBRST_CTLSTAT[PRE_ERR] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_PRE_ERR_OFS        (19)                            /*!< PRE_ERR Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_PRE_ERR            ((uint32_t)0x00080000)          /*!< Burst Operation encountered preprogram auto-verify errors */
N/* FLCTL_PRGBRST_CTLSTAT[PST_ERR] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_PST_ERR_OFS        (20)                            /*!< PST_ERR Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_PST_ERR            ((uint32_t)0x00100000)          /*!< Burst Operation encountered postprogram auto-verify errors */
N/* FLCTL_PRGBRST_CTLSTAT[ADDR_ERR] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_ADDR_ERR_OFS       (21)                            /*!< ADDR_ERR Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_ADDR_ERR           ((uint32_t)0x00200000)          /*!< Burst Operation was terminated due to attempted program of reserved memory */
N/* FLCTL_PRGBRST_CTLSTAT[CLR_STAT] Bits */
N#define FLCTL_PRGBRST_CTLSTAT_CLR_STAT_OFS       (23)                            /*!< CLR_STAT Bit Offset */
N#define FLCTL_PRGBRST_CTLSTAT_CLR_STAT           ((uint32_t)0x00800000)          /*!< Clear status bits 21-16 of this register */
N/* FLCTL_PRGBRST_STARTADDR[START_ADDRESS] Bits */
N#define FLCTL_PRGBRST_STARTADDR_START_ADDRESS_OFS ( 0)                            /*!< START_ADDRESS Bit Offset */
N#define FLCTL_PRGBRST_STARTADDR_START_ADDRESS_MASK ((uint32_t)0x003FFFFF)          /*!< START_ADDRESS Bit Mask */
N/* FLCTL_ERASE_CTLSTAT[START] Bits */
N#define FLCTL_ERASE_CTLSTAT_START_OFS            ( 0)                            /*!< START Bit Offset */
N#define FLCTL_ERASE_CTLSTAT_START                ((uint32_t)0x00000001)          /*!< Start of Erase operation */
N/* FLCTL_ERASE_CTLSTAT[MODE] Bits */
N#define FLCTL_ERASE_CTLSTAT_MODE_OFS             ( 1)                            /*!< MODE Bit Offset */
N#define FLCTL_ERASE_CTLSTAT_MODE                 ((uint32_t)0x00000002)          /*!< Erase mode selected by application */
N/* FLCTL_ERASE_CTLSTAT[TYPE] Bits */
N#define FLCTL_ERASE_CTLSTAT_TYPE_OFS             ( 2)                            /*!< TYPE Bit Offset */
N#define FLCTL_ERASE_CTLSTAT_TYPE_MASK            ((uint32_t)0x0000000C)          /*!< TYPE Bit Mask */
N#define FLCTL_ERASE_CTLSTAT_TYPE0                ((uint32_t)0x00000004)          /*!< TYPE Bit 0 */
N#define FLCTL_ERASE_CTLSTAT_TYPE1                ((uint32_t)0x00000008)          /*!< TYPE Bit 1 */
N#define FLCTL_ERASE_CTLSTAT_TYPE_0               ((uint32_t)0x00000000)          /*!< Main Memory */
N#define FLCTL_ERASE_CTLSTAT_TYPE_1               ((uint32_t)0x00000004)          /*!< Information Memory */
N#define FLCTL_ERASE_CTLSTAT_TYPE_2               ((uint32_t)0x00000008)          /*!< Reserved */
N#define FLCTL_ERASE_CTLSTAT_TYPE_3               ((uint32_t)0x0000000C)          /*!< Engineering Memory */
N/* FLCTL_ERASE_CTLSTAT[STATUS] Bits */
N#define FLCTL_ERASE_CTLSTAT_STATUS_OFS           (16)                            /*!< STATUS Bit Offset */
N#define FLCTL_ERASE_CTLSTAT_STATUS_MASK          ((uint32_t)0x00030000)          /*!< STATUS Bit Mask */
N#define FLCTL_ERASE_CTLSTAT_STATUS0              ((uint32_t)0x00010000)          /*!< STATUS Bit 0 */
N#define FLCTL_ERASE_CTLSTAT_STATUS1              ((uint32_t)0x00020000)          /*!< STATUS Bit 1 */
N#define FLCTL_ERASE_CTLSTAT_STATUS_0             ((uint32_t)0x00000000)          /*!< Idle (no program operation currently active) */
N#define FLCTL_ERASE_CTLSTAT_STATUS_1             ((uint32_t)0x00010000)          /*!< Erase operation triggered to START but pending */
N#define FLCTL_ERASE_CTLSTAT_STATUS_2             ((uint32_t)0x00020000)          /*!< Erase operation in progress */
N#define FLCTL_ERASE_CTLSTAT_STATUS_3             ((uint32_t)0x00030000)          /*!< Erase operation completed (status of completed erase remains in this state  */
N                                                                                 /* unless explicitly cleared by SW) */
N/* FLCTL_ERASE_CTLSTAT[ADDR_ERR] Bits */
N#define FLCTL_ERASE_CTLSTAT_ADDR_ERR_OFS         (18)                            /*!< ADDR_ERR Bit Offset */
N#define FLCTL_ERASE_CTLSTAT_ADDR_ERR             ((uint32_t)0x00040000)          /*!< Erase Operation was terminated due to attempted erase of reserved memory  */
N                                                                                 /* address */
N/* FLCTL_ERASE_CTLSTAT[CLR_STAT] Bits */
N#define FLCTL_ERASE_CTLSTAT_CLR_STAT_OFS         (19)                            /*!< CLR_STAT Bit Offset */
N#define FLCTL_ERASE_CTLSTAT_CLR_STAT             ((uint32_t)0x00080000)          /*!< Clear status bits 18-16 of this register */
N/* FLCTL_ERASE_SECTADDR[SECT_ADDRESS] Bits */
N#define FLCTL_ERASE_SECTADDR_SECT_ADDRESS_OFS    ( 0)                            /*!< SECT_ADDRESS Bit Offset */
N#define FLCTL_ERASE_SECTADDR_SECT_ADDRESS_MASK   ((uint32_t)0x003FFFFF)          /*!< SECT_ADDRESS Bit Mask */
N/* FLCTL_BANK0_INFO_WEPROT[PROT0] Bits */
N#define FLCTL_BANK0_INFO_WEPROT_PROT0_OFS        ( 0)                            /*!< PROT0 Bit Offset */
N#define FLCTL_BANK0_INFO_WEPROT_PROT0            ((uint32_t)0x00000001)          /*!< Protects Sector 0 from program or erase */
N/* FLCTL_BANK0_INFO_WEPROT[PROT1] Bits */
N#define FLCTL_BANK0_INFO_WEPROT_PROT1_OFS        ( 1)                            /*!< PROT1 Bit Offset */
N#define FLCTL_BANK0_INFO_WEPROT_PROT1            ((uint32_t)0x00000002)          /*!< Protects Sector 1 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT0] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT0_OFS        ( 0)                            /*!< PROT0 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT0            ((uint32_t)0x00000001)          /*!< Protects Sector 0 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT1] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT1_OFS        ( 1)                            /*!< PROT1 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT1            ((uint32_t)0x00000002)          /*!< Protects Sector 1 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT2] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT2_OFS        ( 2)                            /*!< PROT2 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT2            ((uint32_t)0x00000004)          /*!< Protects Sector 2 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT3] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT3_OFS        ( 3)                            /*!< PROT3 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT3            ((uint32_t)0x00000008)          /*!< Protects Sector 3 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT4] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT4_OFS        ( 4)                            /*!< PROT4 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT4            ((uint32_t)0x00000010)          /*!< Protects Sector 4 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT5] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT5_OFS        ( 5)                            /*!< PROT5 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT5            ((uint32_t)0x00000020)          /*!< Protects Sector 5 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT6] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT6_OFS        ( 6)                            /*!< PROT6 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT6            ((uint32_t)0x00000040)          /*!< Protects Sector 6 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT7] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT7_OFS        ( 7)                            /*!< PROT7 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT7            ((uint32_t)0x00000080)          /*!< Protects Sector 7 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT8] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT8_OFS        ( 8)                            /*!< PROT8 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT8            ((uint32_t)0x00000100)          /*!< Protects Sector 8 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT9] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT9_OFS        ( 9)                            /*!< PROT9 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT9            ((uint32_t)0x00000200)          /*!< Protects Sector 9 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT10] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT10_OFS       (10)                            /*!< PROT10 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT10           ((uint32_t)0x00000400)          /*!< Protects Sector 10 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT11] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT11_OFS       (11)                            /*!< PROT11 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT11           ((uint32_t)0x00000800)          /*!< Protects Sector 11 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT12] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT12_OFS       (12)                            /*!< PROT12 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT12           ((uint32_t)0x00001000)          /*!< Protects Sector 12 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT13] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT13_OFS       (13)                            /*!< PROT13 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT13           ((uint32_t)0x00002000)          /*!< Protects Sector 13 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT14] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT14_OFS       (14)                            /*!< PROT14 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT14           ((uint32_t)0x00004000)          /*!< Protects Sector 14 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT15] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT15_OFS       (15)                            /*!< PROT15 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT15           ((uint32_t)0x00008000)          /*!< Protects Sector 15 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT16] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT16_OFS       (16)                            /*!< PROT16 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT16           ((uint32_t)0x00010000)          /*!< Protects Sector 16 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT17] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT17_OFS       (17)                            /*!< PROT17 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT17           ((uint32_t)0x00020000)          /*!< Protects Sector 17 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT18] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT18_OFS       (18)                            /*!< PROT18 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT18           ((uint32_t)0x00040000)          /*!< Protects Sector 18 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT19] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT19_OFS       (19)                            /*!< PROT19 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT19           ((uint32_t)0x00080000)          /*!< Protects Sector 19 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT20] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT20_OFS       (20)                            /*!< PROT20 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT20           ((uint32_t)0x00100000)          /*!< Protects Sector 20 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT21] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT21_OFS       (21)                            /*!< PROT21 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT21           ((uint32_t)0x00200000)          /*!< Protects Sector 21 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT22] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT22_OFS       (22)                            /*!< PROT22 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT22           ((uint32_t)0x00400000)          /*!< Protects Sector 22 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT23] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT23_OFS       (23)                            /*!< PROT23 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT23           ((uint32_t)0x00800000)          /*!< Protects Sector 23 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT24] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT24_OFS       (24)                            /*!< PROT24 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT24           ((uint32_t)0x01000000)          /*!< Protects Sector 24 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT25] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT25_OFS       (25)                            /*!< PROT25 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT25           ((uint32_t)0x02000000)          /*!< Protects Sector 25 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT26] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT26_OFS       (26)                            /*!< PROT26 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT26           ((uint32_t)0x04000000)          /*!< Protects Sector 26 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT27] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT27_OFS       (27)                            /*!< PROT27 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT27           ((uint32_t)0x08000000)          /*!< Protects Sector 27 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT28] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT28_OFS       (28)                            /*!< PROT28 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT28           ((uint32_t)0x10000000)          /*!< Protects Sector 28 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT29] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT29_OFS       (29)                            /*!< PROT29 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT29           ((uint32_t)0x20000000)          /*!< Protects Sector 29 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT30] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT30_OFS       (30)                            /*!< PROT30 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT30           ((uint32_t)0x40000000)          /*!< Protects Sector 30 from program or erase */
N/* FLCTL_BANK0_MAIN_WEPROT[PROT31] Bits */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT31_OFS       (31)                            /*!< PROT31 Bit Offset */
N#define FLCTL_BANK0_MAIN_WEPROT_PROT31           ((uint32_t)0x80000000)          /*!< Protects Sector 31 from program or erase */
N/* FLCTL_BANK1_INFO_WEPROT[PROT0] Bits */
N#define FLCTL_BANK1_INFO_WEPROT_PROT0_OFS        ( 0)                            /*!< PROT0 Bit Offset */
N#define FLCTL_BANK1_INFO_WEPROT_PROT0            ((uint32_t)0x00000001)          /*!< Protects Sector 0 from program or erase operations */
N/* FLCTL_BANK1_INFO_WEPROT[PROT1] Bits */
N#define FLCTL_BANK1_INFO_WEPROT_PROT1_OFS        ( 1)                            /*!< PROT1 Bit Offset */
N#define FLCTL_BANK1_INFO_WEPROT_PROT1            ((uint32_t)0x00000002)          /*!< Protects Sector 1 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT0] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT0_OFS        ( 0)                            /*!< PROT0 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT0            ((uint32_t)0x00000001)          /*!< Protects Sector 0 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT1] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT1_OFS        ( 1)                            /*!< PROT1 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT1            ((uint32_t)0x00000002)          /*!< Protects Sector 1 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT2] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT2_OFS        ( 2)                            /*!< PROT2 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT2            ((uint32_t)0x00000004)          /*!< Protects Sector 2 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT3] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT3_OFS        ( 3)                            /*!< PROT3 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT3            ((uint32_t)0x00000008)          /*!< Protects Sector 3 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT4] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT4_OFS        ( 4)                            /*!< PROT4 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT4            ((uint32_t)0x00000010)          /*!< Protects Sector 4 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT5] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT5_OFS        ( 5)                            /*!< PROT5 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT5            ((uint32_t)0x00000020)          /*!< Protects Sector 5 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT6] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT6_OFS        ( 6)                            /*!< PROT6 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT6            ((uint32_t)0x00000040)          /*!< Protects Sector 6 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT7] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT7_OFS        ( 7)                            /*!< PROT7 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT7            ((uint32_t)0x00000080)          /*!< Protects Sector 7 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT8] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT8_OFS        ( 8)                            /*!< PROT8 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT8            ((uint32_t)0x00000100)          /*!< Protects Sector 8 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT9] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT9_OFS        ( 9)                            /*!< PROT9 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT9            ((uint32_t)0x00000200)          /*!< Protects Sector 9 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT10] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT10_OFS       (10)                            /*!< PROT10 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT10           ((uint32_t)0x00000400)          /*!< Protects Sector 10 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT11] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT11_OFS       (11)                            /*!< PROT11 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT11           ((uint32_t)0x00000800)          /*!< Protects Sector 11 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT12] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT12_OFS       (12)                            /*!< PROT12 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT12           ((uint32_t)0x00001000)          /*!< Protects Sector 12 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT13] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT13_OFS       (13)                            /*!< PROT13 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT13           ((uint32_t)0x00002000)          /*!< Protects Sector 13 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT14] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT14_OFS       (14)                            /*!< PROT14 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT14           ((uint32_t)0x00004000)          /*!< Protects Sector 14 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT15] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT15_OFS       (15)                            /*!< PROT15 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT15           ((uint32_t)0x00008000)          /*!< Protects Sector 15 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT16] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT16_OFS       (16)                            /*!< PROT16 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT16           ((uint32_t)0x00010000)          /*!< Protects Sector 16 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT17] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT17_OFS       (17)                            /*!< PROT17 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT17           ((uint32_t)0x00020000)          /*!< Protects Sector 17 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT18] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT18_OFS       (18)                            /*!< PROT18 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT18           ((uint32_t)0x00040000)          /*!< Protects Sector 18 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT19] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT19_OFS       (19)                            /*!< PROT19 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT19           ((uint32_t)0x00080000)          /*!< Protects Sector 19 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT20] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT20_OFS       (20)                            /*!< PROT20 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT20           ((uint32_t)0x00100000)          /*!< Protects Sector 20 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT21] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT21_OFS       (21)                            /*!< PROT21 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT21           ((uint32_t)0x00200000)          /*!< Protects Sector 21 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT22] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT22_OFS       (22)                            /*!< PROT22 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT22           ((uint32_t)0x00400000)          /*!< Protects Sector 22 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT23] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT23_OFS       (23)                            /*!< PROT23 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT23           ((uint32_t)0x00800000)          /*!< Protects Sector 23 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT24] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT24_OFS       (24)                            /*!< PROT24 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT24           ((uint32_t)0x01000000)          /*!< Protects Sector 24 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT25] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT25_OFS       (25)                            /*!< PROT25 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT25           ((uint32_t)0x02000000)          /*!< Protects Sector 25 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT26] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT26_OFS       (26)                            /*!< PROT26 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT26           ((uint32_t)0x04000000)          /*!< Protects Sector 26 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT27] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT27_OFS       (27)                            /*!< PROT27 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT27           ((uint32_t)0x08000000)          /*!< Protects Sector 27 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT28] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT28_OFS       (28)                            /*!< PROT28 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT28           ((uint32_t)0x10000000)          /*!< Protects Sector 28 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT29] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT29_OFS       (29)                            /*!< PROT29 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT29           ((uint32_t)0x20000000)          /*!< Protects Sector 29 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT30] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT30_OFS       (30)                            /*!< PROT30 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT30           ((uint32_t)0x40000000)          /*!< Protects Sector 30 from program or erase operations */
N/* FLCTL_BANK1_MAIN_WEPROT[PROT31] Bits */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT31_OFS       (31)                            /*!< PROT31 Bit Offset */
N#define FLCTL_BANK1_MAIN_WEPROT_PROT31           ((uint32_t)0x80000000)          /*!< Protects Sector 31 from program or erase operations */
N/* FLCTL_BMRK_CTLSTAT[I_BMRK] Bits */
N#define FLCTL_BMRK_CTLSTAT_I_BMRK_OFS            ( 0)                            /*!< I_BMRK Bit Offset */
N#define FLCTL_BMRK_CTLSTAT_I_BMRK                ((uint32_t)0x00000001)          
N/* FLCTL_BMRK_CTLSTAT[D_BMRK] Bits */
N#define FLCTL_BMRK_CTLSTAT_D_BMRK_OFS            ( 1)                            /*!< D_BMRK Bit Offset */
N#define FLCTL_BMRK_CTLSTAT_D_BMRK                ((uint32_t)0x00000002)          
N/* FLCTL_BMRK_CTLSTAT[CMP_EN] Bits */
N#define FLCTL_BMRK_CTLSTAT_CMP_EN_OFS            ( 2)                            /*!< CMP_EN Bit Offset */
N#define FLCTL_BMRK_CTLSTAT_CMP_EN                ((uint32_t)0x00000004)          
N/* FLCTL_BMRK_CTLSTAT[CMP_SEL] Bits */
N#define FLCTL_BMRK_CTLSTAT_CMP_SEL_OFS           ( 3)                            /*!< CMP_SEL Bit Offset */
N#define FLCTL_BMRK_CTLSTAT_CMP_SEL               ((uint32_t)0x00000008)          
N/* FLCTL_IFG[RDBRST] Bits */
N#define FLCTL_IFG_RDBRST_OFS                     ( 0)                            /*!< RDBRST Bit Offset */
N#define FLCTL_IFG_RDBRST                         ((uint32_t)0x00000001)          
N/* FLCTL_IFG[AVPRE] Bits */
N#define FLCTL_IFG_AVPRE_OFS                      ( 1)                            /*!< AVPRE Bit Offset */
N#define FLCTL_IFG_AVPRE                          ((uint32_t)0x00000002)          
N/* FLCTL_IFG[AVPST] Bits */
N#define FLCTL_IFG_AVPST_OFS                      ( 2)                            /*!< AVPST Bit Offset */
N#define FLCTL_IFG_AVPST                          ((uint32_t)0x00000004)          
N/* FLCTL_IFG[PRG] Bits */
N#define FLCTL_IFG_PRG_OFS                        ( 3)                            /*!< PRG Bit Offset */
N#define FLCTL_IFG_PRG                            ((uint32_t)0x00000008)          
N/* FLCTL_IFG[PRGB] Bits */
N#define FLCTL_IFG_PRGB_OFS                       ( 4)                            /*!< PRGB Bit Offset */
N#define FLCTL_IFG_PRGB                           ((uint32_t)0x00000010)          
N/* FLCTL_IFG[ERASE] Bits */
N#define FLCTL_IFG_ERASE_OFS                      ( 5)                            /*!< ERASE Bit Offset */
N#define FLCTL_IFG_ERASE                          ((uint32_t)0x00000020)          
N/* FLCTL_IFG[BMRK] Bits */
N#define FLCTL_IFG_BMRK_OFS                       ( 8)                            /*!< BMRK Bit Offset */
N#define FLCTL_IFG_BMRK                           ((uint32_t)0x00000100)          
N/* FLCTL_IFG[PRG_ERR] Bits */
N#define FLCTL_IFG_PRG_ERR_OFS                    ( 9)                            /*!< PRG_ERR Bit Offset */
N#define FLCTL_IFG_PRG_ERR                        ((uint32_t)0x00000200)          
N/* FLCTL_IE[RDBRST] Bits */
N#define FLCTL_IE_RDBRST_OFS                      ( 0)                            /*!< RDBRST Bit Offset */
N#define FLCTL_IE_RDBRST                          ((uint32_t)0x00000001)          
N/* FLCTL_IE[AVPRE] Bits */
N#define FLCTL_IE_AVPRE_OFS                       ( 1)                            /*!< AVPRE Bit Offset */
N#define FLCTL_IE_AVPRE                           ((uint32_t)0x00000002)          
N/* FLCTL_IE[AVPST] Bits */
N#define FLCTL_IE_AVPST_OFS                       ( 2)                            /*!< AVPST Bit Offset */
N#define FLCTL_IE_AVPST                           ((uint32_t)0x00000004)          
N/* FLCTL_IE[PRG] Bits */
N#define FLCTL_IE_PRG_OFS                         ( 3)                            /*!< PRG Bit Offset */
N#define FLCTL_IE_PRG                             ((uint32_t)0x00000008)          
N/* FLCTL_IE[PRGB] Bits */
N#define FLCTL_IE_PRGB_OFS                        ( 4)                            /*!< PRGB Bit Offset */
N#define FLCTL_IE_PRGB                            ((uint32_t)0x00000010)          
N/* FLCTL_IE[ERASE] Bits */
N#define FLCTL_IE_ERASE_OFS                       ( 5)                            /*!< ERASE Bit Offset */
N#define FLCTL_IE_ERASE                           ((uint32_t)0x00000020)          
N/* FLCTL_IE[BMRK] Bits */
N#define FLCTL_IE_BMRK_OFS                        ( 8)                            /*!< BMRK Bit Offset */
N#define FLCTL_IE_BMRK                            ((uint32_t)0x00000100)          
N/* FLCTL_IE[PRG_ERR] Bits */
N#define FLCTL_IE_PRG_ERR_OFS                     ( 9)                            /*!< PRG_ERR Bit Offset */
N#define FLCTL_IE_PRG_ERR                         ((uint32_t)0x00000200)          
N/* FLCTL_CLRIFG[RDBRST] Bits */
N#define FLCTL_CLRIFG_RDBRST_OFS                  ( 0)                            /*!< RDBRST Bit Offset */
N#define FLCTL_CLRIFG_RDBRST                      ((uint32_t)0x00000001)          
N/* FLCTL_CLRIFG[AVPRE] Bits */
N#define FLCTL_CLRIFG_AVPRE_OFS                   ( 1)                            /*!< AVPRE Bit Offset */
N#define FLCTL_CLRIFG_AVPRE                       ((uint32_t)0x00000002)          
N/* FLCTL_CLRIFG[AVPST] Bits */
N#define FLCTL_CLRIFG_AVPST_OFS                   ( 2)                            /*!< AVPST Bit Offset */
N#define FLCTL_CLRIFG_AVPST                       ((uint32_t)0x00000004)          
N/* FLCTL_CLRIFG[PRG] Bits */
N#define FLCTL_CLRIFG_PRG_OFS                     ( 3)                            /*!< PRG Bit Offset */
N#define FLCTL_CLRIFG_PRG                         ((uint32_t)0x00000008)          
N/* FLCTL_CLRIFG[PRGB] Bits */
N#define FLCTL_CLRIFG_PRGB_OFS                    ( 4)                            /*!< PRGB Bit Offset */
N#define FLCTL_CLRIFG_PRGB                        ((uint32_t)0x00000010)          
N/* FLCTL_CLRIFG[ERASE] Bits */
N#define FLCTL_CLRIFG_ERASE_OFS                   ( 5)                            /*!< ERASE Bit Offset */
N#define FLCTL_CLRIFG_ERASE                       ((uint32_t)0x00000020)          
N/* FLCTL_CLRIFG[BMRK] Bits */
N#define FLCTL_CLRIFG_BMRK_OFS                    ( 8)                            /*!< BMRK Bit Offset */
N#define FLCTL_CLRIFG_BMRK                        ((uint32_t)0x00000100)          
N/* FLCTL_CLRIFG[PRG_ERR] Bits */
N#define FLCTL_CLRIFG_PRG_ERR_OFS                 ( 9)                            /*!< PRG_ERR Bit Offset */
N#define FLCTL_CLRIFG_PRG_ERR                     ((uint32_t)0x00000200)          
N/* FLCTL_SETIFG[RDBRST] Bits */
N#define FLCTL_SETIFG_RDBRST_OFS                  ( 0)                            /*!< RDBRST Bit Offset */
N#define FLCTL_SETIFG_RDBRST                      ((uint32_t)0x00000001)          
N/* FLCTL_SETIFG[AVPRE] Bits */
N#define FLCTL_SETIFG_AVPRE_OFS                   ( 1)                            /*!< AVPRE Bit Offset */
N#define FLCTL_SETIFG_AVPRE                       ((uint32_t)0x00000002)          
N/* FLCTL_SETIFG[AVPST] Bits */
N#define FLCTL_SETIFG_AVPST_OFS                   ( 2)                            /*!< AVPST Bit Offset */
N#define FLCTL_SETIFG_AVPST                       ((uint32_t)0x00000004)          
N/* FLCTL_SETIFG[PRG] Bits */
N#define FLCTL_SETIFG_PRG_OFS                     ( 3)                            /*!< PRG Bit Offset */
N#define FLCTL_SETIFG_PRG                         ((uint32_t)0x00000008)          
N/* FLCTL_SETIFG[PRGB] Bits */
N#define FLCTL_SETIFG_PRGB_OFS                    ( 4)                            /*!< PRGB Bit Offset */
N#define FLCTL_SETIFG_PRGB                        ((uint32_t)0x00000010)          
N/* FLCTL_SETIFG[ERASE] Bits */
N#define FLCTL_SETIFG_ERASE_OFS                   ( 5)                            /*!< ERASE Bit Offset */
N#define FLCTL_SETIFG_ERASE                       ((uint32_t)0x00000020)          
N/* FLCTL_SETIFG[BMRK] Bits */
N#define FLCTL_SETIFG_BMRK_OFS                    ( 8)                            /*!< BMRK Bit Offset */
N#define FLCTL_SETIFG_BMRK                        ((uint32_t)0x00000100)          
N/* FLCTL_SETIFG[PRG_ERR] Bits */
N#define FLCTL_SETIFG_PRG_ERR_OFS                 ( 9)                            /*!< PRG_ERR Bit Offset */
N#define FLCTL_SETIFG_PRG_ERR                     ((uint32_t)0x00000200)          
N/* FLCTL_READ_TIMCTL[SETUP] Bits */
N#define FLCTL_READ_TIMCTL_SETUP_OFS              ( 0)                            /*!< SETUP Bit Offset */
N#define FLCTL_READ_TIMCTL_SETUP_MASK             ((uint32_t)0x000000FF)          /*!< SETUP Bit Mask */
N/* FLCTL_READ_TIMCTL[IREF_BOOST1] Bits */
N#define FLCTL_READ_TIMCTL_IREF_BOOST1_OFS        (12)                            /*!< IREF_BOOST1 Bit Offset */
N#define FLCTL_READ_TIMCTL_IREF_BOOST1_MASK       ((uint32_t)0x0000F000)          /*!< IREF_BOOST1 Bit Mask */
N/* FLCTL_READ_TIMCTL[SETUP_LONG] Bits */
N#define FLCTL_READ_TIMCTL_SETUP_LONG_OFS         (16)                            /*!< SETUP_LONG Bit Offset */
N#define FLCTL_READ_TIMCTL_SETUP_LONG_MASK        ((uint32_t)0x00FF0000)          /*!< SETUP_LONG Bit Mask */
N/* FLCTL_READMARGIN_TIMCTL[SETUP] Bits */
N#define FLCTL_READMARGIN_TIMCTL_SETUP_OFS        ( 0)                            /*!< SETUP Bit Offset */
N#define FLCTL_READMARGIN_TIMCTL_SETUP_MASK       ((uint32_t)0x000000FF)          /*!< SETUP Bit Mask */
N/* FLCTL_PRGVER_TIMCTL[SETUP] Bits */
N#define FLCTL_PRGVER_TIMCTL_SETUP_OFS            ( 0)                            /*!< SETUP Bit Offset */
N#define FLCTL_PRGVER_TIMCTL_SETUP_MASK           ((uint32_t)0x000000FF)          /*!< SETUP Bit Mask */
N/* FLCTL_PRGVER_TIMCTL[ACTIVE] Bits */
N#define FLCTL_PRGVER_TIMCTL_ACTIVE_OFS           ( 8)                            /*!< ACTIVE Bit Offset */
N#define FLCTL_PRGVER_TIMCTL_ACTIVE_MASK          ((uint32_t)0x00000F00)          /*!< ACTIVE Bit Mask */
N/* FLCTL_PRGVER_TIMCTL[HOLD] Bits */
N#define FLCTL_PRGVER_TIMCTL_HOLD_OFS             (12)                            /*!< HOLD Bit Offset */
N#define FLCTL_PRGVER_TIMCTL_HOLD_MASK            ((uint32_t)0x0000F000)          /*!< HOLD Bit Mask */
N/* FLCTL_ERSVER_TIMCTL[SETUP] Bits */
N#define FLCTL_ERSVER_TIMCTL_SETUP_OFS            ( 0)                            /*!< SETUP Bit Offset */
N#define FLCTL_ERSVER_TIMCTL_SETUP_MASK           ((uint32_t)0x000000FF)          /*!< SETUP Bit Mask */
N/* FLCTL_LKGVER_TIMCTL[SETUP] Bits */
N#define FLCTL_LKGVER_TIMCTL_SETUP_OFS            ( 0)                            /*!< SETUP Bit Offset */
N#define FLCTL_LKGVER_TIMCTL_SETUP_MASK           ((uint32_t)0x000000FF)          /*!< SETUP Bit Mask */
N/* FLCTL_PROGRAM_TIMCTL[SETUP] Bits */
N#define FLCTL_PROGRAM_TIMCTL_SETUP_OFS           ( 0)                            /*!< SETUP Bit Offset */
N#define FLCTL_PROGRAM_TIMCTL_SETUP_MASK          ((uint32_t)0x000000FF)          /*!< SETUP Bit Mask */
N/* FLCTL_PROGRAM_TIMCTL[ACTIVE] Bits */
N#define FLCTL_PROGRAM_TIMCTL_ACTIVE_OFS          ( 8)                            /*!< ACTIVE Bit Offset */
N#define FLCTL_PROGRAM_TIMCTL_ACTIVE_MASK         ((uint32_t)0x0FFFFF00)          /*!< ACTIVE Bit Mask */
N/* FLCTL_PROGRAM_TIMCTL[HOLD] Bits */
N#define FLCTL_PROGRAM_TIMCTL_HOLD_OFS            (28)                            /*!< HOLD Bit Offset */
N#define FLCTL_PROGRAM_TIMCTL_HOLD_MASK           ((uint32_t)0xF0000000)          /*!< HOLD Bit Mask */
N/* FLCTL_ERASE_TIMCTL[SETUP] Bits */
N#define FLCTL_ERASE_TIMCTL_SETUP_OFS             ( 0)                            /*!< SETUP Bit Offset */
N#define FLCTL_ERASE_TIMCTL_SETUP_MASK            ((uint32_t)0x000000FF)          /*!< SETUP Bit Mask */
N/* FLCTL_ERASE_TIMCTL[ACTIVE] Bits */
N#define FLCTL_ERASE_TIMCTL_ACTIVE_OFS            ( 8)                            /*!< ACTIVE Bit Offset */
N#define FLCTL_ERASE_TIMCTL_ACTIVE_MASK           ((uint32_t)0x0FFFFF00)          /*!< ACTIVE Bit Mask */
N/* FLCTL_ERASE_TIMCTL[HOLD] Bits */
N#define FLCTL_ERASE_TIMCTL_HOLD_OFS              (28)                            /*!< HOLD Bit Offset */
N#define FLCTL_ERASE_TIMCTL_HOLD_MASK             ((uint32_t)0xF0000000)          /*!< HOLD Bit Mask */
N/* FLCTL_MASSERASE_TIMCTL[BOOST_ACTIVE] Bits */
N#define FLCTL_MASSERASE_TIMCTL_BOOST_ACTIVE_OFS  ( 0)                            /*!< BOOST_ACTIVE Bit Offset */
N#define FLCTL_MASSERASE_TIMCTL_BOOST_ACTIVE_MASK ((uint32_t)0x000000FF)          /*!< BOOST_ACTIVE Bit Mask */
N/* FLCTL_MASSERASE_TIMCTL[BOOST_HOLD] Bits */
N#define FLCTL_MASSERASE_TIMCTL_BOOST_HOLD_OFS    ( 8)                            /*!< BOOST_HOLD Bit Offset */
N#define FLCTL_MASSERASE_TIMCTL_BOOST_HOLD_MASK   ((uint32_t)0x0000FF00)          /*!< BOOST_HOLD Bit Mask */
N/* FLCTL_BURSTPRG_TIMCTL[ACTIVE] Bits */
N#define FLCTL_BURSTPRG_TIMCTL_ACTIVE_OFS         ( 8)                            /*!< ACTIVE Bit Offset */
N#define FLCTL_BURSTPRG_TIMCTL_ACTIVE_MASK        ((uint32_t)0x0FFFFF00)          /*!< ACTIVE Bit Mask */
N
N/******************************************************************************
N* FL_BOOTOVER_MAILBOX Bits
N******************************************************************************/
N
N/******************************************************************************
N* FPB Bits
N******************************************************************************/
N
N
N/******************************************************************************
N* FPU Bits
N******************************************************************************/
N
N
N/******************************************************************************
N* ITM Bits
N******************************************************************************/
N
N
N/******************************************************************************
N* MPU Bits
N******************************************************************************/
N
N/* Pre-defined bitfield values */
N
N/*  MPU_RASR_SIZE Bitfield Bits */
N#define MPU_RASR_SIZE__32B                       ((uint32_t)0x00000008)          /*!< 32B */
N#define MPU_RASR_SIZE__64B                       ((uint32_t)0x0000000A)          /*!< 64B */
N#define MPU_RASR_SIZE__128B                      ((uint32_t)0x0000000C)          /*!< 128B */
N#define MPU_RASR_SIZE__256B                      ((uint32_t)0x0000000E)          /*!< 256B */
N#define MPU_RASR_SIZE__512B                      ((uint32_t)0x00000010)          /*!< 512B */
N#define MPU_RASR_SIZE__1K                        ((uint32_t)0x00000012)          /*!< 1KB */
N#define MPU_RASR_SIZE__2K                        ((uint32_t)0x00000014)          /*!< 2KB */
N#define MPU_RASR_SIZE__4K                        ((uint32_t)0x00000016)          /*!< 4KB */
N#define MPU_RASR_SIZE__8K                        ((uint32_t)0x00000018)          /*!< 8KB */
N#define MPU_RASR_SIZE__16K                       ((uint32_t)0x0000001A)          /*!< 16KB */
N#define MPU_RASR_SIZE__32K                       ((uint32_t)0x0000001C)          /*!< 32KB */
N#define MPU_RASR_SIZE__64K                       ((uint32_t)0x0000001E)          /*!< 64KB */
N#define MPU_RASR_SIZE__128K                      ((uint32_t)0x00000020)          /*!< 128KB */
N#define MPU_RASR_SIZE__256K                      ((uint32_t)0x00000022)          /*!< 256KB */
N#define MPU_RASR_SIZE__512K                      ((uint32_t)0x00000024)          /*!< 512KB */
N#define MPU_RASR_SIZE__1M                        ((uint32_t)0x00000026)          /*!< 1MB */
N#define MPU_RASR_SIZE__2M                        ((uint32_t)0x00000028)          /*!< 2MB */
N#define MPU_RASR_SIZE__4M                        ((uint32_t)0x0000002A)          /*!< 4MB */
N#define MPU_RASR_SIZE__8M                        ((uint32_t)0x0000002C)          /*!< 8MB */
N#define MPU_RASR_SIZE__16M                       ((uint32_t)0x0000002E)          /*!< 16MB */
N#define MPU_RASR_SIZE__32M                       ((uint32_t)0x00000030)          /*!< 32MB */
N#define MPU_RASR_SIZE__64M                       ((uint32_t)0x00000032)          /*!< 64MB */
N#define MPU_RASR_SIZE__128M                      ((uint32_t)0x00000034)          /*!< 128MB */
N#define MPU_RASR_SIZE__256M                      ((uint32_t)0x00000036)          /*!< 256MB */
N#define MPU_RASR_SIZE__512M                      ((uint32_t)0x00000038)          /*!< 512MB */
N#define MPU_RASR_SIZE__1G                        ((uint32_t)0x0000003A)          /*!< 1GB */
N#define MPU_RASR_SIZE__2G                        ((uint32_t)0x0000003C)          /*!< 2GB */
N#define MPU_RASR_SIZE__4G                        ((uint32_t)0x0000003E)          /*!< 4GB */
N
N/*  MPU_RASR_AP Bitfield Bits */
N#define MPU_RASR_AP_PRV_NO_USR_NO                ((uint32_t)0x00000000)          /*!< Privileged permissions: No access. User permissions: No access. */
N#define MPU_RASR_AP_PRV_RW_USR_NO                ((uint32_t)0x01000000)          /*!< Privileged permissions: Read-write. User permissions: No access. */
N#define MPU_RASR_AP_PRV_RW_USR_RO                ((uint32_t)0x02000000)          /*!< Privileged permissions: Read-write. User permissions: Read-only. */
N#define MPU_RASR_AP_PRV_RW_USR_RW                ((uint32_t)0x03000000)          /*!< Privileged permissions: Read-write. User permissions: Read-write. */
N#define MPU_RASR_AP_PRV_RO_USR_NO                ((uint32_t)0x05000000)          /*!< Privileged permissions: Read-only. User permissions: No access. */
N#define MPU_RASR_AP_PRV_RO_USR_RO                ((uint32_t)0x06000000)          /*!< Privileged permissions: Read-only. User permissions: Read-only. */
N
N/* MPU_RASR_XN Bitfield Bits */
N#define MPU_RASR_AP_EXEC                         ((uint32_t)0x00000000)          /*!< Instruction access enabled */
N#define MPU_RASR_AP_NOEXEC                       ((uint32_t)0x10000000)          /*!< Instruction access disabled */
N
N
N/******************************************************************************
N* NVIC Bits
N******************************************************************************/
N
N/* NVIC_IPR0[NVIC_IPR0_PRI_0] Bits */
N#define NVIC_IPR0_PRI_0_OFS                      ( 0)                            /*!< PRI_0 Offset */
N#define NVIC_IPR0_PRI_0_M                        ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR0[NVIC_IPR0_PRI_1] Bits */
N#define NVIC_IPR0_PRI_1_OFS                      ( 8)                            /*!< PRI_1 Offset */
N#define NVIC_IPR0_PRI_1_M                        ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR0[NVIC_IPR0_PRI_2] Bits */
N#define NVIC_IPR0_PRI_2_OFS                      (16)                            /*!< PRI_2 Offset */
N#define NVIC_IPR0_PRI_2_M                        ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR0[NVIC_IPR0_PRI_3] Bits */
N#define NVIC_IPR0_PRI_3_OFS                      (24)                            /*!< PRI_3 Offset */
N#define NVIC_IPR0_PRI_3_M                        ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR1[NVIC_IPR1_PRI_4] Bits */
N#define NVIC_IPR1_PRI_4_OFS                      ( 0)                            /*!< PRI_4 Offset */
N#define NVIC_IPR1_PRI_4_M                        ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR1[NVIC_IPR1_PRI_5] Bits */
N#define NVIC_IPR1_PRI_5_OFS                      ( 8)                            /*!< PRI_5 Offset */
N#define NVIC_IPR1_PRI_5_M                        ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR1[NVIC_IPR1_PRI_6] Bits */
N#define NVIC_IPR1_PRI_6_OFS                      (16)                            /*!< PRI_6 Offset */
N#define NVIC_IPR1_PRI_6_M                        ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR1[NVIC_IPR1_PRI_7] Bits */
N#define NVIC_IPR1_PRI_7_OFS                      (24)                            /*!< PRI_7 Offset */
N#define NVIC_IPR1_PRI_7_M                        ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR2[NVIC_IPR2_PRI_8] Bits */
N#define NVIC_IPR2_PRI_8_OFS                      ( 0)                            /*!< PRI_8 Offset */
N#define NVIC_IPR2_PRI_8_M                        ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR2[NVIC_IPR2_PRI_9] Bits */
N#define NVIC_IPR2_PRI_9_OFS                      ( 8)                            /*!< PRI_9 Offset */
N#define NVIC_IPR2_PRI_9_M                        ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR2[NVIC_IPR2_PRI_10] Bits */
N#define NVIC_IPR2_PRI_10_OFS                     (16)                            /*!< PRI_10 Offset */
N#define NVIC_IPR2_PRI_10_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR2[NVIC_IPR2_PRI_11] Bits */
N#define NVIC_IPR2_PRI_11_OFS                     (24)                            /*!< PRI_11 Offset */
N#define NVIC_IPR2_PRI_11_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR3[NVIC_IPR3_PRI_12] Bits */
N#define NVIC_IPR3_PRI_12_OFS                     ( 0)                            /*!< PRI_12 Offset */
N#define NVIC_IPR3_PRI_12_M                       ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR3[NVIC_IPR3_PRI_13] Bits */
N#define NVIC_IPR3_PRI_13_OFS                     ( 8)                            /*!< PRI_13 Offset */
N#define NVIC_IPR3_PRI_13_M                       ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR3[NVIC_IPR3_PRI_14] Bits */
N#define NVIC_IPR3_PRI_14_OFS                     (16)                            /*!< PRI_14 Offset */
N#define NVIC_IPR3_PRI_14_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR3[NVIC_IPR3_PRI_15] Bits */
N#define NVIC_IPR3_PRI_15_OFS                     (24)                            /*!< PRI_15 Offset */
N#define NVIC_IPR3_PRI_15_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR4[NVIC_IPR4_PRI_16] Bits */
N#define NVIC_IPR4_PRI_16_OFS                     ( 0)                            /*!< PRI_16 Offset */
N#define NVIC_IPR4_PRI_16_M                       ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR4[NVIC_IPR4_PRI_17] Bits */
N#define NVIC_IPR4_PRI_17_OFS                     ( 8)                            /*!< PRI_17 Offset */
N#define NVIC_IPR4_PRI_17_M                       ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR4[NVIC_IPR4_PRI_18] Bits */
N#define NVIC_IPR4_PRI_18_OFS                     (16)                            /*!< PRI_18 Offset */
N#define NVIC_IPR4_PRI_18_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR4[NVIC_IPR4_PRI_19] Bits */
N#define NVIC_IPR4_PRI_19_OFS                     (24)                            /*!< PRI_19 Offset */
N#define NVIC_IPR4_PRI_19_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR5[NVIC_IPR5_PRI_20] Bits */
N#define NVIC_IPR5_PRI_20_OFS                     ( 0)                            /*!< PRI_20 Offset */
N#define NVIC_IPR5_PRI_20_M                       ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR5[NVIC_IPR5_PRI_21] Bits */
N#define NVIC_IPR5_PRI_21_OFS                     ( 8)                            /*!< PRI_21 Offset */
N#define NVIC_IPR5_PRI_21_M                       ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR5[NVIC_IPR5_PRI_22] Bits */
N#define NVIC_IPR5_PRI_22_OFS                     (16)                            /*!< PRI_22 Offset */
N#define NVIC_IPR5_PRI_22_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR5[NVIC_IPR5_PRI_23] Bits */
N#define NVIC_IPR5_PRI_23_OFS                     (24)                            /*!< PRI_23 Offset */
N#define NVIC_IPR5_PRI_23_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR6[NVIC_IPR6_PRI_24] Bits */
N#define NVIC_IPR6_PRI_24_OFS                     ( 0)                            /*!< PRI_24 Offset */
N#define NVIC_IPR6_PRI_24_M                       ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR6[NVIC_IPR6_PRI_25] Bits */
N#define NVIC_IPR6_PRI_25_OFS                     ( 8)                            /*!< PRI_25 Offset */
N#define NVIC_IPR6_PRI_25_M                       ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR6[NVIC_IPR6_PRI_26] Bits */
N#define NVIC_IPR6_PRI_26_OFS                     (16)                            /*!< PRI_26 Offset */
N#define NVIC_IPR6_PRI_26_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR6[NVIC_IPR6_PRI_27] Bits */
N#define NVIC_IPR6_PRI_27_OFS                     (24)                            /*!< PRI_27 Offset */
N#define NVIC_IPR6_PRI_27_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR7[NVIC_IPR7_PRI_28] Bits */
N#define NVIC_IPR7_PRI_28_OFS                     ( 0)                            /*!< PRI_28 Offset */
N#define NVIC_IPR7_PRI_28_M                       ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR7[NVIC_IPR7_PRI_29] Bits */
N#define NVIC_IPR7_PRI_29_OFS                     ( 8)                            /*!< PRI_29 Offset */
N#define NVIC_IPR7_PRI_29_M                       ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR7[NVIC_IPR7_PRI_30] Bits */
N#define NVIC_IPR7_PRI_30_OFS                     (16)                            /*!< PRI_30 Offset */
N#define NVIC_IPR7_PRI_30_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR7[NVIC_IPR7_PRI_31] Bits */
N#define NVIC_IPR7_PRI_31_OFS                     (24)                            /*!< PRI_31 Offset */
N#define NVIC_IPR7_PRI_31_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR8[NVIC_IPR8_PRI_32] Bits */
N#define NVIC_IPR8_PRI_32_OFS                     ( 0)                            /*!< PRI_32 Offset */
N#define NVIC_IPR8_PRI_32_M                       ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR8[NVIC_IPR8_PRI_33] Bits */
N#define NVIC_IPR8_PRI_33_OFS                     ( 8)                            /*!< PRI_33 Offset */
N#define NVIC_IPR8_PRI_33_M                       ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR8[NVIC_IPR8_PRI_34] Bits */
N#define NVIC_IPR8_PRI_34_OFS                     (16)                            /*!< PRI_34 Offset */
N#define NVIC_IPR8_PRI_34_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR8[NVIC_IPR8_PRI_35] Bits */
N#define NVIC_IPR8_PRI_35_OFS                     (24)                            /*!< PRI_35 Offset */
N#define NVIC_IPR8_PRI_35_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR9[NVIC_IPR9_PRI_36] Bits */
N#define NVIC_IPR9_PRI_36_OFS                     ( 0)                            /*!< PRI_36 Offset */
N#define NVIC_IPR9_PRI_36_M                       ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR9[NVIC_IPR9_PRI_37] Bits */
N#define NVIC_IPR9_PRI_37_OFS                     ( 8)                            /*!< PRI_37 Offset */
N#define NVIC_IPR9_PRI_37_M                       ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR9[NVIC_IPR9_PRI_38] Bits */
N#define NVIC_IPR9_PRI_38_OFS                     (16)                            /*!< PRI_38 Offset */
N#define NVIC_IPR9_PRI_38_M                       ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR9[NVIC_IPR9_PRI_39] Bits */
N#define NVIC_IPR9_PRI_39_OFS                     (24)                            /*!< PRI_39 Offset */
N#define NVIC_IPR9_PRI_39_M                       ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR10[NVIC_IPR10_PRI_40] Bits */
N#define NVIC_IPR10_PRI_40_OFS                    ( 0)                            /*!< PRI_40 Offset */
N#define NVIC_IPR10_PRI_40_M                      ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR10[NVIC_IPR10_PRI_41] Bits */
N#define NVIC_IPR10_PRI_41_OFS                    ( 8)                            /*!< PRI_41 Offset */
N#define NVIC_IPR10_PRI_41_M                      ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR10[NVIC_IPR10_PRI_42] Bits */
N#define NVIC_IPR10_PRI_42_OFS                    (16)                            /*!< PRI_42 Offset */
N#define NVIC_IPR10_PRI_42_M                      ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR10[NVIC_IPR10_PRI_43] Bits */
N#define NVIC_IPR10_PRI_43_OFS                    (24)                            /*!< PRI_43 Offset */
N#define NVIC_IPR10_PRI_43_M                      ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR11[NVIC_IPR11_PRI_44] Bits */
N#define NVIC_IPR11_PRI_44_OFS                    ( 0)                            /*!< PRI_44 Offset */
N#define NVIC_IPR11_PRI_44_M                      ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR11[NVIC_IPR11_PRI_45] Bits */
N#define NVIC_IPR11_PRI_45_OFS                    ( 8)                            /*!< PRI_45 Offset */
N#define NVIC_IPR11_PRI_45_M                      ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR11[NVIC_IPR11_PRI_46] Bits */
N#define NVIC_IPR11_PRI_46_OFS                    (16)                            /*!< PRI_46 Offset */
N#define NVIC_IPR11_PRI_46_M                      ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR11[NVIC_IPR11_PRI_47] Bits */
N#define NVIC_IPR11_PRI_47_OFS                    (24)                            /*!< PRI_47 Offset */
N#define NVIC_IPR11_PRI_47_M                      ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR12[NVIC_IPR12_PRI_48] Bits */
N#define NVIC_IPR12_PRI_48_OFS                    ( 0)                            /*!< PRI_48 Offset */
N#define NVIC_IPR12_PRI_48_M                      ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR12[NVIC_IPR12_PRI_49] Bits */
N#define NVIC_IPR12_PRI_49_OFS                    ( 8)                            /*!< PRI_49 Offset */
N#define NVIC_IPR12_PRI_49_M                      ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR12[NVIC_IPR12_PRI_50] Bits */
N#define NVIC_IPR12_PRI_50_OFS                    (16)                            /*!< PRI_50 Offset */
N#define NVIC_IPR12_PRI_50_M                      ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR12[NVIC_IPR12_PRI_51] Bits */
N#define NVIC_IPR12_PRI_51_OFS                    (24)                            /*!< PRI_51 Offset */
N#define NVIC_IPR12_PRI_51_M                      ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR13[NVIC_IPR13_PRI_52] Bits */
N#define NVIC_IPR13_PRI_52_OFS                    ( 0)                            /*!< PRI_52 Offset */
N#define NVIC_IPR13_PRI_52_M                      ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR13[NVIC_IPR13_PRI_53] Bits */
N#define NVIC_IPR13_PRI_53_OFS                    ( 8)                            /*!< PRI_53 Offset */
N#define NVIC_IPR13_PRI_53_M                      ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR13[NVIC_IPR13_PRI_54] Bits */
N#define NVIC_IPR13_PRI_54_OFS                    (16)                            /*!< PRI_54 Offset */
N#define NVIC_IPR13_PRI_54_M                      ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR13[NVIC_IPR13_PRI_55] Bits */
N#define NVIC_IPR13_PRI_55_OFS                    (24)                            /*!< PRI_55 Offset */
N#define NVIC_IPR13_PRI_55_M                      ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR14[NVIC_IPR14_PRI_56] Bits */
N#define NVIC_IPR14_PRI_56_OFS                    ( 0)                            /*!< PRI_56 Offset */
N#define NVIC_IPR14_PRI_56_M                      ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR14[NVIC_IPR14_PRI_57] Bits */
N#define NVIC_IPR14_PRI_57_OFS                    ( 8)                            /*!< PRI_57 Offset */
N#define NVIC_IPR14_PRI_57_M                      ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR14[NVIC_IPR14_PRI_58] Bits */
N#define NVIC_IPR14_PRI_58_OFS                    (16)                            /*!< PRI_58 Offset */
N#define NVIC_IPR14_PRI_58_M                      ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR14[NVIC_IPR14_PRI_59] Bits */
N#define NVIC_IPR14_PRI_59_OFS                    (24)                            /*!< PRI_59 Offset */
N#define NVIC_IPR14_PRI_59_M                      ((uint32_t)0xff000000)          /*  */
N/* NVIC_IPR15[NVIC_IPR15_PRI_60] Bits */
N#define NVIC_IPR15_PRI_60_OFS                    ( 0)                            /*!< PRI_60 Offset */
N#define NVIC_IPR15_PRI_60_M                      ((uint32_t)0x000000ff)          /*  */
N/* NVIC_IPR15[NVIC_IPR15_PRI_61] Bits */
N#define NVIC_IPR15_PRI_61_OFS                    ( 8)                            /*!< PRI_61 Offset */
N#define NVIC_IPR15_PRI_61_M                      ((uint32_t)0x0000ff00)          /*  */
N/* NVIC_IPR15[NVIC_IPR15_PRI_62] Bits */
N#define NVIC_IPR15_PRI_62_OFS                    (16)                            /*!< PRI_62 Offset */
N#define NVIC_IPR15_PRI_62_M                      ((uint32_t)0x00ff0000)          /*  */
N/* NVIC_IPR15[NVIC_IPR15_PRI_63] Bits */
N#define NVIC_IPR15_PRI_63_OFS                    (24)                            /*!< PRI_63 Offset */
N#define NVIC_IPR15_PRI_63_M                      ((uint32_t)0xff000000)          /*  */
N
N
N/******************************************************************************
N* PCM Bits
N******************************************************************************/
N/* PCM_CTL0[AMR] Bits */
N#define PCM_CTL0_AMR_OFS                         ( 0)                            /*!< AMR Bit Offset */
N#define PCM_CTL0_AMR_MASK                        ((uint32_t)0x0000000F)          /*!< AMR Bit Mask */
N#define PCM_CTL0_AMR0                            ((uint32_t)0x00000001)          /*!< AMR Bit 0 */
N#define PCM_CTL0_AMR1                            ((uint32_t)0x00000002)          /*!< AMR Bit 1 */
N#define PCM_CTL0_AMR2                            ((uint32_t)0x00000004)          /*!< AMR Bit 2 */
N#define PCM_CTL0_AMR3                            ((uint32_t)0x00000008)          /*!< AMR Bit 3 */
N#define PCM_CTL0_AMR_0                           ((uint32_t)0x00000000)          /*!< LDO based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_AMR_1                           ((uint32_t)0x00000001)          /*!< LDO based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_AMR_4                           ((uint32_t)0x00000004)          /*!< DC-DC based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_AMR_5                           ((uint32_t)0x00000005)          /*!< DC-DC based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_AMR_8                           ((uint32_t)0x00000008)          /*!< Low-Frequency Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_AMR_9                           ((uint32_t)0x00000009)          /*!< Low-Frequency Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_AMR__AM_LDO_VCORE0              ((uint32_t)0x00000000)          /*!< LDO based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_AMR__AM_LDO_VCORE1              ((uint32_t)0x00000001)          /*!< LDO based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_AMR__AM_DCDC_VCORE0             ((uint32_t)0x00000004)          /*!< DC-DC based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_AMR__AM_DCDC_VCORE1             ((uint32_t)0x00000005)          /*!< DC-DC based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_AMR__AM_LF_VCORE0               ((uint32_t)0x00000008)          /*!< Low-Frequency Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_AMR__AM_LF_VCORE1               ((uint32_t)0x00000009)          /*!< Low-Frequency Active Mode at Core voltage setting 1. */
N/* PCM_CTL0[LPMR] Bits */
N#define PCM_CTL0_LPMR_OFS                        ( 4)                            /*!< LPMR Bit Offset */
N#define PCM_CTL0_LPMR_MASK                       ((uint32_t)0x000000F0)          /*!< LPMR Bit Mask */
N#define PCM_CTL0_LPMR0                           ((uint32_t)0x00000010)          /*!< LPMR Bit 0 */
N#define PCM_CTL0_LPMR1                           ((uint32_t)0x00000020)          /*!< LPMR Bit 1 */
N#define PCM_CTL0_LPMR2                           ((uint32_t)0x00000040)          /*!< LPMR Bit 2 */
N#define PCM_CTL0_LPMR3                           ((uint32_t)0x00000080)          /*!< LPMR Bit 3 */
N#define PCM_CTL0_LPMR_0                          ((uint32_t)0x00000000)          /*!< LPM3. Core voltage setting is similar to the mode from which LPM3 is  */
N                                                                                 /* entered. */
N#define PCM_CTL0_LPMR_10                         ((uint32_t)0x000000A0)          /*!< LPM3.5. Core voltage setting 0. */
N#define PCM_CTL0_LPMR_12                         ((uint32_t)0x000000C0)          /*!< LPM4.5 */
N#define PCM_CTL0_LPMR__LPM3                      ((uint32_t)0x00000000)          /*!< LPM3. Core voltage setting is similar to the mode from which LPM3 is  */
N                                                                                 /* entered. */
N#define PCM_CTL0_LPMR__LPM35                     ((uint32_t)0x000000A0)          /*!< LPM3.5. Core voltage setting 0. */
N#define PCM_CTL0_LPMR__LPM45                     ((uint32_t)0x000000C0)          /*!< LPM4.5 */
N/* PCM_CTL0[CPM] Bits */
N#define PCM_CTL0_CPM_OFS                         ( 8)                            /*!< CPM Bit Offset */
N#define PCM_CTL0_CPM_MASK                        ((uint32_t)0x00003F00)          /*!< CPM Bit Mask */
N#define PCM_CTL0_CPM0                            ((uint32_t)0x00000100)          /*!< CPM Bit 0 */
N#define PCM_CTL0_CPM1                            ((uint32_t)0x00000200)          /*!< CPM Bit 1 */
N#define PCM_CTL0_CPM2                            ((uint32_t)0x00000400)          /*!< CPM Bit 2 */
N#define PCM_CTL0_CPM3                            ((uint32_t)0x00000800)          /*!< CPM Bit 3 */
N#define PCM_CTL0_CPM4                            ((uint32_t)0x00001000)          /*!< CPM Bit 4 */
N#define PCM_CTL0_CPM5                            ((uint32_t)0x00002000)          /*!< CPM Bit 5 */
N#define PCM_CTL0_CPM_0                           ((uint32_t)0x00000000)          /*!< LDO based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_CPM_1                           ((uint32_t)0x00000100)          /*!< LDO based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_CPM_4                           ((uint32_t)0x00000400)          /*!< DC-DC based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_CPM_5                           ((uint32_t)0x00000500)          /*!< DC-DC based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_CPM_8                           ((uint32_t)0x00000800)          /*!< Low-Frequency Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_CPM_9                           ((uint32_t)0x00000900)          /*!< Low-Frequency Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_CPM_16                          ((uint32_t)0x00001000)          /*!< LDO based LPM0 at Core voltage setting 0. */
N#define PCM_CTL0_CPM_17                          ((uint32_t)0x00001100)          /*!< LDO based LPM0 at Core voltage setting 1. */
N#define PCM_CTL0_CPM_20                          ((uint32_t)0x00001400)          /*!< DC-DC based LPM0 at Core voltage setting 0. */
N#define PCM_CTL0_CPM_21                          ((uint32_t)0x00001500)          /*!< DC-DC based LPM0 at Core voltage setting 1. */
N#define PCM_CTL0_CPM_24                          ((uint32_t)0x00001800)          /*!< Low-Frequency LPM0 at Core voltage setting 0. */
N#define PCM_CTL0_CPM_25                          ((uint32_t)0x00001900)          /*!< Low-Frequency LPM0 at Core voltage setting 1. */
N#define PCM_CTL0_CPM_32                          ((uint32_t)0x00002000)          /*!< LPM3 */
N#define PCM_CTL0_CPM__AM_LDO_VCORE0              ((uint32_t)0x00000000)          /*!< LDO based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_CPM__AM_LDO_VCORE1              ((uint32_t)0x00000100)          /*!< LDO based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_CPM__AM_DCDC_VCORE0             ((uint32_t)0x00000400)          /*!< DC-DC based Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_CPM__AM_DCDC_VCORE1             ((uint32_t)0x00000500)          /*!< DC-DC based Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_CPM__AM_LF_VCORE0               ((uint32_t)0x00000800)          /*!< Low-Frequency Active Mode at Core voltage setting 0. */
N#define PCM_CTL0_CPM__AM_LF_VCORE1               ((uint32_t)0x00000900)          /*!< Low-Frequency Active Mode at Core voltage setting 1. */
N#define PCM_CTL0_CPM__LPM0_LDO_VCORE0            ((uint32_t)0x00001000)          /*!< LDO based LPM0 at Core voltage setting 0. */
N#define PCM_CTL0_CPM__LPM0_LDO_VCORE1            ((uint32_t)0x00001100)          /*!< LDO based LPM0 at Core voltage setting 1. */
N#define PCM_CTL0_CPM__LPM0_DCDC_VCORE0           ((uint32_t)0x00001400)          /*!< DC-DC based LPM0 at Core voltage setting 0. */
N#define PCM_CTL0_CPM__LPM0_DCDC_VCORE1           ((uint32_t)0x00001500)          /*!< DC-DC based LPM0 at Core voltage setting 1. */
N#define PCM_CTL0_CPM__LPM0_LF_VCORE0             ((uint32_t)0x00001800)          /*!< Low-Frequency LPM0 at Core voltage setting 0. */
N#define PCM_CTL0_CPM__LPM0_LF_VCORE1             ((uint32_t)0x00001900)          /*!< Low-Frequency LPM0 at Core voltage setting 1. */
N#define PCM_CTL0_CPM__LPM3                       ((uint32_t)0x00002000)          /*!< LPM3 */
N/* PCM_CTL0[KEY] Bits */
N#define PCM_CTL0_KEY_OFS                         (16)                            /*!< PCMKEY Bit Offset */
N#define PCM_CTL0_KEY_MASK                        ((uint32_t)0xFFFF0000)          /*!< PCMKEY Bit Mask */
N/* PCM_CTL1[LOCKLPM5] Bits */
N#define PCM_CTL1_LOCKLPM5_OFS                    ( 0)                            /*!< LOCKLPM5 Bit Offset */
N#define PCM_CTL1_LOCKLPM5                        ((uint32_t)0x00000001)          /*!< Lock LPM5 */
N/* PCM_CTL1[LOCKBKUP] Bits */
N#define PCM_CTL1_LOCKBKUP_OFS                    ( 1)                            /*!< LOCKBKUP Bit Offset */
N#define PCM_CTL1_LOCKBKUP                        ((uint32_t)0x00000002)          /*!< Lock Backup */
N/* PCM_CTL1[FORCE_LPM_ENTRY] Bits */
N#define PCM_CTL1_FORCE_LPM_ENTRY_OFS             ( 2)                            /*!< FORCE_LPM_ENTRY Bit Offset */
N#define PCM_CTL1_FORCE_LPM_ENTRY                 ((uint32_t)0x00000004)          /*!< Force LPM entry */
N/* PCM_CTL1[PMR_BUSY] Bits */
N#define PCM_CTL1_PMR_BUSY_OFS                    ( 8)                            /*!< PMR_BUSY Bit Offset */
N#define PCM_CTL1_PMR_BUSY                        ((uint32_t)0x00000100)          /*!< Power mode request busy flag */
N/* PCM_CTL1[KEY] Bits */
N#define PCM_CTL1_KEY_OFS                         (16)                            /*!< PCMKEY Bit Offset */
N#define PCM_CTL1_KEY_MASK                        ((uint32_t)0xFFFF0000)          /*!< PCMKEY Bit Mask */
N/* PCM_IE[LPM_INVALID_TR_IE] Bits */
N#define PCM_IE_LPM_INVALID_TR_IE_OFS             ( 0)                            /*!< LPM_INVALID_TR_IE Bit Offset */
N#define PCM_IE_LPM_INVALID_TR_IE                 ((uint32_t)0x00000001)          /*!< LPM invalid transition interrupt enable */
N/* PCM_IE[LPM_INVALID_CLK_IE] Bits */
N#define PCM_IE_LPM_INVALID_CLK_IE_OFS            ( 1)                            /*!< LPM_INVALID_CLK_IE Bit Offset */
N#define PCM_IE_LPM_INVALID_CLK_IE                ((uint32_t)0x00000002)          /*!< LPM invalid clock interrupt enable */
N/* PCM_IE[AM_INVALID_TR_IE] Bits */
N#define PCM_IE_AM_INVALID_TR_IE_OFS              ( 2)                            /*!< AM_INVALID_TR_IE Bit Offset */
N#define PCM_IE_AM_INVALID_TR_IE                  ((uint32_t)0x00000004)          /*!< Active mode invalid transition interrupt enable */
N/* PCM_IE[DCDC_ERROR_IE] Bits */
N#define PCM_IE_DCDC_ERROR_IE_OFS                 ( 6)                            /*!< DCDC_ERROR_IE Bit Offset */
N#define PCM_IE_DCDC_ERROR_IE                     ((uint32_t)0x00000040)          /*!< DC-DC error interrupt enable */
N/* PCM_IFG[LPM_INVALID_TR_IFG] Bits */
N#define PCM_IFG_LPM_INVALID_TR_IFG_OFS           ( 0)                            /*!< LPM_INVALID_TR_IFG Bit Offset */
N#define PCM_IFG_LPM_INVALID_TR_IFG               ((uint32_t)0x00000001)          /*!< LPM invalid transition flag */
N/* PCM_IFG[LPM_INVALID_CLK_IFG] Bits */
N#define PCM_IFG_LPM_INVALID_CLK_IFG_OFS          ( 1)                            /*!< LPM_INVALID_CLK_IFG Bit Offset */
N#define PCM_IFG_LPM_INVALID_CLK_IFG              ((uint32_t)0x00000002)          /*!< LPM invalid clock flag */
N/* PCM_IFG[AM_INVALID_TR_IFG] Bits */
N#define PCM_IFG_AM_INVALID_TR_IFG_OFS            ( 2)                            /*!< AM_INVALID_TR_IFG Bit Offset */
N#define PCM_IFG_AM_INVALID_TR_IFG                ((uint32_t)0x00000004)          /*!< Active mode invalid transition flag */
N/* PCM_IFG[DCDC_ERROR_IFG] Bits */
N#define PCM_IFG_DCDC_ERROR_IFG_OFS               ( 6)                            /*!< DCDC_ERROR_IFG Bit Offset */
N#define PCM_IFG_DCDC_ERROR_IFG                   ((uint32_t)0x00000040)          /*!< DC-DC error flag */
N/* PCM_CLRIFG[CLR_LPM_INVALID_TR_IFG] Bits */
N#define PCM_CLRIFG_CLR_LPM_INVALID_TR_IFG_OFS    ( 0)                            /*!< CLR_LPM_INVALID_TR_IFG Bit Offset */
N#define PCM_CLRIFG_CLR_LPM_INVALID_TR_IFG        ((uint32_t)0x00000001)          /*!< Clear LPM invalid transition flag */
N/* PCM_CLRIFG[CLR_LPM_INVALID_CLK_IFG] Bits */
N#define PCM_CLRIFG_CLR_LPM_INVALID_CLK_IFG_OFS   ( 1)                            /*!< CLR_LPM_INVALID_CLK_IFG Bit Offset */
N#define PCM_CLRIFG_CLR_LPM_INVALID_CLK_IFG       ((uint32_t)0x00000002)          /*!< Clear LPM invalid clock flag */
N/* PCM_CLRIFG[CLR_AM_INVALID_TR_IFG] Bits */
N#define PCM_CLRIFG_CLR_AM_INVALID_TR_IFG_OFS     ( 2)                            /*!< CLR_AM_INVALID_TR_IFG Bit Offset */
N#define PCM_CLRIFG_CLR_AM_INVALID_TR_IFG         ((uint32_t)0x00000004)          /*!< Clear active mode invalid transition flag */
N/* PCM_CLRIFG[CLR_DCDC_ERROR_IFG] Bits */
N#define PCM_CLRIFG_CLR_DCDC_ERROR_IFG_OFS        ( 6)                            /*!< CLR_DCDC_ERROR_IFG Bit Offset */
N#define PCM_CLRIFG_CLR_DCDC_ERROR_IFG            ((uint32_t)0x00000040)          /*!< Clear DC-DC error flag */
N/* Pre-defined bitfield values */
N#define PCM_CTL0_KEY_VAL                         ((uint32_t)0x695A0000)          /*!< PCM key value */
N#define PCM_CTL1_KEY_VAL                         ((uint32_t)0x695A0000)          /*!< PCM key value */
N
N
N/******************************************************************************
N* PMAP Bits
N******************************************************************************/
N/* PMAP_CTL[LOCKED] Bits */
N#define PMAP_CTL_LOCKED_OFS                      ( 0)                            /*!< PMAPLOCKED Bit Offset */
N#define PMAP_CTL_LOCKED                          ((uint16_t)0x0001)              /*!< Port mapping lock bit */
N/* PMAP_CTL[PRECFG] Bits */
N#define PMAP_CTL_PRECFG_OFS                      ( 1)                            /*!< PMAPRECFG Bit Offset */
N#define PMAP_CTL_PRECFG                          ((uint16_t)0x0002)              /*!< Port mapping reconfiguration control bit */
N/* Pre-defined bitfield values */
N#define PMAP_NONE                                            0
N#define PMAP_UCA0CLK                                         1
N#define PMAP_UCA0RXD                                         2
N#define PMAP_UCA0SOMI                                        2
N#define PMAP_UCA0TXD                                         3
N#define PMAP_UCA0SIMO                                        3
N#define PMAP_UCB0CLK                                         4
N#define PMAP_UCB0SDA                                         5
N#define PMAP_UCB0SIMO                                        5
N#define PMAP_UCB0SCL                                         6
N#define PMAP_UCB0SOMI                                        6
N#define PMAP_UCA1STE                                         7
N#define PMAP_UCA1CLK                                         8
N#define PMAP_UCA1RXD                                         9
N#define PMAP_UCA1SOMI                                        9
N#define PMAP_UCA1TXD                                         10
N#define PMAP_UCA1SIMO                                        10
N#define PMAP_UCA2STE                                         11
N#define PMAP_UCA2CLK                                         12
N#define PMAP_UCA2RXD                                         13
N#define PMAP_UCA2SOMI                                        13
N#define PMAP_UCA2TXD                                         14
N#define PMAP_UCA2SIMO                                        14
N#define PMAP_UCB2STE                                         15
N#define PMAP_UCB2CLK                                         16
N#define PMAP_UCB2SDA                                         17
N#define PMAP_UCB2SIMO                                        17
N#define PMAP_UCB2SCL                                         18
N#define PMAP_UCB2SOMI                                        18
N#define PMAP_TA0CCR0A                                        19
N#define PMAP_TA0CCR1A                                        20
N#define PMAP_TA0CCR2A                                        21
N#define PMAP_TA0CCR3A                                        22
N#define PMAP_TA0CCR4A                                        23
N#define PMAP_TA1CCR1A                                        24
N#define PMAP_TA1CCR2A                                        25
N#define PMAP_TA1CCR3A                                        26
N#define PMAP_TA1CCR4A                                        27
N#define PMAP_TA0CLK                                          28
N#define PMAP_CE0OUT                                          28
N#define PMAP_TA1CLK                                          29
N#define PMAP_CE1OUT                                          29
N#define PMAP_DMAE0                                           30
N#define PMAP_SMCLK                                           30
N#define PMAP_ANALOG                                          31
N
N#define PMAP_KEYID_VAL                           ((uint16_t)0x2D52)              /*!< Port Mapping Key */
N
N
N/******************************************************************************
N* PSS Bits
N******************************************************************************/
N/* PSS_KEY[KEY] Bits */
N#define PSS_KEY_KEY_OFS                          ( 0)                            /*!< PSSKEY Bit Offset */
N#define PSS_KEY_KEY_MASK                         ((uint32_t)0x0000FFFF)          /*!< PSSKEY Bit Mask */
N/* PSS_CTL0[SVSMHOFF] Bits */
N#define PSS_CTL0_SVSMHOFF_OFS                    ( 0)                            /*!< SVSMHOFF Bit Offset */
N#define PSS_CTL0_SVSMHOFF                        ((uint32_t)0x00000001)          /*!< SVSM high-side off */
N/* PSS_CTL0[SVSMHLP] Bits */
N#define PSS_CTL0_SVSMHLP_OFS                     ( 1)                            /*!< SVSMHLP Bit Offset */
N#define PSS_CTL0_SVSMHLP                         ((uint32_t)0x00000002)          /*!< SVSM high-side low power normal performance mode */
N/* PSS_CTL0[SVSMHS] Bits */
N#define PSS_CTL0_SVSMHS_OFS                      ( 2)                            /*!< SVSMHS Bit Offset */
N#define PSS_CTL0_SVSMHS                          ((uint32_t)0x00000004)          /*!< Supply supervisor or monitor selection for the high-side */
N/* PSS_CTL0[SVSMHTH] Bits */
N#define PSS_CTL0_SVSMHTH_OFS                     ( 3)                            /*!< SVSMHTH Bit Offset */
N#define PSS_CTL0_SVSMHTH_MASK                    ((uint32_t)0x00000038)          /*!< SVSMHTH Bit Mask */
N/* PSS_CTL0[SVMHOE] Bits */
N#define PSS_CTL0_SVMHOE_OFS                      ( 6)                            /*!< SVMHOE Bit Offset */
N#define PSS_CTL0_SVMHOE                          ((uint32_t)0x00000040)          /*!< SVSM high-side output enable */
N/* PSS_CTL0[SVMHOUTPOLAL] Bits */
N#define PSS_CTL0_SVMHOUTPOLAL_OFS                ( 7)                            /*!< SVMHOUTPOLAL Bit Offset */
N#define PSS_CTL0_SVMHOUTPOLAL                    ((uint32_t)0x00000080)          /*!< SVMHOUT pin polarity active low */
N/* PSS_CTL0[DCDC_FORCE] Bits */
N#define PSS_CTL0_DCDC_FORCE_OFS                  (10)                            /*!< DCDC_FORCE Bit Offset */
N#define PSS_CTL0_DCDC_FORCE                      ((uint32_t)0x00000400)          /*!< Force DC-DC regulator operation */
N/* PSS_CTL0[VCORETRAN] Bits */
N#define PSS_CTL0_VCORETRAN_OFS                   (12)                            /*!< VCORETRAN Bit Offset */
N#define PSS_CTL0_VCORETRAN_MASK                  ((uint32_t)0x00003000)          /*!< VCORETRAN Bit Mask */
N#define PSS_CTL0_VCORETRAN0                      ((uint32_t)0x00001000)          /*!< VCORETRAN Bit 0 */
N#define PSS_CTL0_VCORETRAN1                      ((uint32_t)0x00002000)          /*!< VCORETRAN Bit 1 */
N#define PSS_CTL0_VCORETRAN_0                     ((uint32_t)0x00000000)          /*!< 32 s / 100 mV */
N#define PSS_CTL0_VCORETRAN_1                     ((uint32_t)0x00001000)          /*!< 64 s / 100 mV */
N#define PSS_CTL0_VCORETRAN_2                     ((uint32_t)0x00002000)          /*!< 128 s / 100 mV (default) */
N#define PSS_CTL0_VCORETRAN_3                     ((uint32_t)0x00003000)          /*!< 256 s / 100 mV */
N#define PSS_CTL0_VCORETRAN__32                   ((uint32_t)0x00000000)          /*!< 32 s / 100 mV */
N#define PSS_CTL0_VCORETRAN__64                   ((uint32_t)0x00001000)          /*!< 64 s / 100 mV */
N#define PSS_CTL0_VCORETRAN__128                  ((uint32_t)0x00002000)          /*!< 128 s / 100 mV (default) */
N#define PSS_CTL0_VCORETRAN__256                  ((uint32_t)0x00003000)          /*!< 256 s / 100 mV */
N/* PSS_IE[SVSMHIE] Bits */
N#define PSS_IE_SVSMHIE_OFS                       ( 1)                            /*!< SVSMHIE Bit Offset */
N#define PSS_IE_SVSMHIE                           ((uint32_t)0x00000002)          /*!< High-side SVSM interrupt enable */
N/* PSS_IFG[SVSMHIFG] Bits */
N#define PSS_IFG_SVSMHIFG_OFS                     ( 1)                            /*!< SVSMHIFG Bit Offset */
N#define PSS_IFG_SVSMHIFG                         ((uint32_t)0x00000002)          /*!< High-side SVSM interrupt flag */
N/* PSS_CLRIFG[CLRSVSMHIFG] Bits */
N#define PSS_CLRIFG_CLRSVSMHIFG_OFS               ( 1)                            /*!< CLRSVSMHIFG Bit Offset */
N#define PSS_CLRIFG_CLRSVSMHIFG                   ((uint32_t)0x00000002)          /*!< SVSMH clear interrupt flag */
N/* Pre-defined bitfield values */
N#define PSS_KEY_KEY_VAL                           ((uint32_t)0x0000695A)          /*!< PSS control key value */
N
N
N/******************************************************************************
N* REF_A Bits
N******************************************************************************/
N/* REF_A_CTL0[ON] Bits */
N#define REF_A_CTL0_ON_OFS                        ( 0)                            /*!< REFON Bit Offset */
N#define REF_A_CTL0_ON                            ((uint16_t)0x0001)              /*!< Reference enable */
N/* REF_A_CTL0[OUT] Bits */
N#define REF_A_CTL0_OUT_OFS                       ( 1)                            /*!< REFOUT Bit Offset */
N#define REF_A_CTL0_OUT                           ((uint16_t)0x0002)              /*!< Reference output buffer */
N/* REF_A_CTL0[TCOFF] Bits */
N#define REF_A_CTL0_TCOFF_OFS                     ( 3)                            /*!< REFTCOFF Bit Offset */
N#define REF_A_CTL0_TCOFF                         ((uint16_t)0x0008)              /*!< Temperature sensor disabled */
N/* REF_A_CTL0[VSEL] Bits */
N#define REF_A_CTL0_VSEL_OFS                      ( 4)                            /*!< REFVSEL Bit Offset */
N#define REF_A_CTL0_VSEL_MASK                     ((uint16_t)0x0030)              /*!< REFVSEL Bit Mask */
N#define REF_A_CTL0_VSEL0                         ((uint16_t)0x0010)              /*!< VSEL Bit 0 */
N#define REF_A_CTL0_VSEL1                         ((uint16_t)0x0020)              /*!< VSEL Bit 1 */
N#define REF_A_CTL0_VSEL_0                        ((uint16_t)0x0000)              /*!< 1.2 V available when reference requested or REFON = 1 */
N#define REF_A_CTL0_VSEL_1                        ((uint16_t)0x0010)              /*!< 1.45 V available when reference requested or REFON = 1 */
N#define REF_A_CTL0_VSEL_3                        ((uint16_t)0x0030)              /*!< 2.5 V available when reference requested or REFON = 1 */
N/* REF_A_CTL0[GENOT] Bits */
N#define REF_A_CTL0_GENOT_OFS                     ( 6)                            /*!< REFGENOT Bit Offset */
N#define REF_A_CTL0_GENOT                         ((uint16_t)0x0040)              /*!< Reference generator one-time trigger */
N/* REF_A_CTL0[BGOT] Bits */
N#define REF_A_CTL0_BGOT_OFS                      ( 7)                            /*!< REFBGOT Bit Offset */
N#define REF_A_CTL0_BGOT                          ((uint16_t)0x0080)              /*!< Bandgap and bandgap buffer one-time trigger */
N/* REF_A_CTL0[GENACT] Bits */
N#define REF_A_CTL0_GENACT_OFS                    ( 8)                            /*!< REFGENACT Bit Offset */
N#define REF_A_CTL0_GENACT                        ((uint16_t)0x0100)              /*!< Reference generator active */
N/* REF_A_CTL0[BGACT] Bits */
N#define REF_A_CTL0_BGACT_OFS                     ( 9)                            /*!< REFBGACT Bit Offset */
N#define REF_A_CTL0_BGACT                         ((uint16_t)0x0200)              /*!< Reference bandgap active */
N/* REF_A_CTL0[GENBUSY] Bits */
N#define REF_A_CTL0_GENBUSY_OFS                   (10)                            /*!< REFGENBUSY Bit Offset */
N#define REF_A_CTL0_GENBUSY                       ((uint16_t)0x0400)              /*!< Reference generator busy */
N/* REF_A_CTL0[BGMODE] Bits */
N#define REF_A_CTL0_BGMODE_OFS                    (11)                            /*!< BGMODE Bit Offset */
N#define REF_A_CTL0_BGMODE                        ((uint16_t)0x0800)              /*!< Bandgap mode */
N/* REF_A_CTL0[GENRDY] Bits */
N#define REF_A_CTL0_GENRDY_OFS                    (12)                            /*!< REFGENRDY Bit Offset */
N#define REF_A_CTL0_GENRDY                        ((uint16_t)0x1000)              /*!< Variable reference voltage ready status */
N/* REF_A_CTL0[BGRDY] Bits */
N#define REF_A_CTL0_BGRDY_OFS                     (13)                            /*!< REFBGRDY Bit Offset */
N#define REF_A_CTL0_BGRDY                         ((uint16_t)0x2000)              /*!< Buffered bandgap voltage ready status */
N
N/******************************************************************************
N* RSTCTL Bits
N******************************************************************************/
N/* RSTCTL_RESET_REQ[SOFT_REQ] Bits */
N#define RSTCTL_RESET_REQ_SOFT_REQ_OFS            ( 0)                            /*!< SOFT_REQ Bit Offset */
N#define RSTCTL_RESET_REQ_SOFT_REQ                ((uint32_t)0x00000001)          /*!< Soft Reset request */
N/* RSTCTL_RESET_REQ[HARD_REQ] Bits */
N#define RSTCTL_RESET_REQ_HARD_REQ_OFS            ( 1)                            /*!< HARD_REQ Bit Offset */
N#define RSTCTL_RESET_REQ_HARD_REQ                ((uint32_t)0x00000002)          /*!< Hard Reset request */
N/* RSTCTL_RESET_REQ[RSTKEY] Bits */
N#define RSTCTL_RESET_REQ_RSTKEY_OFS              ( 8)                            /*!< RSTKEY Bit Offset */
N#define RSTCTL_RESET_REQ_RSTKEY_MASK             ((uint32_t)0x0000FF00)          /*!< RSTKEY Bit Mask */
N/* RSTCTL_HARDRESET_STAT[SRC0] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC0_OFS           ( 0)                            /*!< SRC0 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC0               ((uint32_t)0x00000001)          /*!< Indicates that SRC0 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC1] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC1_OFS           ( 1)                            /*!< SRC1 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC1               ((uint32_t)0x00000002)          /*!< Indicates that SRC1 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC2] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC2_OFS           ( 2)                            /*!< SRC2 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC2               ((uint32_t)0x00000004)          /*!< Indicates that SRC2 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC3] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC3_OFS           ( 3)                            /*!< SRC3 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC3               ((uint32_t)0x00000008)          /*!< Indicates that SRC3 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC4] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC4_OFS           ( 4)                            /*!< SRC4 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC4               ((uint32_t)0x00000010)          /*!< Indicates that SRC4 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC5] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC5_OFS           ( 5)                            /*!< SRC5 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC5               ((uint32_t)0x00000020)          /*!< Indicates that SRC5 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC6] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC6_OFS           ( 6)                            /*!< SRC6 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC6               ((uint32_t)0x00000040)          /*!< Indicates that SRC6 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC7] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC7_OFS           ( 7)                            /*!< SRC7 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC7               ((uint32_t)0x00000080)          /*!< Indicates that SRC7 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC8] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC8_OFS           ( 8)                            /*!< SRC8 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC8               ((uint32_t)0x00000100)          /*!< Indicates that SRC8 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC9] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC9_OFS           ( 9)                            /*!< SRC9 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC9               ((uint32_t)0x00000200)          /*!< Indicates that SRC9 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC10] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC10_OFS          (10)                            /*!< SRC10 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC10              ((uint32_t)0x00000400)          /*!< Indicates that SRC10 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC11] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC11_OFS          (11)                            /*!< SRC11 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC11              ((uint32_t)0x00000800)          /*!< Indicates that SRC11 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC12] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC12_OFS          (12)                            /*!< SRC12 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC12              ((uint32_t)0x00001000)          /*!< Indicates that SRC12 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC13] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC13_OFS          (13)                            /*!< SRC13 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC13              ((uint32_t)0x00002000)          /*!< Indicates that SRC13 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC14] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC14_OFS          (14)                            /*!< SRC14 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC14              ((uint32_t)0x00004000)          /*!< Indicates that SRC14 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_STAT[SRC15] Bits */
N#define RSTCTL_HARDRESET_STAT_SRC15_OFS          (15)                            /*!< SRC15 Bit Offset */
N#define RSTCTL_HARDRESET_STAT_SRC15              ((uint32_t)0x00008000)          /*!< Indicates that SRC15 was the source of the Hard Reset */
N/* RSTCTL_HARDRESET_CLR[SRC0] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC0_OFS            ( 0)                            /*!< SRC0 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC0                ((uint32_t)0x00000001)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC1] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC1_OFS            ( 1)                            /*!< SRC1 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC1                ((uint32_t)0x00000002)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC2] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC2_OFS            ( 2)                            /*!< SRC2 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC2                ((uint32_t)0x00000004)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC3] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC3_OFS            ( 3)                            /*!< SRC3 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC3                ((uint32_t)0x00000008)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC4] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC4_OFS            ( 4)                            /*!< SRC4 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC4                ((uint32_t)0x00000010)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC5] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC5_OFS            ( 5)                            /*!< SRC5 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC5                ((uint32_t)0x00000020)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC6] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC6_OFS            ( 6)                            /*!< SRC6 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC6                ((uint32_t)0x00000040)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC7] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC7_OFS            ( 7)                            /*!< SRC7 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC7                ((uint32_t)0x00000080)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC8] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC8_OFS            ( 8)                            /*!< SRC8 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC8                ((uint32_t)0x00000100)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC9] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC9_OFS            ( 9)                            /*!< SRC9 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC9                ((uint32_t)0x00000200)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC10] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC10_OFS           (10)                            /*!< SRC10 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC10               ((uint32_t)0x00000400)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC11] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC11_OFS           (11)                            /*!< SRC11 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC11               ((uint32_t)0x00000800)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC12] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC12_OFS           (12)                            /*!< SRC12 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC12               ((uint32_t)0x00001000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC13] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC13_OFS           (13)                            /*!< SRC13 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC13               ((uint32_t)0x00002000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC14] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC14_OFS           (14)                            /*!< SRC14 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC14               ((uint32_t)0x00004000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HARDRESET_STAT */
N/* RSTCTL_HARDRESET_CLR[SRC15] Bits */
N#define RSTCTL_HARDRESET_CLR_SRC15_OFS           (15)                            /*!< SRC15 Bit Offset */
N#define RSTCTL_HARDRESET_CLR_SRC15               ((uint32_t)0x00008000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_HRDRESETSTAT_REG */
N/* RSTCTL_HARDRESET_SET[SRC0] Bits */
N#define RSTCTL_HARDRESET_SET_SRC0_OFS            ( 0)                            /*!< SRC0 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC0                ((uint32_t)0x00000001)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC1] Bits */
N#define RSTCTL_HARDRESET_SET_SRC1_OFS            ( 1)                            /*!< SRC1 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC1                ((uint32_t)0x00000002)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC2] Bits */
N#define RSTCTL_HARDRESET_SET_SRC2_OFS            ( 2)                            /*!< SRC2 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC2                ((uint32_t)0x00000004)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC3] Bits */
N#define RSTCTL_HARDRESET_SET_SRC3_OFS            ( 3)                            /*!< SRC3 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC3                ((uint32_t)0x00000008)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC4] Bits */
N#define RSTCTL_HARDRESET_SET_SRC4_OFS            ( 4)                            /*!< SRC4 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC4                ((uint32_t)0x00000010)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC5] Bits */
N#define RSTCTL_HARDRESET_SET_SRC5_OFS            ( 5)                            /*!< SRC5 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC5                ((uint32_t)0x00000020)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC6] Bits */
N#define RSTCTL_HARDRESET_SET_SRC6_OFS            ( 6)                            /*!< SRC6 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC6                ((uint32_t)0x00000040)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC7] Bits */
N#define RSTCTL_HARDRESET_SET_SRC7_OFS            ( 7)                            /*!< SRC7 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC7                ((uint32_t)0x00000080)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC8] Bits */
N#define RSTCTL_HARDRESET_SET_SRC8_OFS            ( 8)                            /*!< SRC8 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC8                ((uint32_t)0x00000100)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC9] Bits */
N#define RSTCTL_HARDRESET_SET_SRC9_OFS            ( 9)                            /*!< SRC9 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC9                ((uint32_t)0x00000200)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC10] Bits */
N#define RSTCTL_HARDRESET_SET_SRC10_OFS           (10)                            /*!< SRC10 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC10               ((uint32_t)0x00000400)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC11] Bits */
N#define RSTCTL_HARDRESET_SET_SRC11_OFS           (11)                            /*!< SRC11 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC11               ((uint32_t)0x00000800)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC12] Bits */
N#define RSTCTL_HARDRESET_SET_SRC12_OFS           (12)                            /*!< SRC12 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC12               ((uint32_t)0x00001000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC13] Bits */
N#define RSTCTL_HARDRESET_SET_SRC13_OFS           (13)                            /*!< SRC13 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC13               ((uint32_t)0x00002000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC14] Bits */
N#define RSTCTL_HARDRESET_SET_SRC14_OFS           (14)                            /*!< SRC14 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC14               ((uint32_t)0x00004000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_HARDRESET_SET[SRC15] Bits */
N#define RSTCTL_HARDRESET_SET_SRC15_OFS           (15)                            /*!< SRC15 Bit Offset */
N#define RSTCTL_HARDRESET_SET_SRC15               ((uint32_t)0x00008000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_HARDRESET_STAT (and  */
N                                                                                 /* initiates a Hard Reset) */
N/* RSTCTL_SOFTRESET_STAT[SRC0] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC0_OFS           ( 0)                            /*!< SRC0 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC0               ((uint32_t)0x00000001)          /*!< If 1, indicates that SRC0 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC1] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC1_OFS           ( 1)                            /*!< SRC1 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC1               ((uint32_t)0x00000002)          /*!< If 1, indicates that SRC1 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC2] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC2_OFS           ( 2)                            /*!< SRC2 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC2               ((uint32_t)0x00000004)          /*!< If 1, indicates that SRC2 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC3] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC3_OFS           ( 3)                            /*!< SRC3 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC3               ((uint32_t)0x00000008)          /*!< If 1, indicates that SRC3 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC4] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC4_OFS           ( 4)                            /*!< SRC4 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC4               ((uint32_t)0x00000010)          /*!< If 1, indicates that SRC4 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC5] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC5_OFS           ( 5)                            /*!< SRC5 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC5               ((uint32_t)0x00000020)          /*!< If 1, indicates that SRC5 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC6] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC6_OFS           ( 6)                            /*!< SRC6 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC6               ((uint32_t)0x00000040)          /*!< If 1, indicates that SRC6 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC7] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC7_OFS           ( 7)                            /*!< SRC7 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC7               ((uint32_t)0x00000080)          /*!< If 1, indicates that SRC7 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC8] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC8_OFS           ( 8)                            /*!< SRC8 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC8               ((uint32_t)0x00000100)          /*!< If 1, indicates that SRC8 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC9] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC9_OFS           ( 9)                            /*!< SRC9 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC9               ((uint32_t)0x00000200)          /*!< If 1, indicates that SRC9 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC10] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC10_OFS          (10)                            /*!< SRC10 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC10              ((uint32_t)0x00000400)          /*!< If 1, indicates that SRC10 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC11] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC11_OFS          (11)                            /*!< SRC11 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC11              ((uint32_t)0x00000800)          /*!< If 1, indicates that SRC11 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC12] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC12_OFS          (12)                            /*!< SRC12 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC12              ((uint32_t)0x00001000)          /*!< If 1, indicates that SRC12 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC13] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC13_OFS          (13)                            /*!< SRC13 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC13              ((uint32_t)0x00002000)          /*!< If 1, indicates that SRC13 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC14] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC14_OFS          (14)                            /*!< SRC14 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC14              ((uint32_t)0x00004000)          /*!< If 1, indicates that SRC14 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_STAT[SRC15] Bits */
N#define RSTCTL_SOFTRESET_STAT_SRC15_OFS          (15)                            /*!< SRC15 Bit Offset */
N#define RSTCTL_SOFTRESET_STAT_SRC15              ((uint32_t)0x00008000)          /*!< If 1, indicates that SRC15 was the source of the Soft Reset */
N/* RSTCTL_SOFTRESET_CLR[SRC0] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC0_OFS            ( 0)                            /*!< SRC0 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC0                ((uint32_t)0x00000001)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC1] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC1_OFS            ( 1)                            /*!< SRC1 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC1                ((uint32_t)0x00000002)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC2] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC2_OFS            ( 2)                            /*!< SRC2 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC2                ((uint32_t)0x00000004)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC3] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC3_OFS            ( 3)                            /*!< SRC3 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC3                ((uint32_t)0x00000008)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC4] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC4_OFS            ( 4)                            /*!< SRC4 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC4                ((uint32_t)0x00000010)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC5] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC5_OFS            ( 5)                            /*!< SRC5 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC5                ((uint32_t)0x00000020)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC6] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC6_OFS            ( 6)                            /*!< SRC6 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC6                ((uint32_t)0x00000040)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC7] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC7_OFS            ( 7)                            /*!< SRC7 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC7                ((uint32_t)0x00000080)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC8] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC8_OFS            ( 8)                            /*!< SRC8 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC8                ((uint32_t)0x00000100)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC9] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC9_OFS            ( 9)                            /*!< SRC9 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC9                ((uint32_t)0x00000200)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC10] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC10_OFS           (10)                            /*!< SRC10 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC10               ((uint32_t)0x00000400)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC11] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC11_OFS           (11)                            /*!< SRC11 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC11               ((uint32_t)0x00000800)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC12] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC12_OFS           (12)                            /*!< SRC12 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC12               ((uint32_t)0x00001000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC13] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC13_OFS           (13)                            /*!< SRC13 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC13               ((uint32_t)0x00002000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC14] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC14_OFS           (14)                            /*!< SRC14 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC14               ((uint32_t)0x00004000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_CLR[SRC15] Bits */
N#define RSTCTL_SOFTRESET_CLR_SRC15_OFS           (15)                            /*!< SRC15 Bit Offset */
N#define RSTCTL_SOFTRESET_CLR_SRC15               ((uint32_t)0x00008000)          /*!< Write 1 clears the corresponding bit in the RSTCTL_SOFTRESET_STAT */
N/* RSTCTL_SOFTRESET_SET[SRC0] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC0_OFS            ( 0)                            /*!< SRC0 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC0                ((uint32_t)0x00000001)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC1] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC1_OFS            ( 1)                            /*!< SRC1 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC1                ((uint32_t)0x00000002)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC2] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC2_OFS            ( 2)                            /*!< SRC2 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC2                ((uint32_t)0x00000004)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC3] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC3_OFS            ( 3)                            /*!< SRC3 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC3                ((uint32_t)0x00000008)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC4] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC4_OFS            ( 4)                            /*!< SRC4 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC4                ((uint32_t)0x00000010)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC5] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC5_OFS            ( 5)                            /*!< SRC5 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC5                ((uint32_t)0x00000020)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC6] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC6_OFS            ( 6)                            /*!< SRC6 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC6                ((uint32_t)0x00000040)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC7] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC7_OFS            ( 7)                            /*!< SRC7 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC7                ((uint32_t)0x00000080)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC8] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC8_OFS            ( 8)                            /*!< SRC8 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC8                ((uint32_t)0x00000100)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC9] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC9_OFS            ( 9)                            /*!< SRC9 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC9                ((uint32_t)0x00000200)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC10] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC10_OFS           (10)                            /*!< SRC10 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC10               ((uint32_t)0x00000400)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC11] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC11_OFS           (11)                            /*!< SRC11 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC11               ((uint32_t)0x00000800)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC12] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC12_OFS           (12)                            /*!< SRC12 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC12               ((uint32_t)0x00001000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC13] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC13_OFS           (13)                            /*!< SRC13 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC13               ((uint32_t)0x00002000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC14] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC14_OFS           (14)                            /*!< SRC14 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC14               ((uint32_t)0x00004000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_SOFTRESET_SET[SRC15] Bits */
N#define RSTCTL_SOFTRESET_SET_SRC15_OFS           (15)                            /*!< SRC15 Bit Offset */
N#define RSTCTL_SOFTRESET_SET_SRC15               ((uint32_t)0x00008000)          /*!< Write 1 sets the corresponding bit in the RSTCTL_SOFTRESET_STAT (and  */
N                                                                                 /* initiates a Soft Reset) */
N/* RSTCTL_PSSRESET_STAT[SVSMH] Bits */
N#define RSTCTL_PSSRESET_STAT_SVSMH_OFS           ( 1)                            /*!< SVSMH Bit Offset */
N#define RSTCTL_PSSRESET_STAT_SVSMH               ((uint32_t)0x00000002)          /*!< Indicates if POR was caused by an SVSMH trip condition int the PSS */
N/* RSTCTL_PSSRESET_STAT[BGREF] Bits */
N#define RSTCTL_PSSRESET_STAT_BGREF_OFS           ( 2)                            /*!< BGREF Bit Offset */
N#define RSTCTL_PSSRESET_STAT_BGREF               ((uint32_t)0x00000004)          /*!< Indicates if POR was caused by a BGREF not okay condition in the PSS */
N/* RSTCTL_PSSRESET_STAT[VCCDET] Bits */
N#define RSTCTL_PSSRESET_STAT_VCCDET_OFS          ( 3)                            /*!< VCCDET Bit Offset */
N#define RSTCTL_PSSRESET_STAT_VCCDET              ((uint32_t)0x00000008)          /*!< Indicates if POR was caused by a VCCDET trip condition in the PSS */
N/* RSTCTL_PSSRESET_CLR[CLR] Bits */
N#define RSTCTL_PSSRESET_CLR_CLR_OFS              ( 0)                            /*!< CLR Bit Offset */
N#define RSTCTL_PSSRESET_CLR_CLR                  ((uint32_t)0x00000001)          /*!< Write 1 clears all PSS Reset Flags in the RSTCTL_PSSRESET_STAT */
N/* RSTCTL_PCMRESET_STAT[LPM35] Bits */
N#define RSTCTL_PCMRESET_STAT_LPM35_OFS           ( 0)                            /*!< LPM35 Bit Offset */
N#define RSTCTL_PCMRESET_STAT_LPM35               ((uint32_t)0x00000001)          /*!< Indicates if POR was caused by PCM due to an exit from LPM3.5 */
N/* RSTCTL_PCMRESET_STAT[LPM45] Bits */
N#define RSTCTL_PCMRESET_STAT_LPM45_OFS           ( 1)                            /*!< LPM45 Bit Offset */
N#define RSTCTL_PCMRESET_STAT_LPM45               ((uint32_t)0x00000002)          /*!< Indicates if POR was caused by PCM due to an exit from LPM4.5 */
N/* RSTCTL_PCMRESET_CLR[CLR] Bits */
N#define RSTCTL_PCMRESET_CLR_CLR_OFS              ( 0)                            /*!< CLR Bit Offset */
N#define RSTCTL_PCMRESET_CLR_CLR                  ((uint32_t)0x00000001)          /*!< Write 1 clears all PCM Reset Flags in the RSTCTL_PCMRESET_STAT */
N/* RSTCTL_PINRESET_STAT[RSTNMI] Bits */
N#define RSTCTL_PINRESET_STAT_RSTNMI_OFS          ( 0)                            /*!< RSTNMI Bit Offset */
N#define RSTCTL_PINRESET_STAT_RSTNMI              ((uint32_t)0x00000001)          /*!< POR was caused by RSTn/NMI pin based reset event */
N/* RSTCTL_PINRESET_CLR[CLR] Bits */
N#define RSTCTL_PINRESET_CLR_CLR_OFS              ( 0)                            /*!< CLR Bit Offset */
N#define RSTCTL_PINRESET_CLR_CLR                  ((uint32_t)0x00000001)          /*!< Write 1 clears the RSTn/NMI Pin Reset Flag in RSTCTL_PINRESET_STAT */
N/* RSTCTL_REBOOTRESET_STAT[REBOOT] Bits */
N#define RSTCTL_REBOOTRESET_STAT_REBOOT_OFS       ( 0)                            /*!< REBOOT Bit Offset */
N#define RSTCTL_REBOOTRESET_STAT_REBOOT           ((uint32_t)0x00000001)          /*!< Indicates if Reboot reset was caused by the SYSCTL module. */
N/* RSTCTL_REBOOTRESET_CLR[CLR] Bits */
N#define RSTCTL_REBOOTRESET_CLR_CLR_OFS           ( 0)                            /*!< CLR Bit Offset */
N#define RSTCTL_REBOOTRESET_CLR_CLR               ((uint32_t)0x00000001)          /*!< Write 1 clears the Reboot Reset Flag in RSTCTL_REBOOTRESET_STAT */
N/* RSTCTL_CSRESET_STAT[DCOR_SHT] Bits */
N#define RSTCTL_CSRESET_STAT_DCOR_SHT_OFS         ( 0)                            /*!< DCOR_SHT Bit Offset */
N#define RSTCTL_CSRESET_STAT_DCOR_SHT             ((uint32_t)0x00000001)          /*!< Indicates if POR was caused by DCO short circuit fault in the external  */
N                                                                                 /* resistor mode */
N/* RSTCTL_CSRESET_CLR[CLR] Bits */
N#define RSTCTL_CSRESET_CLR_CLR_OFS               ( 0)                            /*!< CLR Bit Offset */
N#define RSTCTL_CSRESET_CLR_CLR                   ((uint32_t)0x00000001)          /*!< Write 1 clears the DCOR_SHT Flag in RSTCTL_CSRESET_STAT as well as  */
N                                                                                 /* DCOR_SHTIFG flag in CSIFG register of clock system */
N/* Pre-defined bitfield values */
N#define RSTCTL_RESETREQ_RSTKEY_VAL                 ((uint32_t)0x00006900)          /*!< Key value to enable writes to bits 1-0 */
N
N
N/******************************************************************************
N* RTC_C Bits
N******************************************************************************/
N/* RTC_C_CTL0[RDYIFG] Bits */
N#define RTC_C_CTL0_RDYIFG_OFS                    ( 0)                            /*!< RTCRDYIFG Bit Offset */
N#define RTC_C_CTL0_RDYIFG                        ((uint16_t)0x0001)              /*!< Real-time clock ready interrupt flag */
N/* RTC_C_CTL0[AIFG] Bits */
N#define RTC_C_CTL0_AIFG_OFS                      ( 1)                            /*!< RTCAIFG Bit Offset */
N#define RTC_C_CTL0_AIFG                          ((uint16_t)0x0002)              /*!< Real-time clock alarm interrupt flag */
N/* RTC_C_CTL0[TEVIFG] Bits */
N#define RTC_C_CTL0_TEVIFG_OFS                    ( 2)                            /*!< RTCTEVIFG Bit Offset */
N#define RTC_C_CTL0_TEVIFG                        ((uint16_t)0x0004)              /*!< Real-time clock time event interrupt flag */
N/* RTC_C_CTL0[OFIFG] Bits */
N#define RTC_C_CTL0_OFIFG_OFS                     ( 3)                            /*!< RTCOFIFG Bit Offset */
N#define RTC_C_CTL0_OFIFG                         ((uint16_t)0x0008)              /*!< 32-kHz crystal oscillator fault interrupt flag */
N/* RTC_C_CTL0[RDYIE] Bits */
N#define RTC_C_CTL0_RDYIE_OFS                     ( 4)                            /*!< RTCRDYIE Bit Offset */
N#define RTC_C_CTL0_RDYIE                         ((uint16_t)0x0010)              /*!< Real-time clock ready interrupt enable */
N/* RTC_C_CTL0[AIE] Bits */
N#define RTC_C_CTL0_AIE_OFS                       ( 5)                            /*!< RTCAIE Bit Offset */
N#define RTC_C_CTL0_AIE                           ((uint16_t)0x0020)              /*!< Real-time clock alarm interrupt enable */
N/* RTC_C_CTL0[TEVIE] Bits */
N#define RTC_C_CTL0_TEVIE_OFS                     ( 6)                            /*!< RTCTEVIE Bit Offset */
N#define RTC_C_CTL0_TEVIE                         ((uint16_t)0x0040)              /*!< Real-time clock time event interrupt enable */
N/* RTC_C_CTL0[OFIE] Bits */
N#define RTC_C_CTL0_OFIE_OFS                      ( 7)                            /*!< RTCOFIE Bit Offset */
N#define RTC_C_CTL0_OFIE                          ((uint16_t)0x0080)              /*!< 32-kHz crystal oscillator fault interrupt enable */
N/* RTC_C_CTL0[KEY] Bits */
N#define RTC_C_CTL0_KEY_OFS                       ( 8)                            /*!< RTCKEY Bit Offset */
N#define RTC_C_CTL0_KEY_MASK                      ((uint16_t)0xFF00)              /*!< RTCKEY Bit Mask */
N/* RTC_C_CTL13[TEV] Bits */
N#define RTC_C_CTL13_TEV_OFS                      ( 0)                            /*!< RTCTEV Bit Offset */
N#define RTC_C_CTL13_TEV_MASK                     ((uint16_t)0x0003)              /*!< RTCTEV Bit Mask */
N#define RTC_C_CTL13_TEV0                         ((uint16_t)0x0001)              /*!< TEV Bit 0 */
N#define RTC_C_CTL13_TEV1                         ((uint16_t)0x0002)              /*!< TEV Bit 1 */
N#define RTC_C_CTL13_TEV_0                        ((uint16_t)0x0000)              /*!< Minute changed */
N#define RTC_C_CTL13_TEV_1                        ((uint16_t)0x0001)              /*!< Hour changed */
N#define RTC_C_CTL13_TEV_2                        ((uint16_t)0x0002)              /*!< Every day at midnight (00:00) */
N#define RTC_C_CTL13_TEV_3                        ((uint16_t)0x0003)              /*!< Every day at noon (12:00) */
N/* RTC_C_CTL13[SSEL] Bits */
N#define RTC_C_CTL13_SSEL_OFS                     ( 2)                            /*!< RTCSSEL Bit Offset */
N#define RTC_C_CTL13_SSEL_MASK                    ((uint16_t)0x000C)              /*!< RTCSSEL Bit Mask */
N#define RTC_C_CTL13_SSEL0                        ((uint16_t)0x0004)              /*!< SSEL Bit 0 */
N#define RTC_C_CTL13_SSEL1                        ((uint16_t)0x0008)              /*!< SSEL Bit 1 */
N#define RTC_C_CTL13_SSEL_0                       ((uint16_t)0x0000)              /*!< BCLK */
N#define RTC_C_CTL13_SSEL__BCLK                   ((uint16_t)0x0000)              /*!< BCLK */
N/* RTC_C_CTL13[RDY] Bits */
N#define RTC_C_CTL13_RDY_OFS                      ( 4)                            /*!< RTCRDY Bit Offset */
N#define RTC_C_CTL13_RDY                          ((uint16_t)0x0010)              /*!< Real-time clock ready */
N/* RTC_C_CTL13[MODE] Bits */
N#define RTC_C_CTL13_MODE_OFS                     ( 5)                            /*!< RTCMODE Bit Offset */
N#define RTC_C_CTL13_MODE                         ((uint16_t)0x0020)              
N/* RTC_C_CTL13[HOLD] Bits */
N#define RTC_C_CTL13_HOLD_OFS                     ( 6)                            /*!< RTCHOLD Bit Offset */
N#define RTC_C_CTL13_HOLD                         ((uint16_t)0x0040)              /*!< Real-time clock hold */
N/* RTC_C_CTL13[BCD] Bits */
N#define RTC_C_CTL13_BCD_OFS                      ( 7)                            /*!< RTCBCD Bit Offset */
N#define RTC_C_CTL13_BCD                          ((uint16_t)0x0080)              /*!< Real-time clock BCD select */
N/* RTC_C_CTL13[CALF] Bits */
N#define RTC_C_CTL13_CALF_OFS                     ( 8)                            /*!< RTCCALF Bit Offset */
N#define RTC_C_CTL13_CALF_MASK                    ((uint16_t)0x0300)              /*!< RTCCALF Bit Mask */
N#define RTC_C_CTL13_CALF0                        ((uint16_t)0x0100)              /*!< CALF Bit 0 */
N#define RTC_C_CTL13_CALF1                        ((uint16_t)0x0200)              /*!< CALF Bit 1 */
N#define RTC_C_CTL13_CALF_0                       ((uint16_t)0x0000)              /*!< No frequency output to RTCCLK pin */
N#define RTC_C_CTL13_CALF_1                       ((uint16_t)0x0100)              /*!< 512 Hz */
N#define RTC_C_CTL13_CALF_2                       ((uint16_t)0x0200)              /*!< 256 Hz */
N#define RTC_C_CTL13_CALF_3                       ((uint16_t)0x0300)              /*!< 1 Hz */
N#define RTC_C_CTL13_CALF__NONE                   ((uint16_t)0x0000)              /*!< No frequency output to RTCCLK pin */
N#define RTC_C_CTL13_CALF__512                    ((uint16_t)0x0100)              /*!< 512 Hz */
N#define RTC_C_CTL13_CALF__256                    ((uint16_t)0x0200)              /*!< 256 Hz */
N#define RTC_C_CTL13_CALF__1                      ((uint16_t)0x0300)              /*!< 1 Hz */
N/* RTC_C_OCAL[OCAL] Bits */
N#define RTC_C_OCAL_OCAL_OFS                      ( 0)                            /*!< RTCOCAL Bit Offset */
N#define RTC_C_OCAL_OCAL_MASK                     ((uint16_t)0x00FF)              /*!< RTCOCAL Bit Mask */
N/* RTC_C_OCAL[OCALS] Bits */
N#define RTC_C_OCAL_OCALS_OFS                     (15)                            /*!< RTCOCALS Bit Offset */
N#define RTC_C_OCAL_OCALS                         ((uint16_t)0x8000)              /*!< Real-time clock offset error calibration sign */
N/* RTC_C_TCMP[TCMPx] Bits */
N#define RTC_C_TCMP_TCMPX_OFS                     ( 0)                            /*!< RTCTCMP Bit Offset */
N#define RTC_C_TCMP_TCMPX_MASK                    ((uint16_t)0x00FF)              /*!< RTCTCMP Bit Mask */
N/* RTC_C_TCMP[TCOK] Bits */
N#define RTC_C_TCMP_TCOK_OFS                      (13)                            /*!< RTCTCOK Bit Offset */
N#define RTC_C_TCMP_TCOK                          ((uint16_t)0x2000)              /*!< Real-time clock temperature compensation write OK */
N/* RTC_C_TCMP[TCRDY] Bits */
N#define RTC_C_TCMP_TCRDY_OFS                     (14)                            /*!< RTCTCRDY Bit Offset */
N#define RTC_C_TCMP_TCRDY                         ((uint16_t)0x4000)              /*!< Real-time clock temperature compensation ready */
N/* RTC_C_TCMP[TCMPS] Bits */
N#define RTC_C_TCMP_TCMPS_OFS                     (15)                            /*!< RTCTCMPS Bit Offset */
N#define RTC_C_TCMP_TCMPS                         ((uint16_t)0x8000)              /*!< Real-time clock temperature compensation sign */
N/* RTC_C_PS0CTL[RT0PSIFG] Bits */
N#define RTC_C_PS0CTL_RT0PSIFG_OFS                ( 0)                            /*!< RT0PSIFG Bit Offset */
N#define RTC_C_PS0CTL_RT0PSIFG                    ((uint16_t)0x0001)              /*!< Prescale timer 0 interrupt flag */
N/* RTC_C_PS0CTL[RT0PSIE] Bits */
N#define RTC_C_PS0CTL_RT0PSIE_OFS                 ( 1)                            /*!< RT0PSIE Bit Offset */
N#define RTC_C_PS0CTL_RT0PSIE                     ((uint16_t)0x0002)              /*!< Prescale timer 0 interrupt enable */
N/* RTC_C_PS0CTL[RT0IP] Bits */
N#define RTC_C_PS0CTL_RT0IP_OFS                   ( 2)                            /*!< RT0IP Bit Offset */
N#define RTC_C_PS0CTL_RT0IP_MASK                  ((uint16_t)0x001C)              /*!< RT0IP Bit Mask */
N#define RTC_C_PS0CTL_RT0IP0                      ((uint16_t)0x0004)              /*!< RT0IP Bit 0 */
N#define RTC_C_PS0CTL_RT0IP1                      ((uint16_t)0x0008)              /*!< RT0IP Bit 1 */
N#define RTC_C_PS0CTL_RT0IP2                      ((uint16_t)0x0010)              /*!< RT0IP Bit 2 */
N#define RTC_C_PS0CTL_RT0IP_0                     ((uint16_t)0x0000)              /*!< Divide by 2 */
N#define RTC_C_PS0CTL_RT0IP_1                     ((uint16_t)0x0004)              /*!< Divide by 4 */
N#define RTC_C_PS0CTL_RT0IP_2                     ((uint16_t)0x0008)              /*!< Divide by 8 */
N#define RTC_C_PS0CTL_RT0IP_3                     ((uint16_t)0x000C)              /*!< Divide by 16 */
N#define RTC_C_PS0CTL_RT0IP_4                     ((uint16_t)0x0010)              /*!< Divide by 32 */
N#define RTC_C_PS0CTL_RT0IP_5                     ((uint16_t)0x0014)              /*!< Divide by 64 */
N#define RTC_C_PS0CTL_RT0IP_6                     ((uint16_t)0x0018)              /*!< Divide by 128 */
N#define RTC_C_PS0CTL_RT0IP_7                     ((uint16_t)0x001C)              /*!< Divide by 256 */
N#define RTC_C_PS0CTL_RT0IP__2                    ((uint16_t)0x0000)              /*!< Divide by 2 */
N#define RTC_C_PS0CTL_RT0IP__4                    ((uint16_t)0x0004)              /*!< Divide by 4 */
N#define RTC_C_PS0CTL_RT0IP__8                    ((uint16_t)0x0008)              /*!< Divide by 8 */
N#define RTC_C_PS0CTL_RT0IP__16                   ((uint16_t)0x000C)              /*!< Divide by 16 */
N#define RTC_C_PS0CTL_RT0IP__32                   ((uint16_t)0x0010)              /*!< Divide by 32 */
N#define RTC_C_PS0CTL_RT0IP__64                   ((uint16_t)0x0014)              /*!< Divide by 64 */
N#define RTC_C_PS0CTL_RT0IP__128                  ((uint16_t)0x0018)              /*!< Divide by 128 */
N#define RTC_C_PS0CTL_RT0IP__256                  ((uint16_t)0x001C)              /*!< Divide by 256 */
N/* RTC_C_PS1CTL[RT1PSIFG] Bits */
N#define RTC_C_PS1CTL_RT1PSIFG_OFS                ( 0)                            /*!< RT1PSIFG Bit Offset */
N#define RTC_C_PS1CTL_RT1PSIFG                    ((uint16_t)0x0001)              /*!< Prescale timer 1 interrupt flag */
N/* RTC_C_PS1CTL[RT1PSIE] Bits */
N#define RTC_C_PS1CTL_RT1PSIE_OFS                 ( 1)                            /*!< RT1PSIE Bit Offset */
N#define RTC_C_PS1CTL_RT1PSIE                     ((uint16_t)0x0002)              /*!< Prescale timer 1 interrupt enable */
N/* RTC_C_PS1CTL[RT1IP] Bits */
N#define RTC_C_PS1CTL_RT1IP_OFS                   ( 2)                            /*!< RT1IP Bit Offset */
N#define RTC_C_PS1CTL_RT1IP_MASK                  ((uint16_t)0x001C)              /*!< RT1IP Bit Mask */
N#define RTC_C_PS1CTL_RT1IP0                      ((uint16_t)0x0004)              /*!< RT1IP Bit 0 */
N#define RTC_C_PS1CTL_RT1IP1                      ((uint16_t)0x0008)              /*!< RT1IP Bit 1 */
N#define RTC_C_PS1CTL_RT1IP2                      ((uint16_t)0x0010)              /*!< RT1IP Bit 2 */
N#define RTC_C_PS1CTL_RT1IP_0                     ((uint16_t)0x0000)              /*!< Divide by 2 */
N#define RTC_C_PS1CTL_RT1IP_1                     ((uint16_t)0x0004)              /*!< Divide by 4 */
N#define RTC_C_PS1CTL_RT1IP_2                     ((uint16_t)0x0008)              /*!< Divide by 8 */
N#define RTC_C_PS1CTL_RT1IP_3                     ((uint16_t)0x000C)              /*!< Divide by 16 */
N#define RTC_C_PS1CTL_RT1IP_4                     ((uint16_t)0x0010)              /*!< Divide by 32 */
N#define RTC_C_PS1CTL_RT1IP_5                     ((uint16_t)0x0014)              /*!< Divide by 64 */
N#define RTC_C_PS1CTL_RT1IP_6                     ((uint16_t)0x0018)              /*!< Divide by 128 */
N#define RTC_C_PS1CTL_RT1IP_7                     ((uint16_t)0x001C)              /*!< Divide by 256 */
N#define RTC_C_PS1CTL_RT1IP__2                    ((uint16_t)0x0000)              /*!< Divide by 2 */
N#define RTC_C_PS1CTL_RT1IP__4                    ((uint16_t)0x0004)              /*!< Divide by 4 */
N#define RTC_C_PS1CTL_RT1IP__8                    ((uint16_t)0x0008)              /*!< Divide by 8 */
N#define RTC_C_PS1CTL_RT1IP__16                   ((uint16_t)0x000C)              /*!< Divide by 16 */
N#define RTC_C_PS1CTL_RT1IP__32                   ((uint16_t)0x0010)              /*!< Divide by 32 */
N#define RTC_C_PS1CTL_RT1IP__64                   ((uint16_t)0x0014)              /*!< Divide by 64 */
N#define RTC_C_PS1CTL_RT1IP__128                  ((uint16_t)0x0018)              /*!< Divide by 128 */
N#define RTC_C_PS1CTL_RT1IP__256                  ((uint16_t)0x001C)              /*!< Divide by 256 */
N/* RTC_C_PS[RT0PS] Bits */
N#define RTC_C_PS_RT0PS_OFS                       ( 0)                            /*!< RT0PS Bit Offset */
N#define RTC_C_PS_RT0PS_MASK                      ((uint16_t)0x00FF)              /*!< RT0PS Bit Mask */
N/* RTC_C_PS[RT1PS] Bits */
N#define RTC_C_PS_RT1PS_OFS                       ( 8)                            /*!< RT1PS Bit Offset */
N#define RTC_C_PS_RT1PS_MASK                      ((uint16_t)0xFF00)              /*!< RT1PS Bit Mask */
N/* RTC_C_TIM0[SEC] Bits */
N#define RTC_C_TIM0_SEC_OFS                       ( 0)                            /*!< Seconds Bit Offset */
N#define RTC_C_TIM0_SEC_MASK                      ((uint16_t)0x003F)              /*!< Seconds Bit Mask */
N/* RTC_C_TIM0[MIN] Bits */
N#define RTC_C_TIM0_MIN_OFS                       ( 8)                            /*!< Minutes Bit Offset */
N#define RTC_C_TIM0_MIN_MASK                      ((uint16_t)0x3F00)              /*!< Minutes Bit Mask */
N/* RTC_C_TIM0[SEC_LD] Bits */
N#define RTC_C_TIM0_SEC_LD_OFS                    ( 0)                            /*!< SecondsLowDigit Bit Offset */
N#define RTC_C_TIM0_SEC_LD_MASK                   ((uint16_t)0x000F)              /*!< SecondsLowDigit Bit Mask */
N/* RTC_C_TIM0[SEC_HD] Bits */
N#define RTC_C_TIM0_SEC_HD_OFS                    ( 4)                            /*!< SecondsHighDigit Bit Offset */
N#define RTC_C_TIM0_SEC_HD_MASK                   ((uint16_t)0x0070)              /*!< SecondsHighDigit Bit Mask */
N/* RTC_C_TIM0[MIN_LD] Bits */
N#define RTC_C_TIM0_MIN_LD_OFS                    ( 8)                            /*!< MinutesLowDigit Bit Offset */
N#define RTC_C_TIM0_MIN_LD_MASK                   ((uint16_t)0x0F00)              /*!< MinutesLowDigit Bit Mask */
N/* RTC_C_TIM0[MIN_HD] Bits */
N#define RTC_C_TIM0_MIN_HD_OFS                    (12)                            /*!< MinutesHighDigit Bit Offset */
N#define RTC_C_TIM0_MIN_HD_MASK                   ((uint16_t)0x7000)              /*!< MinutesHighDigit Bit Mask */
N/* RTC_C_TIM1[HOUR] Bits */
N#define RTC_C_TIM1_HOUR_OFS                      ( 0)                            /*!< Hours Bit Offset */
N#define RTC_C_TIM1_HOUR_MASK                     ((uint16_t)0x001F)              /*!< Hours Bit Mask */
N/* RTC_C_TIM1[DOW] Bits */
N#define RTC_C_TIM1_DOW_OFS                       ( 8)                            /*!< DayofWeek Bit Offset */
N#define RTC_C_TIM1_DOW_MASK                      ((uint16_t)0x0700)              /*!< DayofWeek Bit Mask */
N/* RTC_C_TIM1[HOUR_LD] Bits */
N#define RTC_C_TIM1_HOUR_LD_OFS                   ( 0)                            /*!< HoursLowDigit Bit Offset */
N#define RTC_C_TIM1_HOUR_LD_MASK                  ((uint16_t)0x000F)              /*!< HoursLowDigit Bit Mask */
N/* RTC_C_TIM1[HOUR_HD] Bits */
N#define RTC_C_TIM1_HOUR_HD_OFS                   ( 4)                            /*!< HoursHighDigit Bit Offset */
N#define RTC_C_TIM1_HOUR_HD_MASK                  ((uint16_t)0x0030)              /*!< HoursHighDigit Bit Mask */
N/* RTC_C_DATE[DAY] Bits */
N#define RTC_C_DATE_DAY_OFS                       ( 0)                            /*!< Day Bit Offset */
N#define RTC_C_DATE_DAY_MASK                      ((uint16_t)0x001F)              /*!< Day Bit Mask */
N/* RTC_C_DATE[MON] Bits */
N#define RTC_C_DATE_MON_OFS                       ( 8)                            /*!< Month Bit Offset */
N#define RTC_C_DATE_MON_MASK                      ((uint16_t)0x0F00)              /*!< Month Bit Mask */
N/* RTC_C_DATE[DAY_LD] Bits */
N#define RTC_C_DATE_DAY_LD_OFS                    ( 0)                            /*!< DayLowDigit Bit Offset */
N#define RTC_C_DATE_DAY_LD_MASK                   ((uint16_t)0x000F)              /*!< DayLowDigit Bit Mask */
N/* RTC_C_DATE[DAY_HD] Bits */
N#define RTC_C_DATE_DAY_HD_OFS                    ( 4)                            /*!< DayHighDigit Bit Offset */
N#define RTC_C_DATE_DAY_HD_MASK                   ((uint16_t)0x0030)              /*!< DayHighDigit Bit Mask */
N/* RTC_C_DATE[MON_LD] Bits */
N#define RTC_C_DATE_MON_LD_OFS                    ( 8)                            /*!< MonthLowDigit Bit Offset */
N#define RTC_C_DATE_MON_LD_MASK                   ((uint16_t)0x0F00)              /*!< MonthLowDigit Bit Mask */
N/* RTC_C_DATE[MON_HD] Bits */
N#define RTC_C_DATE_MON_HD_OFS                    (12)                            /*!< MonthHighDigit Bit Offset */
N#define RTC_C_DATE_MON_HD                        ((uint16_t)0x1000)              /*!< Month  high digit (0 or 1) */
N/* RTC_C_YEAR[YEAR_LB] Bits */
N#define RTC_C_YEAR_YEAR_LB_OFS                   ( 0)                            /*!< YearLowByte Bit Offset */
N#define RTC_C_YEAR_YEAR_LB_MASK                  ((uint16_t)0x00FF)              /*!< YearLowByte Bit Mask */
N/* RTC_C_YEAR[YEAR_HB] Bits */
N#define RTC_C_YEAR_YEAR_HB_OFS                   ( 8)                            /*!< YearHighByte Bit Offset */
N#define RTC_C_YEAR_YEAR_HB_MASK                  ((uint16_t)0x0F00)              /*!< YearHighByte Bit Mask */
N/* RTC_C_YEAR[YEAR] Bits */
N#define RTC_C_YEAR_YEAR_OFS                      ( 0)                            /*!< Year Bit Offset */
N#define RTC_C_YEAR_YEAR_MASK                     ((uint16_t)0x000F)              /*!< Year Bit Mask */
N/* RTC_C_YEAR[DEC] Bits */
N#define RTC_C_YEAR_DEC_OFS                       ( 4)                            /*!< Decade Bit Offset */
N#define RTC_C_YEAR_DEC_MASK                      ((uint16_t)0x00F0)              /*!< Decade Bit Mask */
N/* RTC_C_YEAR[CENT_LD] Bits */
N#define RTC_C_YEAR_CENT_LD_OFS                   ( 8)                            /*!< CenturyLowDigit Bit Offset */
N#define RTC_C_YEAR_CENT_LD_MASK                  ((uint16_t)0x0F00)              /*!< CenturyLowDigit Bit Mask */
N/* RTC_C_YEAR[CENT_HD] Bits */
N#define RTC_C_YEAR_CENT_HD_OFS                   (12)                            /*!< CenturyHighDigit Bit Offset */
N#define RTC_C_YEAR_CENT_HD_MASK                  ((uint16_t)0x7000)              /*!< CenturyHighDigit Bit Mask */
N/* RTC_C_AMINHR[MIN] Bits */
N#define RTC_C_AMINHR_MIN_OFS                     ( 0)                            /*!< Minutes Bit Offset */
N#define RTC_C_AMINHR_MIN_MASK                    ((uint16_t)0x003F)              /*!< Minutes Bit Mask */
N/* RTC_C_AMINHR[MINAE] Bits */
N#define RTC_C_AMINHR_MINAE_OFS                   ( 7)                            /*!< MINAE Bit Offset */
N#define RTC_C_AMINHR_MINAE                       ((uint16_t)0x0080)              /*!< Alarm enable */
N/* RTC_C_AMINHR[HOUR] Bits */
N#define RTC_C_AMINHR_HOUR_OFS                    ( 8)                            /*!< Hours Bit Offset */
N#define RTC_C_AMINHR_HOUR_MASK                   ((uint16_t)0x1F00)              /*!< Hours Bit Mask */
N/* RTC_C_AMINHR[HOURAE] Bits */
N#define RTC_C_AMINHR_HOURAE_OFS                  (15)                            /*!< HOURAE Bit Offset */
N#define RTC_C_AMINHR_HOURAE                      ((uint16_t)0x8000)              /*!< Alarm enable */
N/* RTC_C_AMINHR[MIN_LD] Bits */
N#define RTC_C_AMINHR_MIN_LD_OFS                  ( 0)                            /*!< MinutesLowDigit Bit Offset */
N#define RTC_C_AMINHR_MIN_LD_MASK                 ((uint16_t)0x000F)              /*!< MinutesLowDigit Bit Mask */
N/* RTC_C_AMINHR[MIN_HD] Bits */
N#define RTC_C_AMINHR_MIN_HD_OFS                  ( 4)                            /*!< MinutesHighDigit Bit Offset */
N#define RTC_C_AMINHR_MIN_HD_MASK                 ((uint16_t)0x0070)              /*!< MinutesHighDigit Bit Mask */
N/* RTC_C_AMINHR[HOUR_LD] Bits */
N#define RTC_C_AMINHR_HOUR_LD_OFS                 ( 8)                            /*!< HoursLowDigit Bit Offset */
N#define RTC_C_AMINHR_HOUR_LD_MASK                ((uint16_t)0x0F00)              /*!< HoursLowDigit Bit Mask */
N/* RTC_C_AMINHR[HOUR_HD] Bits */
N#define RTC_C_AMINHR_HOUR_HD_OFS                 (12)                            /*!< HoursHighDigit Bit Offset */
N#define RTC_C_AMINHR_HOUR_HD_MASK                ((uint16_t)0x3000)              /*!< HoursHighDigit Bit Mask */
N/* RTC_C_ADOWDAY[DOW] Bits */
N#define RTC_C_ADOWDAY_DOW_OFS                    ( 0)                            /*!< DayofWeek Bit Offset */
N#define RTC_C_ADOWDAY_DOW_MASK                   ((uint16_t)0x0007)              /*!< DayofWeek Bit Mask */
N/* RTC_C_ADOWDAY[DOWAE] Bits */
N#define RTC_C_ADOWDAY_DOWAE_OFS                  ( 7)                            /*!< DOWAE Bit Offset */
N#define RTC_C_ADOWDAY_DOWAE                      ((uint16_t)0x0080)              /*!< Alarm enable */
N/* RTC_C_ADOWDAY[DAY] Bits */
N#define RTC_C_ADOWDAY_DAY_OFS                    ( 8)                            /*!< DayofMonth Bit Offset */
N#define RTC_C_ADOWDAY_DAY_MASK                   ((uint16_t)0x1F00)              /*!< DayofMonth Bit Mask */
N/* RTC_C_ADOWDAY[DAYAE] Bits */
N#define RTC_C_ADOWDAY_DAYAE_OFS                  (15)                            /*!< DAYAE Bit Offset */
N#define RTC_C_ADOWDAY_DAYAE                      ((uint16_t)0x8000)              /*!< Alarm enable */
N/* RTC_C_ADOWDAY[DAY_LD] Bits */
N#define RTC_C_ADOWDAY_DAY_LD_OFS                 ( 8)                            /*!< DayLowDigit Bit Offset */
N#define RTC_C_ADOWDAY_DAY_LD_MASK                ((uint16_t)0x0F00)              /*!< DayLowDigit Bit Mask */
N/* RTC_C_ADOWDAY[DAY_HD] Bits */
N#define RTC_C_ADOWDAY_DAY_HD_OFS                 (12)                            /*!< DayHighDigit Bit Offset */
N#define RTC_C_ADOWDAY_DAY_HD_MASK                ((uint16_t)0x3000)              /*!< DayHighDigit Bit Mask */
N/* Pre-defined bitfield values */
N#define RTC_C_KEY                                 ((uint16_t)0xA500)              /*!< RTC_C Key Value for RTC_C write access */
N#define RTC_C_KEY_H                               ((uint16_t)0x00A5)              /*!< RTC_C Key Value for RTC_C write access */
N#define RTC_C_KEY_VAL                             ((uint16_t)0xA500)              /*!< RTC_C Key Value for RTC_C write access */
N
N
N/******************************************************************************
N* SCB Bits
N******************************************************************************/
N/* SCB_PFR0[STATE0] Bits */
N#define SCB_PFR0_STATE0_OFS                      ( 0)                            /*!< STATE0 Bit Offset */
N#define SCB_PFR0_STATE0_MASK                     ((uint32_t)0x0000000F)          /*!< STATE0 Bit Mask */
N#define SCB_PFR0_STATE00                         ((uint32_t)0x00000001)          /*!< STATE0 Bit 0 */
N#define SCB_PFR0_STATE01                         ((uint32_t)0x00000002)          /*!< STATE0 Bit 1 */
N#define SCB_PFR0_STATE02                         ((uint32_t)0x00000004)          /*!< STATE0 Bit 2 */
N#define SCB_PFR0_STATE03                         ((uint32_t)0x00000008)          /*!< STATE0 Bit 3 */
N#define SCB_PFR0_STATE0_0                        ((uint32_t)0x00000000)          /*!< no ARM encoding */
N#define SCB_PFR0_STATE0_1                        ((uint32_t)0x00000001)          /*!< N/A */
N/* SCB_PFR0[STATE1] Bits */
N#define SCB_PFR0_STATE1_OFS                      ( 4)                            /*!< STATE1 Bit Offset */
N#define SCB_PFR0_STATE1_MASK                     ((uint32_t)0x000000F0)          /*!< STATE1 Bit Mask */
N#define SCB_PFR0_STATE10                         ((uint32_t)0x00000010)          /*!< STATE1 Bit 0 */
N#define SCB_PFR0_STATE11                         ((uint32_t)0x00000020)          /*!< STATE1 Bit 1 */
N#define SCB_PFR0_STATE12                         ((uint32_t)0x00000040)          /*!< STATE1 Bit 2 */
N#define SCB_PFR0_STATE13                         ((uint32_t)0x00000080)          /*!< STATE1 Bit 3 */
N#define SCB_PFR0_STATE1_0                        ((uint32_t)0x00000000)          /*!< N/A */
N#define SCB_PFR0_STATE1_1                        ((uint32_t)0x00000010)          /*!< N/A */
N#define SCB_PFR0_STATE1_2                        ((uint32_t)0x00000020)          /*!< Thumb-2 encoding with the 16-bit basic instructions plus 32-bit Buncond/BL  */
N                                                                                 /* but no other 32-bit basic instructions (Note non-basic 32-bit instructions */
N                                                                                 /* can be added using the appropriate instruction attribute, but other 32-bit */
N                                                                                 /* basic instructions cannot.) */
N#define SCB_PFR0_STATE1_3                        ((uint32_t)0x00000030)          /*!< Thumb-2 encoding with all Thumb-2 basic instructions */
N/* SCB_PFR1[MICROCONTROLLER_PROGRAMMERS_MODEL] Bits */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL_OFS ( 8)                            /*!< MICROCONTROLLER_PROGRAMMERS_MODEL Bit Offset */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL_MASK ((uint32_t)0x00000F00)          /*!< MICROCONTROLLER_PROGRAMMERS_MODEL Bit Mask */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL0 ((uint32_t)0x00000100)          /*!< MICROCONTROLLER_PROGRAMMERS_MODEL Bit 0 */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL1 ((uint32_t)0x00000200)          /*!< MICROCONTROLLER_PROGRAMMERS_MODEL Bit 1 */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL2 ((uint32_t)0x00000400)          /*!< MICROCONTROLLER_PROGRAMMERS_MODEL Bit 2 */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL3 ((uint32_t)0x00000800)          /*!< MICROCONTROLLER_PROGRAMMERS_MODEL Bit 3 */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL_0 ((uint32_t)0x00000000)          /*!< not supported */
N#define SCB_PFR1_MICROCONTROLLER_PROGRAMMERS_MODEL_2 ((uint32_t)0x00000200)          /*!< two-stack support */
N/* SCB_DFR0[MICROCONTROLLER_DEBUG_MODEL] Bits */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL_OFS (20)                            /*!< MICROCONTROLLER_DEBUG_MODEL Bit Offset */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL_MASK ((uint32_t)0x00F00000)          /*!< MICROCONTROLLER_DEBUG_MODEL Bit Mask */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL0    ((uint32_t)0x00100000)          /*!< MICROCONTROLLER_DEBUG_MODEL Bit 0 */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL1    ((uint32_t)0x00200000)          /*!< MICROCONTROLLER_DEBUG_MODEL Bit 1 */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL2    ((uint32_t)0x00400000)          /*!< MICROCONTROLLER_DEBUG_MODEL Bit 2 */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL3    ((uint32_t)0x00800000)          /*!< MICROCONTROLLER_DEBUG_MODEL Bit 3 */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL_0   ((uint32_t)0x00000000)          /*!< not supported */
N#define SCB_DFR0_MICROCONTROLLER_DEBUG_MODEL_1   ((uint32_t)0x00100000)          /*!< Microcontroller debug v1 (ITMv1, DWTv1, optional ETM) */
N/* SCB_MMFR0[PMSA_SUPPORT] Bits */
N#define SCB_MMFR0_PMSA_SUPPORT_OFS               ( 4)                            /*!< PMSA_SUPPORT Bit Offset */
N#define SCB_MMFR0_PMSA_SUPPORT_MASK              ((uint32_t)0x000000F0)          /*!< PMSA_SUPPORT Bit Mask */
N#define SCB_MMFR0_PMSA_SUPPORT0                  ((uint32_t)0x00000010)          /*!< PMSA_SUPPORT Bit 0 */
N#define SCB_MMFR0_PMSA_SUPPORT1                  ((uint32_t)0x00000020)          /*!< PMSA_SUPPORT Bit 1 */
N#define SCB_MMFR0_PMSA_SUPPORT2                  ((uint32_t)0x00000040)          /*!< PMSA_SUPPORT Bit 2 */
N#define SCB_MMFR0_PMSA_SUPPORT3                  ((uint32_t)0x00000080)          /*!< PMSA_SUPPORT Bit 3 */
N#define SCB_MMFR0_PMSA_SUPPORT_0                 ((uint32_t)0x00000000)          /*!< not supported */
N#define SCB_MMFR0_PMSA_SUPPORT_1                 ((uint32_t)0x00000010)          /*!< IMPLEMENTATION DEFINED (N/A) */
N#define SCB_MMFR0_PMSA_SUPPORT_2                 ((uint32_t)0x00000020)          /*!< PMSA base (features as defined for ARMv6) (N/A) */
N#define SCB_MMFR0_PMSA_SUPPORT_3                 ((uint32_t)0x00000030)          /*!< PMSAv7 (base plus subregion support) */
N/* SCB_MMFR0[CACHE_COHERENCE_SUPPORT] Bits */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT_OFS    ( 8)                            /*!< CACHE_COHERENCE_SUPPORT Bit Offset */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT_MASK   ((uint32_t)0x00000F00)          /*!< CACHE_COHERENCE_SUPPORT Bit Mask */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT0       ((uint32_t)0x00000100)          /*!< CACHE_COHERENCE_SUPPORT Bit 0 */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT1       ((uint32_t)0x00000200)          /*!< CACHE_COHERENCE_SUPPORT Bit 1 */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT2       ((uint32_t)0x00000400)          /*!< CACHE_COHERENCE_SUPPORT Bit 2 */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT3       ((uint32_t)0x00000800)          /*!< CACHE_COHERENCE_SUPPORT Bit 3 */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT_0      ((uint32_t)0x00000000)          /*!< no shared support */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT_1      ((uint32_t)0x00000100)          /*!< partial-inner-shared coherency (coherency amongst some - but not all - of  */
N                                                                                 /* the entities within an inner-coherent domain) */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT_2      ((uint32_t)0x00000200)          /*!< full-inner-shared coherency (coherency amongst all of the entities within an  */
N                                                                                 /* inner-coherent domain) */
N#define SCB_MMFR0_CACHE_COHERENCE_SUPPORT_3      ((uint32_t)0x00000300)          /*!< full coherency (coherency amongst all of the entities) */
N/* SCB_MMFR0[OUTER_NON_SHARABLE_SUPPORT] Bits */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT_OFS (12)                            /*!< OUTER_NON_SHARABLE_SUPPORT Bit Offset */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT_MASK ((uint32_t)0x0000F000)          /*!< OUTER_NON_SHARABLE_SUPPORT Bit Mask */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT0    ((uint32_t)0x00001000)          /*!< OUTER_NON_SHARABLE_SUPPORT Bit 0 */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT1    ((uint32_t)0x00002000)          /*!< OUTER_NON_SHARABLE_SUPPORT Bit 1 */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT2    ((uint32_t)0x00004000)          /*!< OUTER_NON_SHARABLE_SUPPORT Bit 2 */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT3    ((uint32_t)0x00008000)          /*!< OUTER_NON_SHARABLE_SUPPORT Bit 3 */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT_0   ((uint32_t)0x00000000)          /*!< Outer non-sharable not supported */
N#define SCB_MMFR0_OUTER_NON_SHARABLE_SUPPORT_1   ((uint32_t)0x00001000)          /*!< Outer sharable supported */
N/* SCB_MMFR0[AUILIARY_REGISTER_SUPPORT] Bits */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT_OFS  (20)                            /*!< AUXILIARY_REGISTER_SUPPORT Bit Offset */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT_MASK ((uint32_t)0x00F00000)          /*!< AUXILIARY_REGISTER_SUPPORT Bit Mask */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT0     ((uint32_t)0x00100000)          /*!< AUILIARY_REGISTER_SUPPORT Bit 0 */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT1     ((uint32_t)0x00200000)          /*!< AUILIARY_REGISTER_SUPPORT Bit 1 */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT2     ((uint32_t)0x00400000)          /*!< AUILIARY_REGISTER_SUPPORT Bit 2 */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT3     ((uint32_t)0x00800000)          /*!< AUILIARY_REGISTER_SUPPORT Bit 3 */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT_0    ((uint32_t)0x00000000)          /*!< not supported */
N#define SCB_MMFR0_AUILIARY_REGISTER_SUPPORT_1    ((uint32_t)0x00100000)          /*!< Auxiliary control register */
N/* SCB_MMFR2[WAIT_FOR_INTERRUPT_STALLING] Bits */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING_OFS (24)                            /*!< WAIT_FOR_INTERRUPT_STALLING Bit Offset */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING_MASK ((uint32_t)0x0F000000)          /*!< WAIT_FOR_INTERRUPT_STALLING Bit Mask */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING0   ((uint32_t)0x01000000)          /*!< WAIT_FOR_INTERRUPT_STALLING Bit 0 */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING1   ((uint32_t)0x02000000)          /*!< WAIT_FOR_INTERRUPT_STALLING Bit 1 */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING2   ((uint32_t)0x04000000)          /*!< WAIT_FOR_INTERRUPT_STALLING Bit 2 */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING3   ((uint32_t)0x08000000)          /*!< WAIT_FOR_INTERRUPT_STALLING Bit 3 */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING_0  ((uint32_t)0x00000000)          /*!< not supported */
N#define SCB_MMFR2_WAIT_FOR_INTERRUPT_STALLING_1  ((uint32_t)0x01000000)          /*!< wait for interrupt supported */
N/* SCB_ISAR0[BITCOUNT_INSTRS] Bits */
N#define SCB_ISAR0_BITCOUNT_INSTRS_OFS            ( 4)                            /*!< BITCOUNT_INSTRS Bit Offset */
N#define SCB_ISAR0_BITCOUNT_INSTRS_MASK           ((uint32_t)0x000000F0)          /*!< BITCOUNT_INSTRS Bit Mask */
N#define SCB_ISAR0_BITCOUNT_INSTRS0               ((uint32_t)0x00000010)          /*!< BITCOUNT_INSTRS Bit 0 */
N#define SCB_ISAR0_BITCOUNT_INSTRS1               ((uint32_t)0x00000020)          /*!< BITCOUNT_INSTRS Bit 1 */
N#define SCB_ISAR0_BITCOUNT_INSTRS2               ((uint32_t)0x00000040)          /*!< BITCOUNT_INSTRS Bit 2 */
N#define SCB_ISAR0_BITCOUNT_INSTRS3               ((uint32_t)0x00000080)          /*!< BITCOUNT_INSTRS Bit 3 */
N#define SCB_ISAR0_BITCOUNT_INSTRS_0              ((uint32_t)0x00000000)          /*!< no bit-counting instructions present */
N#define SCB_ISAR0_BITCOUNT_INSTRS_1              ((uint32_t)0x00000010)          /*!< adds CLZ */
N/* SCB_ISAR0[BITFIELD_INSTRS] Bits */
N#define SCB_ISAR0_BITFIELD_INSTRS_OFS            ( 8)                            /*!< BITFIELD_INSTRS Bit Offset */
N#define SCB_ISAR0_BITFIELD_INSTRS_MASK           ((uint32_t)0x00000F00)          /*!< BITFIELD_INSTRS Bit Mask */
N#define SCB_ISAR0_BITFIELD_INSTRS0               ((uint32_t)0x00000100)          /*!< BITFIELD_INSTRS Bit 0 */
N#define SCB_ISAR0_BITFIELD_INSTRS1               ((uint32_t)0x00000200)          /*!< BITFIELD_INSTRS Bit 1 */
N#define SCB_ISAR0_BITFIELD_INSTRS2               ((uint32_t)0x00000400)          /*!< BITFIELD_INSTRS Bit 2 */
N#define SCB_ISAR0_BITFIELD_INSTRS3               ((uint32_t)0x00000800)          /*!< BITFIELD_INSTRS Bit 3 */
N#define SCB_ISAR0_BITFIELD_INSTRS_0              ((uint32_t)0x00000000)          /*!< no bitfield instructions present */
N#define SCB_ISAR0_BITFIELD_INSTRS_1              ((uint32_t)0x00000100)          /*!< adds BFC, BFI, SBFX, UBFX */
N/* SCB_ISAR0[CMPBRANCH_INSTRS] Bits */
N#define SCB_ISAR0_CMPBRANCH_INSTRS_OFS           (12)                            /*!< CMPBRANCH_INSTRS Bit Offset */
N#define SCB_ISAR0_CMPBRANCH_INSTRS_MASK          ((uint32_t)0x0000F000)          /*!< CMPBRANCH_INSTRS Bit Mask */
N#define SCB_ISAR0_CMPBRANCH_INSTRS0              ((uint32_t)0x00001000)          /*!< CMPBRANCH_INSTRS Bit 0 */
N#define SCB_ISAR0_CMPBRANCH_INSTRS1              ((uint32_t)0x00002000)          /*!< CMPBRANCH_INSTRS Bit 1 */
N#define SCB_ISAR0_CMPBRANCH_INSTRS2              ((uint32_t)0x00004000)          /*!< CMPBRANCH_INSTRS Bit 2 */
N#define SCB_ISAR0_CMPBRANCH_INSTRS3              ((uint32_t)0x00008000)          /*!< CMPBRANCH_INSTRS Bit 3 */
N#define SCB_ISAR0_CMPBRANCH_INSTRS_0             ((uint32_t)0x00000000)          /*!< no combined compare-and-branch instructions present */
N#define SCB_ISAR0_CMPBRANCH_INSTRS_1             ((uint32_t)0x00001000)          /*!< adds CB{N}Z */
N/* SCB_ISAR0[COPROC_INSTRS] Bits */
N#define SCB_ISAR0_COPROC_INSTRS_OFS              (16)                            /*!< COPROC_INSTRS Bit Offset */
N#define SCB_ISAR0_COPROC_INSTRS_MASK             ((uint32_t)0x000F0000)          /*!< COPROC_INSTRS Bit Mask */
N#define SCB_ISAR0_COPROC_INSTRS0                 ((uint32_t)0x00010000)          /*!< COPROC_INSTRS Bit 0 */
N#define SCB_ISAR0_COPROC_INSTRS1                 ((uint32_t)0x00020000)          /*!< COPROC_INSTRS Bit 1 */
N#define SCB_ISAR0_COPROC_INSTRS2                 ((uint32_t)0x00040000)          /*!< COPROC_INSTRS Bit 2 */
N#define SCB_ISAR0_COPROC_INSTRS3                 ((uint32_t)0x00080000)          /*!< COPROC_INSTRS Bit 3 */
N#define SCB_ISAR0_COPROC_INSTRS_0                ((uint32_t)0x00000000)          /*!< no coprocessor support, other than for separately attributed architectures  */
N                                                                                 /* such as CP15 or VFP */
N#define SCB_ISAR0_COPROC_INSTRS_1                ((uint32_t)0x00010000)          /*!< adds generic CDP, LDC, MCR, MRC, STC */
N#define SCB_ISAR0_COPROC_INSTRS_2                ((uint32_t)0x00020000)          /*!< adds generic CDP2, LDC2, MCR2, MRC2, STC2 */
N#define SCB_ISAR0_COPROC_INSTRS_3                ((uint32_t)0x00030000)          /*!< adds generic MCRR, MRRC */
N#define SCB_ISAR0_COPROC_INSTRS_4                ((uint32_t)0x00040000)          /*!< adds generic MCRR2, MRRC2 */
N/* SCB_ISAR0[DEBUG_INSTRS] Bits */
N#define SCB_ISAR0_DEBUG_INSTRS_OFS               (20)                            /*!< DEBUG_INSTRS Bit Offset */
N#define SCB_ISAR0_DEBUG_INSTRS_MASK              ((uint32_t)0x00F00000)          /*!< DEBUG_INSTRS Bit Mask */
N#define SCB_ISAR0_DEBUG_INSTRS0                  ((uint32_t)0x00100000)          /*!< DEBUG_INSTRS Bit 0 */
N#define SCB_ISAR0_DEBUG_INSTRS1                  ((uint32_t)0x00200000)          /*!< DEBUG_INSTRS Bit 1 */
N#define SCB_ISAR0_DEBUG_INSTRS2                  ((uint32_t)0x00400000)          /*!< DEBUG_INSTRS Bit 2 */
N#define SCB_ISAR0_DEBUG_INSTRS3                  ((uint32_t)0x00800000)          /*!< DEBUG_INSTRS Bit 3 */
N#define SCB_ISAR0_DEBUG_INSTRS_0                 ((uint32_t)0x00000000)          /*!< no debug instructions present */
N#define SCB_ISAR0_DEBUG_INSTRS_1                 ((uint32_t)0x00100000)          /*!< adds BKPT */
N/* SCB_ISAR0[DIVIDE_INSTRS] Bits */
N#define SCB_ISAR0_DIVIDE_INSTRS_OFS              (24)                            /*!< DIVIDE_INSTRS Bit Offset */
N#define SCB_ISAR0_DIVIDE_INSTRS_MASK             ((uint32_t)0x0F000000)          /*!< DIVIDE_INSTRS Bit Mask */
N#define SCB_ISAR0_DIVIDE_INSTRS0                 ((uint32_t)0x01000000)          /*!< DIVIDE_INSTRS Bit 0 */
N#define SCB_ISAR0_DIVIDE_INSTRS1                 ((uint32_t)0x02000000)          /*!< DIVIDE_INSTRS Bit 1 */
N#define SCB_ISAR0_DIVIDE_INSTRS2                 ((uint32_t)0x04000000)          /*!< DIVIDE_INSTRS Bit 2 */
N#define SCB_ISAR0_DIVIDE_INSTRS3                 ((uint32_t)0x08000000)          /*!< DIVIDE_INSTRS Bit 3 */
N#define SCB_ISAR0_DIVIDE_INSTRS_0                ((uint32_t)0x00000000)          /*!< no divide instructions present */
N#define SCB_ISAR0_DIVIDE_INSTRS_1                ((uint32_t)0x01000000)          /*!< adds SDIV, UDIV (v1 quotient only result) */
N/* SCB_ISAR1[ETEND_INSRS] Bits */
N#define SCB_ISAR1_ETEND_INSRS_OFS                (12)                            /*!< EXTEND_INSRS Bit Offset */
N#define SCB_ISAR1_ETEND_INSRS_MASK               ((uint32_t)0x0000F000)          /*!< EXTEND_INSRS Bit Mask */
N#define SCB_ISAR1_ETEND_INSRS0                   ((uint32_t)0x00001000)          /*!< ETEND_INSRS Bit 0 */
N#define SCB_ISAR1_ETEND_INSRS1                   ((uint32_t)0x00002000)          /*!< ETEND_INSRS Bit 1 */
N#define SCB_ISAR1_ETEND_INSRS2                   ((uint32_t)0x00004000)          /*!< ETEND_INSRS Bit 2 */
N#define SCB_ISAR1_ETEND_INSRS3                   ((uint32_t)0x00008000)          /*!< ETEND_INSRS Bit 3 */
N#define SCB_ISAR1_ETEND_INSRS_0                  ((uint32_t)0x00000000)          /*!< no scalar (i.e. non-SIMD) sign/zero-extend instructions present */
N#define SCB_ISAR1_ETEND_INSRS_1                  ((uint32_t)0x00001000)          /*!< adds SXTB, SXTH, UXTB, UXTH */
N#define SCB_ISAR1_ETEND_INSRS_2                  ((uint32_t)0x00002000)          /*!< N/A */
N/* SCB_ISAR1[IFTHEN_INSTRS] Bits */
N#define SCB_ISAR1_IFTHEN_INSTRS_OFS              (16)                            /*!< IFTHEN_INSTRS Bit Offset */
N#define SCB_ISAR1_IFTHEN_INSTRS_MASK             ((uint32_t)0x000F0000)          /*!< IFTHEN_INSTRS Bit Mask */
N#define SCB_ISAR1_IFTHEN_INSTRS0                 ((uint32_t)0x00010000)          /*!< IFTHEN_INSTRS Bit 0 */
N#define SCB_ISAR1_IFTHEN_INSTRS1                 ((uint32_t)0x00020000)          /*!< IFTHEN_INSTRS Bit 1 */
N#define SCB_ISAR1_IFTHEN_INSTRS2                 ((uint32_t)0x00040000)          /*!< IFTHEN_INSTRS Bit 2 */
N#define SCB_ISAR1_IFTHEN_INSTRS3                 ((uint32_t)0x00080000)          /*!< IFTHEN_INSTRS Bit 3 */
N#define SCB_ISAR1_IFTHEN_INSTRS_0                ((uint32_t)0x00000000)          /*!< IT instructions not present */
N#define SCB_ISAR1_IFTHEN_INSTRS_1                ((uint32_t)0x00010000)          /*!< adds IT instructions (and IT bits in PSRs) */
N/* SCB_ISAR1[IMMEDIATE_INSTRS] Bits */
N#define SCB_ISAR1_IMMEDIATE_INSTRS_OFS           (20)                            /*!< IMMEDIATE_INSTRS Bit Offset */
N#define SCB_ISAR1_IMMEDIATE_INSTRS_MASK          ((uint32_t)0x00F00000)          /*!< IMMEDIATE_INSTRS Bit Mask */
N#define SCB_ISAR1_IMMEDIATE_INSTRS0              ((uint32_t)0x00100000)          /*!< IMMEDIATE_INSTRS Bit 0 */
N#define SCB_ISAR1_IMMEDIATE_INSTRS1              ((uint32_t)0x00200000)          /*!< IMMEDIATE_INSTRS Bit 1 */
N#define SCB_ISAR1_IMMEDIATE_INSTRS2              ((uint32_t)0x00400000)          /*!< IMMEDIATE_INSTRS Bit 2 */
N#define SCB_ISAR1_IMMEDIATE_INSTRS3              ((uint32_t)0x00800000)          /*!< IMMEDIATE_INSTRS Bit 3 */
N#define SCB_ISAR1_IMMEDIATE_INSTRS_0             ((uint32_t)0x00000000)          /*!< no special immediate-generating instructions present */
N#define SCB_ISAR1_IMMEDIATE_INSTRS_1             ((uint32_t)0x00100000)          /*!< adds ADDW, MOVW, MOVT, SUBW */
N/* SCB_ISAR1[INTERWORK_INSTRS] Bits */
N#define SCB_ISAR1_INTERWORK_INSTRS_OFS           (24)                            /*!< INTERWORK_INSTRS Bit Offset */
N#define SCB_ISAR1_INTERWORK_INSTRS_MASK          ((uint32_t)0x0F000000)          /*!< INTERWORK_INSTRS Bit Mask */
N#define SCB_ISAR1_INTERWORK_INSTRS0              ((uint32_t)0x01000000)          /*!< INTERWORK_INSTRS Bit 0 */
N#define SCB_ISAR1_INTERWORK_INSTRS1              ((uint32_t)0x02000000)          /*!< INTERWORK_INSTRS Bit 1 */
N#define SCB_ISAR1_INTERWORK_INSTRS2              ((uint32_t)0x04000000)          /*!< INTERWORK_INSTRS Bit 2 */
N#define SCB_ISAR1_INTERWORK_INSTRS3              ((uint32_t)0x08000000)          /*!< INTERWORK_INSTRS Bit 3 */
N#define SCB_ISAR1_INTERWORK_INSTRS_0             ((uint32_t)0x00000000)          /*!< no interworking instructions supported */
N#define SCB_ISAR1_INTERWORK_INSTRS_1             ((uint32_t)0x01000000)          /*!< adds BX (and T bit in PSRs) */
N#define SCB_ISAR1_INTERWORK_INSTRS_2             ((uint32_t)0x02000000)          /*!< adds BLX, and PC loads have BX-like behavior */
N#define SCB_ISAR1_INTERWORK_INSTRS_3             ((uint32_t)0x03000000)          /*!< N/A */
N/* SCB_ISAR2[LOADSTORE_INSTRS] Bits */
N#define SCB_ISAR2_LOADSTORE_INSTRS_OFS           ( 0)                            /*!< LOADSTORE_INSTRS Bit Offset */
N#define SCB_ISAR2_LOADSTORE_INSTRS_MASK          ((uint32_t)0x0000000F)          /*!< LOADSTORE_INSTRS Bit Mask */
N#define SCB_ISAR2_LOADSTORE_INSTRS0              ((uint32_t)0x00000001)          /*!< LOADSTORE_INSTRS Bit 0 */
N#define SCB_ISAR2_LOADSTORE_INSTRS1              ((uint32_t)0x00000002)          /*!< LOADSTORE_INSTRS Bit 1 */
N#define SCB_ISAR2_LOADSTORE_INSTRS2              ((uint32_t)0x00000004)          /*!< LOADSTORE_INSTRS Bit 2 */
N#define SCB_ISAR2_LOADSTORE_INSTRS3              ((uint32_t)0x00000008)          /*!< LOADSTORE_INSTRS Bit 3 */
N#define SCB_ISAR2_LOADSTORE_INSTRS_0             ((uint32_t)0x00000000)          /*!< no additional normal load/store instructions present */
N#define SCB_ISAR2_LOADSTORE_INSTRS_1             ((uint32_t)0x00000001)          /*!< adds LDRD/STRD */
N/* SCB_ISAR2[MEMHINT_INSTRS] Bits */
N#define SCB_ISAR2_MEMHINT_INSTRS_OFS             ( 4)                            /*!< MEMHINT_INSTRS Bit Offset */
N#define SCB_ISAR2_MEMHINT_INSTRS_MASK            ((uint32_t)0x000000F0)          /*!< MEMHINT_INSTRS Bit Mask */
N#define SCB_ISAR2_MEMHINT_INSTRS0                ((uint32_t)0x00000010)          /*!< MEMHINT_INSTRS Bit 0 */
N#define SCB_ISAR2_MEMHINT_INSTRS1                ((uint32_t)0x00000020)          /*!< MEMHINT_INSTRS Bit 1 */
N#define SCB_ISAR2_MEMHINT_INSTRS2                ((uint32_t)0x00000040)          /*!< MEMHINT_INSTRS Bit 2 */
N#define SCB_ISAR2_MEMHINT_INSTRS3                ((uint32_t)0x00000080)          /*!< MEMHINT_INSTRS Bit 3 */
N#define SCB_ISAR2_MEMHINT_INSTRS_0               ((uint32_t)0x00000000)          /*!< no memory hint instructions presen */
N#define SCB_ISAR2_MEMHINT_INSTRS_1               ((uint32_t)0x00000010)          /*!< adds PLD */
N#define SCB_ISAR2_MEMHINT_INSTRS_2               ((uint32_t)0x00000020)          /*!< adds PLD (ie a repeat on value 1) */
N#define SCB_ISAR2_MEMHINT_INSTRS_3               ((uint32_t)0x00000030)          /*!< adds PLI */
N/* SCB_ISAR2[MULTIACCESSINT_INSTRS] Bits */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS_OFS      ( 8)                            /*!< MULTIACCESSINT_INSTRS Bit Offset */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS_MASK     ((uint32_t)0x00000F00)          /*!< MULTIACCESSINT_INSTRS Bit Mask */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS0         ((uint32_t)0x00000100)          /*!< MULTIACCESSINT_INSTRS Bit 0 */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS1         ((uint32_t)0x00000200)          /*!< MULTIACCESSINT_INSTRS Bit 1 */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS2         ((uint32_t)0x00000400)          /*!< MULTIACCESSINT_INSTRS Bit 2 */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS3         ((uint32_t)0x00000800)          /*!< MULTIACCESSINT_INSTRS Bit 3 */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS_0        ((uint32_t)0x00000000)          /*!< the (LDM/STM) instructions are non-interruptible */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS_1        ((uint32_t)0x00000100)          /*!< the (LDM/STM) instructions are restartable */
N#define SCB_ISAR2_MULTIACCESSINT_INSTRS_2        ((uint32_t)0x00000200)          /*!< the (LDM/STM) instructions are continuable */
N/* SCB_ISAR2[MULT_INSTRS] Bits */
N#define SCB_ISAR2_MULT_INSTRS_OFS                (12)                            /*!< MULT_INSTRS Bit Offset */
N#define SCB_ISAR2_MULT_INSTRS_MASK               ((uint32_t)0x0000F000)          /*!< MULT_INSTRS Bit Mask */
N#define SCB_ISAR2_MULT_INSTRS0                   ((uint32_t)0x00001000)          /*!< MULT_INSTRS Bit 0 */
N#define SCB_ISAR2_MULT_INSTRS1                   ((uint32_t)0x00002000)          /*!< MULT_INSTRS Bit 1 */
N#define SCB_ISAR2_MULT_INSTRS2                   ((uint32_t)0x00004000)          /*!< MULT_INSTRS Bit 2 */
N#define SCB_ISAR2_MULT_INSTRS3                   ((uint32_t)0x00008000)          /*!< MULT_INSTRS Bit 3 */
N#define SCB_ISAR2_MULT_INSTRS_0                  ((uint32_t)0x00000000)          /*!< only MUL present */
N#define SCB_ISAR2_MULT_INSTRS_1                  ((uint32_t)0x00001000)          /*!< adds MLA */
N#define SCB_ISAR2_MULT_INSTRS_2                  ((uint32_t)0x00002000)          /*!< adds MLS */
N/* SCB_ISAR2[MULTS_INSTRS] Bits */
N#define SCB_ISAR2_MULTS_INSTRS_OFS               (16)                            /*!< MULTS_INSTRS Bit Offset */
N#define SCB_ISAR2_MULTS_INSTRS_MASK              ((uint32_t)0x000F0000)          /*!< MULTS_INSTRS Bit Mask */
N#define SCB_ISAR2_MULTS_INSTRS0                  ((uint32_t)0x00010000)          /*!< MULTS_INSTRS Bit 0 */
N#define SCB_ISAR2_MULTS_INSTRS1                  ((uint32_t)0x00020000)          /*!< MULTS_INSTRS Bit 1 */
N#define SCB_ISAR2_MULTS_INSTRS2                  ((uint32_t)0x00040000)          /*!< MULTS_INSTRS Bit 2 */
N#define SCB_ISAR2_MULTS_INSTRS3                  ((uint32_t)0x00080000)          /*!< MULTS_INSTRS Bit 3 */
N#define SCB_ISAR2_MULTS_INSTRS_0                 ((uint32_t)0x00000000)          /*!< no signed multiply instructions present */
N#define SCB_ISAR2_MULTS_INSTRS_1                 ((uint32_t)0x00010000)          /*!< adds SMULL, SMLAL */
N#define SCB_ISAR2_MULTS_INSTRS_2                 ((uint32_t)0x00020000)          /*!< N/A */
N#define SCB_ISAR2_MULTS_INSTRS_3                 ((uint32_t)0x00030000)          /*!< N/A */
N/* SCB_ISAR2[MULTU_INSTRS] Bits */
N#define SCB_ISAR2_MULTU_INSTRS_OFS               (20)                            /*!< MULTU_INSTRS Bit Offset */
N#define SCB_ISAR2_MULTU_INSTRS_MASK              ((uint32_t)0x00F00000)          /*!< MULTU_INSTRS Bit Mask */
N#define SCB_ISAR2_MULTU_INSTRS0                  ((uint32_t)0x00100000)          /*!< MULTU_INSTRS Bit 0 */
N#define SCB_ISAR2_MULTU_INSTRS1                  ((uint32_t)0x00200000)          /*!< MULTU_INSTRS Bit 1 */
N#define SCB_ISAR2_MULTU_INSTRS2                  ((uint32_t)0x00400000)          /*!< MULTU_INSTRS Bit 2 */
N#define SCB_ISAR2_MULTU_INSTRS3                  ((uint32_t)0x00800000)          /*!< MULTU_INSTRS Bit 3 */
N#define SCB_ISAR2_MULTU_INSTRS_0                 ((uint32_t)0x00000000)          /*!< no unsigned multiply instructions present */
N#define SCB_ISAR2_MULTU_INSTRS_1                 ((uint32_t)0x00100000)          /*!< adds UMULL, UMLAL */
N#define SCB_ISAR2_MULTU_INSTRS_2                 ((uint32_t)0x00200000)          /*!< N/A */
N/* SCB_ISAR2[REVERSAL_INSTRS] Bits */
N#define SCB_ISAR2_REVERSAL_INSTRS_OFS            (28)                            /*!< REVERSAL_INSTRS Bit Offset */
N#define SCB_ISAR2_REVERSAL_INSTRS_MASK           ((uint32_t)0xF0000000)          /*!< REVERSAL_INSTRS Bit Mask */
N#define SCB_ISAR2_REVERSAL_INSTRS0               ((uint32_t)0x10000000)          /*!< REVERSAL_INSTRS Bit 0 */
N#define SCB_ISAR2_REVERSAL_INSTRS1               ((uint32_t)0x20000000)          /*!< REVERSAL_INSTRS Bit 1 */
N#define SCB_ISAR2_REVERSAL_INSTRS2               ((uint32_t)0x40000000)          /*!< REVERSAL_INSTRS Bit 2 */
N#define SCB_ISAR2_REVERSAL_INSTRS3               ((uint32_t)0x80000000)          /*!< REVERSAL_INSTRS Bit 3 */
N#define SCB_ISAR2_REVERSAL_INSTRS_0              ((uint32_t)0x00000000)          /*!< no reversal instructions present */
N#define SCB_ISAR2_REVERSAL_INSTRS_1              ((uint32_t)0x10000000)          /*!< adds REV, REV16, REVSH */
N#define SCB_ISAR2_REVERSAL_INSTRS_2              ((uint32_t)0x20000000)          /*!< adds RBIT */
N/* SCB_ISAR3[SATRUATE_INSTRS] Bits */
N#define SCB_ISAR3_SATRUATE_INSTRS_OFS            ( 0)                            /*!< SATRUATE_INSTRS Bit Offset */
N#define SCB_ISAR3_SATRUATE_INSTRS_MASK           ((uint32_t)0x0000000F)          /*!< SATRUATE_INSTRS Bit Mask */
N#define SCB_ISAR3_SATRUATE_INSTRS0               ((uint32_t)0x00000001)          /*!< SATRUATE_INSTRS Bit 0 */
N#define SCB_ISAR3_SATRUATE_INSTRS1               ((uint32_t)0x00000002)          /*!< SATRUATE_INSTRS Bit 1 */
N#define SCB_ISAR3_SATRUATE_INSTRS2               ((uint32_t)0x00000004)          /*!< SATRUATE_INSTRS Bit 2 */
N#define SCB_ISAR3_SATRUATE_INSTRS3               ((uint32_t)0x00000008)          /*!< SATRUATE_INSTRS Bit 3 */
N#define SCB_ISAR3_SATRUATE_INSTRS_0              ((uint32_t)0x00000000)          /*!< no non-SIMD saturate instructions present */
N#define SCB_ISAR3_SATRUATE_INSTRS_1              ((uint32_t)0x00000001)          /*!< N/A */
N/* SCB_ISAR3[SIMD_INSTRS] Bits */
N#define SCB_ISAR3_SIMD_INSTRS_OFS                ( 4)                            /*!< SIMD_INSTRS Bit Offset */
N#define SCB_ISAR3_SIMD_INSTRS_MASK               ((uint32_t)0x000000F0)          /*!< SIMD_INSTRS Bit Mask */
N#define SCB_ISAR3_SIMD_INSTRS0                   ((uint32_t)0x00000010)          /*!< SIMD_INSTRS Bit 0 */
N#define SCB_ISAR3_SIMD_INSTRS1                   ((uint32_t)0x00000020)          /*!< SIMD_INSTRS Bit 1 */
N#define SCB_ISAR3_SIMD_INSTRS2                   ((uint32_t)0x00000040)          /*!< SIMD_INSTRS Bit 2 */
N#define SCB_ISAR3_SIMD_INSTRS3                   ((uint32_t)0x00000080)          /*!< SIMD_INSTRS Bit 3 */
N#define SCB_ISAR3_SIMD_INSTRS_0                  ((uint32_t)0x00000000)          /*!< no SIMD instructions present */
N#define SCB_ISAR3_SIMD_INSTRS_1                  ((uint32_t)0x00000010)          /*!< adds SSAT, USAT (and the Q flag in the PSRs) */
N#define SCB_ISAR3_SIMD_INSTRS_3                  ((uint32_t)0x00000030)          /*!< N/A */
N/* SCB_ISAR3[SVC_INSTRS] Bits */
N#define SCB_ISAR3_SVC_INSTRS_OFS                 ( 8)                            /*!< SVC_INSTRS Bit Offset */
N#define SCB_ISAR3_SVC_INSTRS_MASK                ((uint32_t)0x00000F00)          /*!< SVC_INSTRS Bit Mask */
N#define SCB_ISAR3_SVC_INSTRS0                    ((uint32_t)0x00000100)          /*!< SVC_INSTRS Bit 0 */
N#define SCB_ISAR3_SVC_INSTRS1                    ((uint32_t)0x00000200)          /*!< SVC_INSTRS Bit 1 */
N#define SCB_ISAR3_SVC_INSTRS2                    ((uint32_t)0x00000400)          /*!< SVC_INSTRS Bit 2 */
N#define SCB_ISAR3_SVC_INSTRS3                    ((uint32_t)0x00000800)          /*!< SVC_INSTRS Bit 3 */
N#define SCB_ISAR3_SVC_INSTRS_0                   ((uint32_t)0x00000000)          /*!< no SVC (SWI) instructions present */
N#define SCB_ISAR3_SVC_INSTRS_1                   ((uint32_t)0x00000100)          /*!< adds SVC (SWI) */
N/* SCB_ISAR3[SYNCPRIM_INSTRS] Bits */
N#define SCB_ISAR3_SYNCPRIM_INSTRS_OFS            (12)                            /*!< SYNCPRIM_INSTRS Bit Offset */
N#define SCB_ISAR3_SYNCPRIM_INSTRS_MASK           ((uint32_t)0x0000F000)          /*!< SYNCPRIM_INSTRS Bit Mask */
N#define SCB_ISAR3_SYNCPRIM_INSTRS0               ((uint32_t)0x00001000)          /*!< SYNCPRIM_INSTRS Bit 0 */
N#define SCB_ISAR3_SYNCPRIM_INSTRS1               ((uint32_t)0x00002000)          /*!< SYNCPRIM_INSTRS Bit 1 */
N#define SCB_ISAR3_SYNCPRIM_INSTRS2               ((uint32_t)0x00004000)          /*!< SYNCPRIM_INSTRS Bit 2 */
N#define SCB_ISAR3_SYNCPRIM_INSTRS3               ((uint32_t)0x00008000)          /*!< SYNCPRIM_INSTRS Bit 3 */
N#define SCB_ISAR3_SYNCPRIM_INSTRS_0              ((uint32_t)0x00000000)          /*!< no synchronization primitives present */
N#define SCB_ISAR3_SYNCPRIM_INSTRS_1              ((uint32_t)0x00001000)          /*!< adds LDREX, STREX */
N#define SCB_ISAR3_SYNCPRIM_INSTRS_2              ((uint32_t)0x00002000)          /*!< adds LDREXB, LDREXH, LDREXD, STREXB, STREXH, STREXD, CLREX(N/A) */
N/* SCB_ISAR3[TABBRANCH_INSTRS] Bits */
N#define SCB_ISAR3_TABBRANCH_INSTRS_OFS           (16)                            /*!< TABBRANCH_INSTRS Bit Offset */
N#define SCB_ISAR3_TABBRANCH_INSTRS_MASK          ((uint32_t)0x000F0000)          /*!< TABBRANCH_INSTRS Bit Mask */
N#define SCB_ISAR3_TABBRANCH_INSTRS0              ((uint32_t)0x00010000)          /*!< TABBRANCH_INSTRS Bit 0 */
N#define SCB_ISAR3_TABBRANCH_INSTRS1              ((uint32_t)0x00020000)          /*!< TABBRANCH_INSTRS Bit 1 */
N#define SCB_ISAR3_TABBRANCH_INSTRS2              ((uint32_t)0x00040000)          /*!< TABBRANCH_INSTRS Bit 2 */
N#define SCB_ISAR3_TABBRANCH_INSTRS3              ((uint32_t)0x00080000)          /*!< TABBRANCH_INSTRS Bit 3 */
N#define SCB_ISAR3_TABBRANCH_INSTRS_0             ((uint32_t)0x00000000)          /*!< no table-branch instructions present */
N#define SCB_ISAR3_TABBRANCH_INSTRS_1             ((uint32_t)0x00010000)          /*!< adds TBB, TBH */
N/* SCB_ISAR3[THUMBCOPY_INSTRS] Bits */
N#define SCB_ISAR3_THUMBCOPY_INSTRS_OFS           (20)                            /*!< THUMBCOPY_INSTRS Bit Offset */
N#define SCB_ISAR3_THUMBCOPY_INSTRS_MASK          ((uint32_t)0x00F00000)          /*!< THUMBCOPY_INSTRS Bit Mask */
N#define SCB_ISAR3_THUMBCOPY_INSTRS0              ((uint32_t)0x00100000)          /*!< THUMBCOPY_INSTRS Bit 0 */
N#define SCB_ISAR3_THUMBCOPY_INSTRS1              ((uint32_t)0x00200000)          /*!< THUMBCOPY_INSTRS Bit 1 */
N#define SCB_ISAR3_THUMBCOPY_INSTRS2              ((uint32_t)0x00400000)          /*!< THUMBCOPY_INSTRS Bit 2 */
N#define SCB_ISAR3_THUMBCOPY_INSTRS3              ((uint32_t)0x00800000)          /*!< THUMBCOPY_INSTRS Bit 3 */
N#define SCB_ISAR3_THUMBCOPY_INSTRS_0             ((uint32_t)0x00000000)          /*!< Thumb MOV(register) instruction does not allow low reg -> low reg */
N#define SCB_ISAR3_THUMBCOPY_INSTRS_1             ((uint32_t)0x00100000)          /*!< adds Thumb MOV(register) low reg -> low reg and the CPY alias */
N/* SCB_ISAR3[TRUENOP_INSTRS] Bits */
N#define SCB_ISAR3_TRUENOP_INSTRS_OFS             (24)                            /*!< TRUENOP_INSTRS Bit Offset */
N#define SCB_ISAR3_TRUENOP_INSTRS_MASK            ((uint32_t)0x0F000000)          /*!< TRUENOP_INSTRS Bit Mask */
N#define SCB_ISAR3_TRUENOP_INSTRS0                ((uint32_t)0x01000000)          /*!< TRUENOP_INSTRS Bit 0 */
N#define SCB_ISAR3_TRUENOP_INSTRS1                ((uint32_t)0x02000000)          /*!< TRUENOP_INSTRS Bit 1 */
N#define SCB_ISAR3_TRUENOP_INSTRS2                ((uint32_t)0x04000000)          /*!< TRUENOP_INSTRS Bit 2 */
N#define SCB_ISAR3_TRUENOP_INSTRS3                ((uint32_t)0x08000000)          /*!< TRUENOP_INSTRS Bit 3 */
N#define SCB_ISAR3_TRUENOP_INSTRS_0               ((uint32_t)0x00000000)          /*!< true NOP instructions not present - that is, NOP instructions with no  */
N                                                                                 /* register dependencies */
N#define SCB_ISAR3_TRUENOP_INSTRS_1               ((uint32_t)0x01000000)          /*!< adds "true NOP", and the capability of additional "NOP compatible hints" */
N/* SCB_ISAR4[UNPRIV_INSTRS] Bits */
N#define SCB_ISAR4_UNPRIV_INSTRS_OFS              ( 0)                            /*!< UNPRIV_INSTRS Bit Offset */
N#define SCB_ISAR4_UNPRIV_INSTRS_MASK             ((uint32_t)0x0000000F)          /*!< UNPRIV_INSTRS Bit Mask */
N#define SCB_ISAR4_UNPRIV_INSTRS0                 ((uint32_t)0x00000001)          /*!< UNPRIV_INSTRS Bit 0 */
N#define SCB_ISAR4_UNPRIV_INSTRS1                 ((uint32_t)0x00000002)          /*!< UNPRIV_INSTRS Bit 1 */
N#define SCB_ISAR4_UNPRIV_INSTRS2                 ((uint32_t)0x00000004)          /*!< UNPRIV_INSTRS Bit 2 */
N#define SCB_ISAR4_UNPRIV_INSTRS3                 ((uint32_t)0x00000008)          /*!< UNPRIV_INSTRS Bit 3 */
N#define SCB_ISAR4_UNPRIV_INSTRS_0                ((uint32_t)0x00000000)          /*!< no "T variant" instructions exist */
N#define SCB_ISAR4_UNPRIV_INSTRS_1                ((uint32_t)0x00000001)          /*!< adds LDRBT, LDRT, STRBT, STRT */
N#define SCB_ISAR4_UNPRIV_INSTRS_2                ((uint32_t)0x00000002)          /*!< adds LDRHT, LDRSBT, LDRSHT, STRHT */
N/* SCB_ISAR4[WITHSHIFTS_INSTRS] Bits */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS_OFS          ( 4)                            /*!< WITHSHIFTS_INSTRS Bit Offset */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS_MASK         ((uint32_t)0x000000F0)          /*!< WITHSHIFTS_INSTRS Bit Mask */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS0             ((uint32_t)0x00000010)          /*!< WITHSHIFTS_INSTRS Bit 0 */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS1             ((uint32_t)0x00000020)          /*!< WITHSHIFTS_INSTRS Bit 1 */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS2             ((uint32_t)0x00000040)          /*!< WITHSHIFTS_INSTRS Bit 2 */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS3             ((uint32_t)0x00000080)          /*!< WITHSHIFTS_INSTRS Bit 3 */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS_0            ((uint32_t)0x00000000)          /*!< non-zero shifts only support MOV and shift instructions (see notes) */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS_1            ((uint32_t)0x00000010)          /*!< shifts of loads/stores over the range LSL 0-3 */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS_3            ((uint32_t)0x00000030)          /*!< adds other constant shift options. */
N#define SCB_ISAR4_WITHSHIFTS_INSTRS_4            ((uint32_t)0x00000040)          /*!< adds register-controlled shift options. */
N/* SCB_ISAR4[WRITEBACK_INSTRS] Bits */
N#define SCB_ISAR4_WRITEBACK_INSTRS_OFS           ( 8)                            /*!< WRITEBACK_INSTRS Bit Offset */
N#define SCB_ISAR4_WRITEBACK_INSTRS_MASK          ((uint32_t)0x00000F00)          /*!< WRITEBACK_INSTRS Bit Mask */
N#define SCB_ISAR4_WRITEBACK_INSTRS0              ((uint32_t)0x00000100)          /*!< WRITEBACK_INSTRS Bit 0 */
N#define SCB_ISAR4_WRITEBACK_INSTRS1              ((uint32_t)0x00000200)          /*!< WRITEBACK_INSTRS Bit 1 */
N#define SCB_ISAR4_WRITEBACK_INSTRS2              ((uint32_t)0x00000400)          /*!< WRITEBACK_INSTRS Bit 2 */
N#define SCB_ISAR4_WRITEBACK_INSTRS3              ((uint32_t)0x00000800)          /*!< WRITEBACK_INSTRS Bit 3 */
N#define SCB_ISAR4_WRITEBACK_INSTRS_0             ((uint32_t)0x00000000)          /*!< only non-writeback addressing modes present, except that  */
N                                                                                 /* LDMIA/STMDB/PUSH/POP instructions support writeback addressing. */
N#define SCB_ISAR4_WRITEBACK_INSTRS_1             ((uint32_t)0x00000100)          /*!< adds all currently-defined writeback addressing modes (ARMv7, Thumb-2) */
N/* SCB_ISAR4[BARRIER_INSTRS] Bits */
N#define SCB_ISAR4_BARRIER_INSTRS_OFS             (16)                            /*!< BARRIER_INSTRS Bit Offset */
N#define SCB_ISAR4_BARRIER_INSTRS_MASK            ((uint32_t)0x000F0000)          /*!< BARRIER_INSTRS Bit Mask */
N#define SCB_ISAR4_BARRIER_INSTRS0                ((uint32_t)0x00010000)          /*!< BARRIER_INSTRS Bit 0 */
N#define SCB_ISAR4_BARRIER_INSTRS1                ((uint32_t)0x00020000)          /*!< BARRIER_INSTRS Bit 1 */
N#define SCB_ISAR4_BARRIER_INSTRS2                ((uint32_t)0x00040000)          /*!< BARRIER_INSTRS Bit 2 */
N#define SCB_ISAR4_BARRIER_INSTRS3                ((uint32_t)0x00080000)          /*!< BARRIER_INSTRS Bit 3 */
N#define SCB_ISAR4_BARRIER_INSTRS_0               ((uint32_t)0x00000000)          /*!< no barrier instructions supported */
N#define SCB_ISAR4_BARRIER_INSTRS_1               ((uint32_t)0x00010000)          /*!< adds DMB, DSB, ISB barrier instructions */
N/* SCB_ISAR4[SYNCPRIM_INSTRS_FRAC] Bits */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC_OFS       (20)                            /*!< SYNCPRIM_INSTRS_FRAC Bit Offset */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC_MASK      ((uint32_t)0x00F00000)          /*!< SYNCPRIM_INSTRS_FRAC Bit Mask */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC0          ((uint32_t)0x00100000)          /*!< SYNCPRIM_INSTRS_FRAC Bit 0 */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC1          ((uint32_t)0x00200000)          /*!< SYNCPRIM_INSTRS_FRAC Bit 1 */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC2          ((uint32_t)0x00400000)          /*!< SYNCPRIM_INSTRS_FRAC Bit 2 */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC3          ((uint32_t)0x00800000)          /*!< SYNCPRIM_INSTRS_FRAC Bit 3 */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC_0         ((uint32_t)0x00000000)          /*!< no additional support */
N#define SCB_ISAR4_SYNCPRIM_INSTRS_FRAC_3         ((uint32_t)0x00300000)          /*!< adds CLREX, LDREXB, STREXB, LDREXH, STREXH */
N/* SCB_ISAR4[PSR_M_INSTRS] Bits */
N#define SCB_ISAR4_PSR_M_INSTRS_OFS               (24)                            /*!< PSR_M_INSTRS Bit Offset */
N#define SCB_ISAR4_PSR_M_INSTRS_MASK              ((uint32_t)0x0F000000)          /*!< PSR_M_INSTRS Bit Mask */
N#define SCB_ISAR4_PSR_M_INSTRS0                  ((uint32_t)0x01000000)          /*!< PSR_M_INSTRS Bit 0 */
N#define SCB_ISAR4_PSR_M_INSTRS1                  ((uint32_t)0x02000000)          /*!< PSR_M_INSTRS Bit 1 */
N#define SCB_ISAR4_PSR_M_INSTRS2                  ((uint32_t)0x04000000)          /*!< PSR_M_INSTRS Bit 2 */
N#define SCB_ISAR4_PSR_M_INSTRS3                  ((uint32_t)0x08000000)          /*!< PSR_M_INSTRS Bit 3 */
N#define SCB_ISAR4_PSR_M_INSTRS_0                 ((uint32_t)0x00000000)          /*!< instructions not present */
N#define SCB_ISAR4_PSR_M_INSTRS_1                 ((uint32_t)0x01000000)          /*!< adds CPS, MRS, and MSR instructions (M-profile forms) */
N/* SCB_CPACR[CP11] Bits */
N#define SCB_CPACR_CP11_OFS                       (22)                            /*!< CP11 Bit Offset */
N#define SCB_CPACR_CP11_MASK                      ((uint32_t)0x00C00000)          /*!< CP11 Bit Mask */
N/* SCB_CPACR[CP10] Bits */
N#define SCB_CPACR_CP10_OFS                       (20)                            /*!< CP10 Bit Offset */
N#define SCB_CPACR_CP10_MASK                      ((uint32_t)0x00300000)          /*!< CP10 Bit Mask */
N/* SCB_SHPR1[SCB_SHPR1_PRI_4] Bits */
N#define SCB_SHPR1_PRI_4_OFS                      ( 0)                            /*!< PRI_4 Offset */
N#define SCB_SHPR1_PRI_4_M                        ((uint32_t)0x000000ff)          /*  */
N/* SCB_SHPR1[SCB_SHPR1_PRI_5] Bits */
N#define SCB_SHPR1_PRI_5_OFS                      ( 8)                            /*!< PRI_5 Offset */
N#define SCB_SHPR1_PRI_5_M                        ((uint32_t)0x0000ff00)          /*  */
N/* SCB_SHPR1[SCB_SHPR1_PRI_6] Bits */
N#define SCB_SHPR1_PRI_6_OFS                      (16)                            /*!< PRI_6 Offset */
N#define SCB_SHPR1_PRI_6_M                        ((uint32_t)0x00ff0000)          /*  */
N/* SCB_SHPR1[SCB_SHPR1_PRI_7] Bits */
N#define SCB_SHPR1_PRI_7_OFS                      (24)                            /*!< PRI_7 Offset */
N#define SCB_SHPR1_PRI_7_M                        ((uint32_t)0xff000000)          /*  */
N/* SCB_SHPR2[SCB_SHPR2_PRI_8] Bits */
N#define SCB_SHPR2_PRI_8_OFS                      ( 0)                            /*!< PRI_8 Offset */
N#define SCB_SHPR2_PRI_8_M                        ((uint32_t)0x000000ff)          /*  */
N/* SCB_SHPR2[SCB_SHPR2_PRI_9] Bits */
N#define SCB_SHPR2_PRI_9_OFS                      ( 8)                            /*!< PRI_9 Offset */
N#define SCB_SHPR2_PRI_9_M                        ((uint32_t)0x0000ff00)          /*  */
N/* SCB_SHPR2[SCB_SHPR2_PRI_10] Bits */
N#define SCB_SHPR2_PRI_10_OFS                     (16)                            /*!< PRI_10 Offset */
N#define SCB_SHPR2_PRI_10_M                       ((uint32_t)0x00ff0000)          /*  */
N/* SCB_SHPR2[SCB_SHPR2_PRI_11] Bits */
N#define SCB_SHPR2_PRI_11_OFS                     (24)                            /*!< PRI_11 Offset */
N#define SCB_SHPR2_PRI_11_M                       ((uint32_t)0xff000000)          /*  */
N/* SCB_SHPR3[SCB_SHPR3_PRI_12] Bits */
N#define SCB_SHPR3_PRI_12_OFS                     ( 0)                            /*!< PRI_12 Offset */
N#define SCB_SHPR3_PRI_12_M                       ((uint32_t)0x000000ff)          /*  */
N/* SCB_SHPR3[SCB_SHPR3_PRI_13] Bits */
N#define SCB_SHPR3_PRI_13_OFS                     ( 8)                            /*!< PRI_13 Offset */
N#define SCB_SHPR3_PRI_13_M                       ((uint32_t)0x0000ff00)          /*  */
N/* SCB_SHPR3[SCB_SHPR3_PRI_14] Bits */
N#define SCB_SHPR3_PRI_14_OFS                     (16)                            /*!< PRI_14 Offset */
N#define SCB_SHPR3_PRI_14_M                       ((uint32_t)0x00ff0000)          /*  */
N/* SCB_SHPR3[SCB_SHPR3_PRI_15] Bits */
N#define SCB_SHPR3_PRI_15_OFS                     (24)                            /*!< PRI_15 Offset */
N#define SCB_SHPR3_PRI_15_M                       ((uint32_t)0xff000000)          /*  */
N
N/* SCB_CFSR[SCB_CFSR_IACCVIOL] Bits */
N#define SCB_CFSR_IACCVIOL_OFS                    ( 0)                            /*!< IACCVIOL Offset */
N#define SCB_CFSR_IACCVIOL                        ((uint32_t)0x00000001)          /*  */
N/* SCB_CFSR[SCB_CFSR_DACCVIOL] Bits */
N#define SCB_CFSR_DACCVIOL_OFS                    ( 1)                            /*!< DACCVIOL Offset */
N#define SCB_CFSR_DACCVIOL                        ((uint32_t)0x00000002)          /*  */
N/* SCB_CFSR[SCB_CFSR_MUNSTKERR] Bits */
N#define SCB_CFSR_MUNSTKERR_OFS                   ( 3)                            /*!< MUNSTKERR Offset */
N#define SCB_CFSR_MUNSTKERR                       ((uint32_t)0x00000008)          /*  */
N/* SCB_CFSR[SCB_CFSR_MSTKERR] Bits */
N#define SCB_CFSR_MSTKERR_OFS                     ( 4)                            /*!< MSTKERR Offset */
N#define SCB_CFSR_MSTKERR                         ((uint32_t)0x00000010)          /*  */
N/* SCB_CFSR[SCB_CFSR_MMARVALID] Bits */
N#define SCB_CFSR_MMARVALID_OFS                   ( 7)                            /*!< MMARVALID Offset */
N#define SCB_CFSR_MMARVALID                       ((uint32_t)0x00000080)          /*  */
N/* SCB_CFSR[SCB_CFSR_IBUSERR] Bits */
N#define SCB_CFSR_IBUSERR_OFS                     ( 8)                            /*!< IBUSERR Offset */
N#define SCB_CFSR_IBUSERR                         ((uint32_t)0x00000100)          /*  */
N/* SCB_CFSR[SCB_CFSR_PRECISERR] Bits */
N#define SCB_CFSR_PRECISERR_OFS                   ( 9)                            /*!< PRECISERR Offset */
N#define SCB_CFSR_PRECISERR                       ((uint32_t)0x00000200)          /*  */
N/* SCB_CFSR[SCB_CFSR_IMPRECISERR] Bits */
N#define SCB_CFSR_IMPRECISERR_OFS                 (10)                            /*!< IMPRECISERR Offset */
N#define SCB_CFSR_IMPRECISERR                     ((uint32_t)0x00000400)          /*  */
N/* SCB_CFSR[SCB_CFSR_UNSTKERR] Bits */
N#define SCB_CFSR_UNSTKERR_OFS                    (11)                            /*!< UNSTKERR Offset */
N#define SCB_CFSR_UNSTKERR                        ((uint32_t)0x00000800)          /*  */
N/* SCB_CFSR[SCB_CFSR_STKERR] Bits */
N#define SCB_CFSR_STKERR_OFS                      (12)                            /*!< STKERR Offset */
N#define SCB_CFSR_STKERR                          ((uint32_t)0x00001000)          /*  */
N/* SCB_CFSR[SCB_CFSR_BFARVALID] Bits */
N#define SCB_CFSR_BFARVALID_OFS                   (15)                            /*!< BFARVALID Offset */
N#define SCB_CFSR_BFARVALID                       ((uint32_t)0x00008000)          /*  */
N/* SCB_CFSR[SCB_CFSR_UNDEFINSTR] Bits */
N#define SCB_CFSR_UNDEFINSTR_OFS                  (16)                            /*!< UNDEFINSTR Offset */
N#define SCB_CFSR_UNDEFINSTR                      ((uint32_t)0x00010000)          /*  */
N/* SCB_CFSR[SCB_CFSR_INVSTATE] Bits */
N#define SCB_CFSR_INVSTATE_OFS                    (17)                            /*!< INVSTATE Offset */
N#define SCB_CFSR_INVSTATE                        ((uint32_t)0x00020000)          /*  */
N/* SCB_CFSR[SCB_CFSR_INVPC] Bits */
N#define SCB_CFSR_INVPC_OFS                       (18)                            /*!< INVPC Offset */
N#define SCB_CFSR_INVPC                           ((uint32_t)0x00040000)          /*  */
N/* SCB_CFSR[SCB_CFSR_NOCP] Bits */
N#define SCB_CFSR_NOCP_OFS                        (19)                            /*!< NOCP Offset */
N#define SCB_CFSR_NOCP                            ((uint32_t)0x00080000)          /*  */
N/* SCB_CFSR[SCB_CFSR_UNALIGNED] Bits */
N#define SCB_CFSR_UNALIGNED_OFS                   (24)                            /*!< UNALIGNED Offset */
N#define SCB_CFSR_UNALIGNED                       ((uint32_t)0x01000000)          /*  */
N/* SCB_CFSR[SCB_CFSR_DIVBYZERO] Bits */
N#define SCB_CFSR_DIVBYZERO_OFS                   (25)                            /*!< DIVBYZERO Offset */
N#define SCB_CFSR_DIVBYZERO                       ((uint32_t)0x02000000)          /*  */
N/* SCB_CFSR[SCB_CFSR_MLSPERR] Bits */
N#define SCB_CFSR_MLSPERR_OFS                     ( 5)                            /*!< MLSPERR Offset */
N#define SCB_CFSR_MLSPERR                         ((uint32_t)0x00000020)          /*  */
N/* SCB_CFSR[SCB_CFSR_LSPERR] Bits */
N#define SCB_CFSR_LSPERR_OFS                      (13)                            /*!< LSPERR Offset */
N#define SCB_CFSR_LSPERR                          ((uint32_t)0x00002000)          /*  */
N
N
N/******************************************************************************
N* SCNSCB Bits
N******************************************************************************/
N
N
N/******************************************************************************
N* SYSCTL Bits
N******************************************************************************/
N/* SYSCTL_REBOOT_CTL[REBOOT] Bits */
N#define SYSCTL_REBOOT_CTL_REBOOT_OFS             ( 0)                            /*!< REBOOT Bit Offset */
N#define SYSCTL_REBOOT_CTL_REBOOT                 ((uint32_t)0x00000001)          /*!< Write 1 initiates a Reboot of the device */
N/* SYSCTL_REBOOT_CTL[WKEY] Bits */
N#define SYSCTL_REBOOT_CTL_WKEY_OFS               ( 8)                            /*!< WKEY Bit Offset */
N#define SYSCTL_REBOOT_CTL_WKEY_MASK              ((uint32_t)0x0000FF00)          /*!< WKEY Bit Mask */
N/* SYSCTL_NMI_CTLSTAT[CS_SRC] Bits */
N#define SYSCTL_NMI_CTLSTAT_CS_SRC_OFS            ( 0)                            /*!< CS_SRC Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_CS_SRC                ((uint32_t)0x00000001)          /*!< CS interrupt as a source of NMI */
N/* SYSCTL_NMI_CTLSTAT[PSS_SRC] Bits */
N#define SYSCTL_NMI_CTLSTAT_PSS_SRC_OFS           ( 1)                            /*!< PSS_SRC Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_PSS_SRC               ((uint32_t)0x00000002)          /*!< PSS interrupt as a source of NMI */
N/* SYSCTL_NMI_CTLSTAT[PCM_SRC] Bits */
N#define SYSCTL_NMI_CTLSTAT_PCM_SRC_OFS           ( 2)                            /*!< PCM_SRC Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_PCM_SRC               ((uint32_t)0x00000004)          /*!< PCM interrupt as a source of NMI */
N/* SYSCTL_NMI_CTLSTAT[PIN_SRC] Bits */
N#define SYSCTL_NMI_CTLSTAT_PIN_SRC_OFS           ( 3)                            /*!< PIN_SRC Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_PIN_SRC               ((uint32_t)0x00000008)          
N/* SYSCTL_NMI_CTLSTAT[CS_FLG] Bits */
N#define SYSCTL_NMI_CTLSTAT_CS_FLG_OFS            (16)                            /*!< CS_FLG Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_CS_FLG                ((uint32_t)0x00010000)          /*!< CS interrupt was the source of NMI */
N/* SYSCTL_NMI_CTLSTAT[PSS_FLG] Bits */
N#define SYSCTL_NMI_CTLSTAT_PSS_FLG_OFS           (17)                            /*!< PSS_FLG Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_PSS_FLG               ((uint32_t)0x00020000)          /*!< PSS interrupt was the source of NMI */
N/* SYSCTL_NMI_CTLSTAT[PCM_FLG] Bits */
N#define SYSCTL_NMI_CTLSTAT_PCM_FLG_OFS           (18)                            /*!< PCM_FLG Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_PCM_FLG               ((uint32_t)0x00040000)          /*!< PCM interrupt was the source of NMI */
N/* SYSCTL_NMI_CTLSTAT[PIN_FLG] Bits */
N#define SYSCTL_NMI_CTLSTAT_PIN_FLG_OFS           (19)                            /*!< PIN_FLG Bit Offset */
N#define SYSCTL_NMI_CTLSTAT_PIN_FLG               ((uint32_t)0x00080000)          /*!< RSTn/NMI pin was the source of NMI */
N/* SYSCTL_WDTRESET_CTL[TIMEOUT] Bits */
N#define SYSCTL_WDTRESET_CTL_TIMEOUT_OFS          ( 0)                            /*!< TIMEOUT Bit Offset */
N#define SYSCTL_WDTRESET_CTL_TIMEOUT              ((uint32_t)0x00000001)          /*!< WDT timeout reset type */
N/* SYSCTL_WDTRESET_CTL[VIOLATION] Bits */
N#define SYSCTL_WDTRESET_CTL_VIOLATION_OFS        ( 1)                            /*!< VIOLATION Bit Offset */
N#define SYSCTL_WDTRESET_CTL_VIOLATION            ((uint32_t)0x00000002)          /*!< WDT password violation reset type */
N/* SYSCTL_PERIHALT_CTL[HALT_T16_0] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_0_OFS       ( 0)                            /*!< HALT_T16_0 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_0           ((uint32_t)0x00000001)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_T16_1] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_1_OFS       ( 1)                            /*!< HALT_T16_1 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_1           ((uint32_t)0x00000002)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_T16_2] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_2_OFS       ( 2)                            /*!< HALT_T16_2 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_2           ((uint32_t)0x00000004)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_T16_3] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_3_OFS       ( 3)                            /*!< HALT_T16_3 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_T16_3           ((uint32_t)0x00000008)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_T32_0] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_T32_0_OFS       ( 4)                            /*!< HALT_T32_0 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_T32_0           ((uint32_t)0x00000010)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUA0] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA0_OFS        ( 5)                            /*!< HALT_eUA0 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA0            ((uint32_t)0x00000020)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUA1] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA1_OFS        ( 6)                            /*!< HALT_eUA1 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA1            ((uint32_t)0x00000040)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUA2] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA2_OFS        ( 7)                            /*!< HALT_eUA2 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA2            ((uint32_t)0x00000080)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUA3] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA3_OFS        ( 8)                            /*!< HALT_eUA3 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUA3            ((uint32_t)0x00000100)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUB0] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB0_OFS        ( 9)                            /*!< HALT_eUB0 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB0            ((uint32_t)0x00000200)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUB1] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB1_OFS        (10)                            /*!< HALT_eUB1 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB1            ((uint32_t)0x00000400)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUB2] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB2_OFS        (11)                            /*!< HALT_eUB2 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB2            ((uint32_t)0x00000800)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_eUB3] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB3_OFS        (12)                            /*!< HALT_eUB3 Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_EUB3            ((uint32_t)0x00001000)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_ADC] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_ADC_OFS         (13)                            /*!< HALT_ADC Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_ADC             ((uint32_t)0x00002000)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_WDT] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_WDT_OFS         (14)                            /*!< HALT_WDT Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_WDT             ((uint32_t)0x00004000)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_PERIHALT_CTL[HALT_DMA] Bits */
N#define SYSCTL_PERIHALT_CTL_HALT_DMA_OFS         (15)                            /*!< HALT_DMA Bit Offset */
N#define SYSCTL_PERIHALT_CTL_HALT_DMA             ((uint32_t)0x00008000)          /*!< Freezes IP operation when CPU is halted */
N/* SYSCTL_SRAM_BANKEN[BNK0_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK0_EN_OFS           ( 0)                            /*!< BNK0_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK0_EN               ((uint32_t)0x00000001)          /*!< SRAM Bank0 enable */
N/* SYSCTL_SRAM_BANKEN[BNK1_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK1_EN_OFS           ( 1)                            /*!< BNK1_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK1_EN               ((uint32_t)0x00000002)          /*!< SRAM Bank1 enable */
N/* SYSCTL_SRAM_BANKEN[BNK2_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK2_EN_OFS           ( 2)                            /*!< BNK2_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK2_EN               ((uint32_t)0x00000004)          /*!< SRAM Bank1 enable */
N/* SYSCTL_SRAM_BANKEN[BNK3_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK3_EN_OFS           ( 3)                            /*!< BNK3_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK3_EN               ((uint32_t)0x00000008)          /*!< SRAM Bank1 enable */
N/* SYSCTL_SRAM_BANKEN[BNK4_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK4_EN_OFS           ( 4)                            /*!< BNK4_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK4_EN               ((uint32_t)0x00000010)          /*!< SRAM Bank1 enable */
N/* SYSCTL_SRAM_BANKEN[BNK5_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK5_EN_OFS           ( 5)                            /*!< BNK5_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK5_EN               ((uint32_t)0x00000020)          /*!< SRAM Bank1 enable */
N/* SYSCTL_SRAM_BANKEN[BNK6_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK6_EN_OFS           ( 6)                            /*!< BNK6_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK6_EN               ((uint32_t)0x00000040)          /*!< SRAM Bank1 enable */
N/* SYSCTL_SRAM_BANKEN[BNK7_EN] Bits */
N#define SYSCTL_SRAM_BANKEN_BNK7_EN_OFS           ( 7)                            /*!< BNK7_EN Bit Offset */
N#define SYSCTL_SRAM_BANKEN_BNK7_EN               ((uint32_t)0x00000080)          /*!< SRAM Bank1 enable */
N/* SYSCTL_SRAM_BANKEN[SRAM_RDY] Bits */
N#define SYSCTL_SRAM_BANKEN_SRAM_RDY_OFS          (16)                            /*!< SRAM_RDY Bit Offset */
N#define SYSCTL_SRAM_BANKEN_SRAM_RDY              ((uint32_t)0x00010000)          /*!< SRAM ready */
N/* SYSCTL_SRAM_BANKRET[BNK0_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK0_RET_OFS         ( 0)                            /*!< BNK0_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK0_RET             ((uint32_t)0x00000001)          /*!< Bank0 retention */
N/* SYSCTL_SRAM_BANKRET[BNK1_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK1_RET_OFS         ( 1)                            /*!< BNK1_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK1_RET             ((uint32_t)0x00000002)          /*!< Bank1 retention */
N/* SYSCTL_SRAM_BANKRET[BNK2_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK2_RET_OFS         ( 2)                            /*!< BNK2_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK2_RET             ((uint32_t)0x00000004)          /*!< Bank2 retention */
N/* SYSCTL_SRAM_BANKRET[BNK3_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK3_RET_OFS         ( 3)                            /*!< BNK3_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK3_RET             ((uint32_t)0x00000008)          /*!< Bank3 retention */
N/* SYSCTL_SRAM_BANKRET[BNK4_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK4_RET_OFS         ( 4)                            /*!< BNK4_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK4_RET             ((uint32_t)0x00000010)          /*!< Bank4 retention */
N/* SYSCTL_SRAM_BANKRET[BNK5_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK5_RET_OFS         ( 5)                            /*!< BNK5_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK5_RET             ((uint32_t)0x00000020)          /*!< Bank5 retention */
N/* SYSCTL_SRAM_BANKRET[BNK6_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK6_RET_OFS         ( 6)                            /*!< BNK6_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK6_RET             ((uint32_t)0x00000040)          /*!< Bank6 retention */
N/* SYSCTL_SRAM_BANKRET[BNK7_RET] Bits */
N#define SYSCTL_SRAM_BANKRET_BNK7_RET_OFS         ( 7)                            /*!< BNK7_RET Bit Offset */
N#define SYSCTL_SRAM_BANKRET_BNK7_RET             ((uint32_t)0x00000080)          /*!< Bank7 retention */
N/* SYSCTL_SRAM_BANKRET[SRAM_RDY] Bits */
N#define SYSCTL_SRAM_BANKRET_SRAM_RDY_OFS         (16)                            /*!< SRAM_RDY Bit Offset */
N#define SYSCTL_SRAM_BANKRET_SRAM_RDY             ((uint32_t)0x00010000)          /*!< SRAM ready */
N/* SYSCTL_DIO_GLTFLT_CTL[GLTCH_EN] Bits */
N#define SYSCTL_DIO_GLTFLT_CTL_GLTCH_EN_OFS       ( 0)                            /*!< GLTCH_EN Bit Offset */
N#define SYSCTL_DIO_GLTFLT_CTL_GLTCH_EN           ((uint32_t)0x00000001)          /*!< Glitch filter enable */
N/* SYSCTL_SECDATA_UNLOCK[UNLKEY] Bits */
N#define SYSCTL_SECDATA_UNLOCK_UNLKEY_OFS         ( 0)                            /*!< UNLKEY Bit Offset */
N#define SYSCTL_SECDATA_UNLOCK_UNLKEY_MASK        ((uint32_t)0x0000FFFF)          /*!< UNLKEY Bit Mask */
N/* SYSCTL_MASTER_UNLOCK[UNLKEY] Bits */
N#define SYSCTL_MASTER_UNLOCK_UNLKEY_OFS          ( 0)                            /*!< UNLKEY Bit Offset */
N#define SYSCTL_MASTER_UNLOCK_UNLKEY_MASK         ((uint32_t)0x0000FFFF)          /*!< UNLKEY Bit Mask */
N/* SYSCTL_RESET_REQ[POR] Bits */
N#define SYSCTL_RESET_REQ_POR_OFS                 ( 0)                            /*!< POR Bit Offset */
N#define SYSCTL_RESET_REQ_POR                     ((uint32_t)0x00000001)          /*!< Generate POR */
N/* SYSCTL_RESET_REQ[REBOOT] Bits */
N#define SYSCTL_RESET_REQ_REBOOT_OFS              ( 1)                            /*!< REBOOT Bit Offset */
N#define SYSCTL_RESET_REQ_REBOOT                  ((uint32_t)0x00000002)          /*!< Generate Reboot_Reset */
N/* SYSCTL_RESET_REQ[WKEY] Bits */
N#define SYSCTL_RESET_REQ_WKEY_OFS                ( 8)                            /*!< WKEY Bit Offset */
N#define SYSCTL_RESET_REQ_WKEY_MASK               ((uint32_t)0x0000FF00)          /*!< WKEY Bit Mask */
N/* SYSCTL_RESET_STATOVER[SOFT] Bits */
N#define SYSCTL_RESET_STATOVER_SOFT_OFS           ( 0)                            /*!< SOFT Bit Offset */
N#define SYSCTL_RESET_STATOVER_SOFT               ((uint32_t)0x00000001)          /*!< Indicates if SOFT Reset is active */
N/* SYSCTL_RESET_STATOVER[HARD] Bits */
N#define SYSCTL_RESET_STATOVER_HARD_OFS           ( 1)                            /*!< HARD Bit Offset */
N#define SYSCTL_RESET_STATOVER_HARD               ((uint32_t)0x00000002)          /*!< Indicates if HARD Reset is active */
N/* SYSCTL_RESET_STATOVER[REBOOT] Bits */
N#define SYSCTL_RESET_STATOVER_REBOOT_OFS         ( 2)                            /*!< REBOOT Bit Offset */
N#define SYSCTL_RESET_STATOVER_REBOOT             ((uint32_t)0x00000004)          /*!< Indicates if Reboot Reset is active */
N/* SYSCTL_RESET_STATOVER[SOFT_OVER] Bits */
N#define SYSCTL_RESET_STATOVER_SOFT_OVER_OFS      ( 8)                            /*!< SOFT_OVER Bit Offset */
N#define SYSCTL_RESET_STATOVER_SOFT_OVER          ((uint32_t)0x00000100)          /*!< SOFT_Reset overwrite request */
N/* SYSCTL_RESET_STATOVER[HARD_OVER] Bits */
N#define SYSCTL_RESET_STATOVER_HARD_OVER_OFS      ( 9)                            /*!< HARD_OVER Bit Offset */
N#define SYSCTL_RESET_STATOVER_HARD_OVER          ((uint32_t)0x00000200)          /*!< HARD_Reset overwrite request */
N/* SYSCTL_RESET_STATOVER[RBT_OVER] Bits */
N#define SYSCTL_RESET_STATOVER_RBT_OVER_OFS       (10)                            /*!< RBT_OVER Bit Offset */
N#define SYSCTL_RESET_STATOVER_RBT_OVER           ((uint32_t)0x00000400)          /*!< Reboot Reset overwrite request */
N/* Pre-defined bitfield values */
N#define SYSCTL_REBOOT_CTL_WKEY_VAL              ((uint32_t)0x00006900)          /*!< Key value to enable writes to bit 0 */
N                                                                                /* cleared */
N
N
N/******************************************************************************
N* SYSTICK Bits
N******************************************************************************/
N
N/******************************************************************************
N* Timer32 Bits
N******************************************************************************/
N/* TIMER32_CONTROL[ONESHOT] Bits */
N#define TIMER32_CONTROL_ONESHOT_OFS              ( 0)                            /*!< ONESHOT Bit Offset */
N#define TIMER32_CONTROL_ONESHOT                  ((uint32_t)0x00000001)          /*!< Selects one-shot or wrapping counter mode */
N/* TIMER32_CONTROL[SIZE] Bits */
N#define TIMER32_CONTROL_SIZE_OFS                 ( 1)                            /*!< SIZE Bit Offset */
N#define TIMER32_CONTROL_SIZE                     ((uint32_t)0x00000002)          /*!< Selects 16 or 32 bit counter operation */
N/* TIMER32_CONTROL[PRESCALE] Bits */
N#define TIMER32_CONTROL_PRESCALE_OFS             ( 2)                            /*!< PRESCALE Bit Offset */
N#define TIMER32_CONTROL_PRESCALE_MASK            ((uint32_t)0x0000000C)          /*!< PRESCALE Bit Mask */
N#define TIMER32_CONTROL_PRESCALE0                ((uint32_t)0x00000004)          /*!< PRESCALE Bit 0 */
N#define TIMER32_CONTROL_PRESCALE1                ((uint32_t)0x00000008)          /*!< PRESCALE Bit 1 */
N#define TIMER32_CONTROL_PRESCALE_0               ((uint32_t)0x00000000)          /*!< 0 stages of prescale, clock is divided by 1 */
N#define TIMER32_CONTROL_PRESCALE_1               ((uint32_t)0x00000004)          /*!< 4 stages of prescale, clock is divided by 16 */
N#define TIMER32_CONTROL_PRESCALE_2               ((uint32_t)0x00000008)          /*!< 8 stages of prescale, clock is divided by 256 */
N/* TIMER32_CONTROL[IE] Bits */
N#define TIMER32_CONTROL_IE_OFS                   ( 5)                            /*!< IE Bit Offset */
N#define TIMER32_CONTROL_IE                       ((uint32_t)0x00000020)          /*!< Interrupt enable bit */
N/* TIMER32_CONTROL[MODE] Bits */
N#define TIMER32_CONTROL_MODE_OFS                 ( 6)                            /*!< MODE Bit Offset */
N#define TIMER32_CONTROL_MODE                     ((uint32_t)0x00000040)          /*!< Mode bit */
N/* TIMER32_CONTROL[ENABLE] Bits */
N#define TIMER32_CONTROL_ENABLE_OFS               ( 7)                            /*!< ENABLE Bit Offset */
N#define TIMER32_CONTROL_ENABLE                   ((uint32_t)0x00000080)
N/* TIMER32_RIS[RAW_IFG] Bits */
N#define TIMER32_RIS_RAW_IFG_OFS                  ( 0)                            /*!< RAW_IFG Bit Offset */
N#define TIMER32_RIS_RAW_IFG                      ((uint32_t)0x00000001)          /*!< Raw interrupt status */
N/* TIMER32_MIS[IFG] Bits */
N#define TIMER32_MIS_IFG_OFS                      ( 0)                            /*!< IFG Bit Offset */
N#define TIMER32_MIS_IFG                          ((uint32_t)0x00000001)          /*!< Enabled interrupt status */
N
N
N
N/******************************************************************************
N* TIMER_A Bits
N******************************************************************************/
N/* TIMER_A_CTL[IFG] Bits */
N#define TIMER_A_CTL_IFG_OFS                      ( 0)                            /*!< TAIFG Bit Offset */
N#define TIMER_A_CTL_IFG                          ((uint16_t)0x0001)              /*!< TimerA interrupt flag */
N/* TIMER_A_CTL[IE] Bits */
N#define TIMER_A_CTL_IE_OFS                       ( 1)                            /*!< TAIE Bit Offset */
N#define TIMER_A_CTL_IE                           ((uint16_t)0x0002)              /*!< TimerA interrupt enable */
N/* TIMER_A_CTL[CLR] Bits */
N#define TIMER_A_CTL_CLR_OFS                      ( 2)                            /*!< TACLR Bit Offset */
N#define TIMER_A_CTL_CLR                          ((uint16_t)0x0004)              /*!< TimerA clear */
N/* TIMER_A_CTL[MC] Bits */
N#define TIMER_A_CTL_MC_OFS                       ( 4)                            /*!< MC Bit Offset */
N#define TIMER_A_CTL_MC_MASK                      ((uint16_t)0x0030)              /*!< MC Bit Mask */
N#define TIMER_A_CTL_MC0                          ((uint16_t)0x0010)              /*!< MC Bit 0 */
N#define TIMER_A_CTL_MC1                          ((uint16_t)0x0020)              /*!< MC Bit 1 */
N#define TIMER_A_CTL_MC_0                         ((uint16_t)0x0000)              /*!< Stop mode: Timer is halted */
N#define TIMER_A_CTL_MC_1                         ((uint16_t)0x0010)              /*!< Up mode: Timer counts up to TAxCCR0 */
N#define TIMER_A_CTL_MC_2                         ((uint16_t)0x0020)              /*!< Continuous mode: Timer counts up to 0FFFFh */
N#define TIMER_A_CTL_MC_3                         ((uint16_t)0x0030)              /*!< Up/down mode: Timer counts up to TAxCCR0 then down to 0000h */
N#define TIMER_A_CTL_MC__STOP                     ((uint16_t)0x0000)              /*!< Stop mode: Timer is halted */
N#define TIMER_A_CTL_MC__UP                       ((uint16_t)0x0010)              /*!< Up mode: Timer counts up to TAxCCR0 */
N#define TIMER_A_CTL_MC__CONTINUOUS               ((uint16_t)0x0020)              /*!< Continuous mode: Timer counts up to 0FFFFh */
N#define TIMER_A_CTL_MC__UPDOWN                   ((uint16_t)0x0030)              /*!< Up/down mode: Timer counts up to TAxCCR0 then down to 0000h */
N/* TIMER_A_CTL[ID] Bits */
N#define TIMER_A_CTL_ID_OFS                       ( 6)                            /*!< ID Bit Offset */
N#define TIMER_A_CTL_ID_MASK                      ((uint16_t)0x00C0)              /*!< ID Bit Mask */
N#define TIMER_A_CTL_ID0                          ((uint16_t)0x0040)              /*!< ID Bit 0 */
N#define TIMER_A_CTL_ID1                          ((uint16_t)0x0080)              /*!< ID Bit 1 */
N#define TIMER_A_CTL_ID_0                         ((uint16_t)0x0000)              /*!< /1 */
N#define TIMER_A_CTL_ID_1                         ((uint16_t)0x0040)              /*!< /2 */
N#define TIMER_A_CTL_ID_2                         ((uint16_t)0x0080)              /*!< /4 */
N#define TIMER_A_CTL_ID_3                         ((uint16_t)0x00C0)              /*!< /8 */
N#define TIMER_A_CTL_ID__1                        ((uint16_t)0x0000)              /*!< /1 */
N#define TIMER_A_CTL_ID__2                        ((uint16_t)0x0040)              /*!< /2 */
N#define TIMER_A_CTL_ID__4                        ((uint16_t)0x0080)              /*!< /4 */
N#define TIMER_A_CTL_ID__8                        ((uint16_t)0x00C0)              /*!< /8 */
N/* TIMER_A_CTL[SSEL] Bits */
N#define TIMER_A_CTL_SSEL_OFS                     ( 8)                            /*!< TASSEL Bit Offset */
N#define TIMER_A_CTL_SSEL_MASK                    ((uint16_t)0x0300)              /*!< TASSEL Bit Mask */
N#define TIMER_A_CTL_SSEL0                        ((uint16_t)0x0100)              /*!< SSEL Bit 0 */
N#define TIMER_A_CTL_SSEL1                        ((uint16_t)0x0200)              /*!< SSEL Bit 1 */
N#define TIMER_A_CTL_TASSEL_0                     ((uint16_t)0x0000)              /*!< TAxCLK */
N#define TIMER_A_CTL_TASSEL_1                     ((uint16_t)0x0100)              /*!< ACLK */
N#define TIMER_A_CTL_TASSEL_2                     ((uint16_t)0x0200)              /*!< SMCLK */
N#define TIMER_A_CTL_TASSEL_3                     ((uint16_t)0x0300)              /*!< INCLK */
N#define TIMER_A_CTL_SSEL__TACLK                  ((uint16_t)0x0000)              /*!< TAxCLK */
N#define TIMER_A_CTL_SSEL__ACLK                   ((uint16_t)0x0100)              /*!< ACLK */
N#define TIMER_A_CTL_SSEL__SMCLK                  ((uint16_t)0x0200)              /*!< SMCLK */
N#define TIMER_A_CTL_SSEL__INCLK                  ((uint16_t)0x0300)              /*!< INCLK */
N/* TIMER_A_CCTLN[CCIFG] Bits */
N#define TIMER_A_CCTLN_CCIFG_OFS                  ( 0)                            /*!< CCIFG Bit Offset */
N#define TIMER_A_CCTLN_CCIFG                      ((uint16_t)0x0001)              /*!< Capture/compare interrupt flag */
N/* TIMER_A_CCTLN[COV] Bits */
N#define TIMER_A_CCTLN_COV_OFS                    ( 1)                            /*!< COV Bit Offset */
N#define TIMER_A_CCTLN_COV                        ((uint16_t)0x0002)              /*!< Capture overflow */
N/* TIMER_A_CCTLN[OUT] Bits */
N#define TIMER_A_CCTLN_OUT_OFS                    ( 2)                            /*!< OUT Bit Offset */
N#define TIMER_A_CCTLN_OUT                        ((uint16_t)0x0004)              /*!< Output */
N/* TIMER_A_CCTLN[CCI] Bits */
N#define TIMER_A_CCTLN_CCI_OFS                    ( 3)                            /*!< CCI Bit Offset */
N#define TIMER_A_CCTLN_CCI                        ((uint16_t)0x0008)              /*!< Capture/compare input */
N/* TIMER_A_CCTLN[CCIE] Bits */
N#define TIMER_A_CCTLN_CCIE_OFS                   ( 4)                            /*!< CCIE Bit Offset */
N#define TIMER_A_CCTLN_CCIE                       ((uint16_t)0x0010)              /*!< Capture/compare interrupt enable */
N/* TIMER_A_CCTLN[OUTMOD] Bits */
N#define TIMER_A_CCTLN_OUTMOD_OFS                 ( 5)                            /*!< OUTMOD Bit Offset */
N#define TIMER_A_CCTLN_OUTMOD_MASK                ((uint16_t)0x00E0)              /*!< OUTMOD Bit Mask */
N#define TIMER_A_CCTLN_OUTMOD0                    ((uint16_t)0x0020)              /*!< OUTMOD Bit 0 */
N#define TIMER_A_CCTLN_OUTMOD1                    ((uint16_t)0x0040)              /*!< OUTMOD Bit 1 */
N#define TIMER_A_CCTLN_OUTMOD2                    ((uint16_t)0x0080)              /*!< OUTMOD Bit 2 */
N#define TIMER_A_CCTLN_OUTMOD_0                   ((uint16_t)0x0000)              /*!< OUT bit value */
N#define TIMER_A_CCTLN_OUTMOD_1                   ((uint16_t)0x0020)              /*!< Set */
N#define TIMER_A_CCTLN_OUTMOD_2                   ((uint16_t)0x0040)              /*!< Toggle/reset */
N#define TIMER_A_CCTLN_OUTMOD_3                   ((uint16_t)0x0060)              /*!< Set/reset */
N#define TIMER_A_CCTLN_OUTMOD_4                   ((uint16_t)0x0080)              /*!< Toggle */
N#define TIMER_A_CCTLN_OUTMOD_5                   ((uint16_t)0x00A0)              /*!< Reset */
N#define TIMER_A_CCTLN_OUTMOD_6                   ((uint16_t)0x00C0)              /*!< Toggle/set */
N#define TIMER_A_CCTLN_OUTMOD_7                   ((uint16_t)0x00E0)              /*!< Reset/set */
N/* TIMER_A_CCTLN[CAP] Bits */
N#define TIMER_A_CCTLN_CAP_OFS                    ( 8)                            /*!< CAP Bit Offset */
N#define TIMER_A_CCTLN_CAP                        ((uint16_t)0x0100)              /*!< Capture mode */
N/* TIMER_A_CCTLN[SCCI] Bits */
N#define TIMER_A_CCTLN_SCCI_OFS                   (10)                            /*!< SCCI Bit Offset */
N#define TIMER_A_CCTLN_SCCI                       ((uint16_t)0x0400)              /*!< Synchronized capture/compare input */
N/* TIMER_A_CCTLN[SCS] Bits */
N#define TIMER_A_CCTLN_SCS_OFS                    (11)                            /*!< SCS Bit Offset */
N#define TIMER_A_CCTLN_SCS                        ((uint16_t)0x0800)              /*!< Synchronize capture source */
N/* TIMER_A_CCTLN[CCIS] Bits */
N#define TIMER_A_CCTLN_CCIS_OFS                   (12)                            /*!< CCIS Bit Offset */
N#define TIMER_A_CCTLN_CCIS_MASK                  ((uint16_t)0x3000)              /*!< CCIS Bit Mask */
N#define TIMER_A_CCTLN_CCIS0                      ((uint16_t)0x1000)              /*!< CCIS Bit 0 */
N#define TIMER_A_CCTLN_CCIS1                      ((uint16_t)0x2000)              /*!< CCIS Bit 1 */
N#define TIMER_A_CCTLN_CCIS_0                     ((uint16_t)0x0000)              /*!< CCIxA */
N#define TIMER_A_CCTLN_CCIS_1                     ((uint16_t)0x1000)              /*!< CCIxB */
N#define TIMER_A_CCTLN_CCIS_2                     ((uint16_t)0x2000)              /*!< GND */
N#define TIMER_A_CCTLN_CCIS_3                     ((uint16_t)0x3000)              /*!< VCC */
N#define TIMER_A_CCTLN_CCIS__CCIA                 ((uint16_t)0x0000)              /*!< CCIxA */
N#define TIMER_A_CCTLN_CCIS__CCIB                 ((uint16_t)0x1000)              /*!< CCIxB */
N#define TIMER_A_CCTLN_CCIS__GND                  ((uint16_t)0x2000)              /*!< GND */
N#define TIMER_A_CCTLN_CCIS__VCC                  ((uint16_t)0x3000)              /*!< VCC */
N/* TIMER_A_CCTLN[CM] Bits */
N#define TIMER_A_CCTLN_CM_OFS                     (14)                            /*!< CM Bit Offset */
N#define TIMER_A_CCTLN_CM_MASK                    ((uint16_t)0xC000)              /*!< CM Bit Mask */
N#define TIMER_A_CCTLN_CM0                        ((uint16_t)0x4000)              /*!< CM Bit 0 */
N#define TIMER_A_CCTLN_CM1                        ((uint16_t)0x8000)              /*!< CM Bit 1 */
N#define TIMER_A_CCTLN_CM_0                       ((uint16_t)0x0000)              /*!< No capture */
N#define TIMER_A_CCTLN_CM_1                       ((uint16_t)0x4000)              /*!< Capture on rising edge */
N#define TIMER_A_CCTLN_CM_2                       ((uint16_t)0x8000)              /*!< Capture on falling edge */
N#define TIMER_A_CCTLN_CM_3                       ((uint16_t)0xC000)              /*!< Capture on both rising and falling edges */
N#define TIMER_A_CCTLN_CM__NONE                   ((uint16_t)0x0000)              /*!< No capture */
N#define TIMER_A_CCTLN_CM__RISING                 ((uint16_t)0x4000)              /*!< Capture on rising edge */
N#define TIMER_A_CCTLN_CM__FALLING                ((uint16_t)0x8000)              /*!< Capture on falling edge */
N#define TIMER_A_CCTLN_CM__BOTH                   ((uint16_t)0xC000)              /*!< Capture on both rising and falling edges */
N/* TIMER_A_EX0[IDEX] Bits */
N#define TIMER_A_EX0_IDEX_OFS                     ( 0)                            /*!< TAIDEX Bit Offset */
N#define TIMER_A_EX0_IDEX_MASK                    ((uint16_t)0x0007)              /*!< TAIDEX Bit Mask */
N#define TIMER_A_EX0_IDEX0                        ((uint16_t)0x0001)              /*!< IDEX Bit 0 */
N#define TIMER_A_EX0_IDEX1                        ((uint16_t)0x0002)              /*!< IDEX Bit 1 */
N#define TIMER_A_EX0_IDEX2                        ((uint16_t)0x0004)              /*!< IDEX Bit 2 */
N#define TIMER_A_EX0_TAIDEX_0                     ((uint16_t)0x0000)              /*!< Divide by 1 */
N#define TIMER_A_EX0_TAIDEX_1                     ((uint16_t)0x0001)              /*!< Divide by 2 */
N#define TIMER_A_EX0_TAIDEX_2                     ((uint16_t)0x0002)              /*!< Divide by 3 */
N#define TIMER_A_EX0_TAIDEX_3                     ((uint16_t)0x0003)              /*!< Divide by 4 */
N#define TIMER_A_EX0_TAIDEX_4                     ((uint16_t)0x0004)              /*!< Divide by 5 */
N#define TIMER_A_EX0_TAIDEX_5                     ((uint16_t)0x0005)              /*!< Divide by 6 */
N#define TIMER_A_EX0_TAIDEX_6                     ((uint16_t)0x0006)              /*!< Divide by 7 */
N#define TIMER_A_EX0_TAIDEX_7                     ((uint16_t)0x0007)              /*!< Divide by 8 */
N#define TIMER_A_EX0_IDEX__1                      ((uint16_t)0x0000)              /*!< Divide by 1 */
N#define TIMER_A_EX0_IDEX__2                      ((uint16_t)0x0001)              /*!< Divide by 2 */
N#define TIMER_A_EX0_IDEX__3                      ((uint16_t)0x0002)              /*!< Divide by 3 */
N#define TIMER_A_EX0_IDEX__4                      ((uint16_t)0x0003)              /*!< Divide by 4 */
N#define TIMER_A_EX0_IDEX__5                      ((uint16_t)0x0004)              /*!< Divide by 5 */
N#define TIMER_A_EX0_IDEX__6                      ((uint16_t)0x0005)              /*!< Divide by 6 */
N#define TIMER_A_EX0_IDEX__7                      ((uint16_t)0x0006)              /*!< Divide by 7 */
N#define TIMER_A_EX0_IDEX__8                      ((uint16_t)0x0007)              /*!< Divide by 8 */
N
N/******************************************************************************
N* TLV Bits
N******************************************************************************/
N/******************************************************************************
N* TLV table start and TLV tags                                                *
N******************************************************************************/
N#define TLV_START_ADDR                    (TLV_BASE + 0x0004)                    /*!< Start Address of the TLV structure */
N
N#define TLV_TAG_RESERVED1                                   1
N#define TLV_TAG_RESERVED2                                   2
N#define TLV_TAG_CS                                          3
N#define TLV_TAG_FLASHCTL                                    4
N#define TLV_TAG_ADC14                                       5
N#define TLV_TAG_RESERVED6                                   6
N#define TLV_TAG_RESERVED7                                   7
N#define TLV_TAG_REF                                         8
N#define TLV_TAG_RESERVED9                                   9
N#define TLV_TAG_RESERVED10                                 10
N#define TLV_TAG_DEVINFO                                    11
N#define TLV_TAG_DIEREC                                     12
N#define TLV_TAG_RANDNUM                                    13
N#define TLV_TAG_RESERVED14                                 14
N#define TLV_TAG_BSL                                        15
N#define TLV_TAG_END                                        (0x0BD0E11D)
N
N
N/******************************************************************************
N* TPIU Bits
N******************************************************************************/
N
N
N/******************************************************************************
N* WDT_A Bits
N******************************************************************************/
N/* WDT_A_CTL[IS] Bits */
N#define WDT_A_CTL_IS_OFS                         ( 0)                            /*!< WDTIS Bit Offset */
N#define WDT_A_CTL_IS_MASK                        ((uint16_t)0x0007)              /*!< WDTIS Bit Mask */
N#define WDT_A_CTL_IS0                            ((uint16_t)0x0001)              /*!< IS Bit 0 */
N#define WDT_A_CTL_IS1                            ((uint16_t)0x0002)              /*!< IS Bit 1 */
N#define WDT_A_CTL_IS2                            ((uint16_t)0x0004)              /*!< IS Bit 2 */
N#define WDT_A_CTL_IS_0                           ((uint16_t)0x0000)              /*!< Watchdog clock source / (2^(31)) (18:12:16 at 32.768 kHz) */
N#define WDT_A_CTL_IS_1                           ((uint16_t)0x0001)              /*!< Watchdog clock source /(2^(27)) (01:08:16 at 32.768 kHz) */
N#define WDT_A_CTL_IS_2                           ((uint16_t)0x0002)              /*!< Watchdog clock source /(2^(23)) (00:04:16 at 32.768 kHz) */
N#define WDT_A_CTL_IS_3                           ((uint16_t)0x0003)              /*!< Watchdog clock source /(2^(19)) (00:00:16 at 32.768 kHz) */
N#define WDT_A_CTL_IS_4                           ((uint16_t)0x0004)              /*!< Watchdog clock source /(2^(15)) (1 s at 32.768 kHz) */
N#define WDT_A_CTL_IS_5                           ((uint16_t)0x0005)              /*!< Watchdog clock source / (2^(13)) (250 ms at 32.768 kHz) */
N#define WDT_A_CTL_IS_6                           ((uint16_t)0x0006)              /*!< Watchdog clock source / (2^(9)) (15.625 ms at 32.768 kHz) */
N#define WDT_A_CTL_IS_7                           ((uint16_t)0x0007)              /*!< Watchdog clock source / (2^(6)) (1.95 ms at 32.768 kHz) */
N/* WDT_A_CTL[CNTCL] Bits */
N#define WDT_A_CTL_CNTCL_OFS                      ( 3)                            /*!< WDTCNTCL Bit Offset */
N#define WDT_A_CTL_CNTCL                          ((uint16_t)0x0008)              /*!< Watchdog timer counter clear */
N/* WDT_A_CTL[TMSEL] Bits */
N#define WDT_A_CTL_TMSEL_OFS                      ( 4)                            /*!< WDTTMSEL Bit Offset */
N#define WDT_A_CTL_TMSEL                          ((uint16_t)0x0010)              /*!< Watchdog timer mode select */
N/* WDT_A_CTL[SSEL] Bits */
N#define WDT_A_CTL_SSEL_OFS                       ( 5)                            /*!< WDTSSEL Bit Offset */
N#define WDT_A_CTL_SSEL_MASK                      ((uint16_t)0x0060)              /*!< WDTSSEL Bit Mask */
N#define WDT_A_CTL_SSEL0                          ((uint16_t)0x0020)              /*!< SSEL Bit 0 */
N#define WDT_A_CTL_SSEL1                          ((uint16_t)0x0040)              /*!< SSEL Bit 1 */
N#define WDT_A_CTL_SSEL_0                         ((uint16_t)0x0000)              /*!< SMCLK */
N#define WDT_A_CTL_SSEL_1                         ((uint16_t)0x0020)              /*!< ACLK */
N#define WDT_A_CTL_SSEL_2                         ((uint16_t)0x0040)              /*!< VLOCLK */
N#define WDT_A_CTL_SSEL_3                         ((uint16_t)0x0060)              /*!< BCLK */
N#define WDT_A_CTL_SSEL__SMCLK                    ((uint16_t)0x0000)              /*!< SMCLK */
N#define WDT_A_CTL_SSEL__ACLK                     ((uint16_t)0x0020)              /*!< ACLK */
N#define WDT_A_CTL_SSEL__VLOCLK                   ((uint16_t)0x0040)              /*!< VLOCLK */
N#define WDT_A_CTL_SSEL__BCLK                     ((uint16_t)0x0060)              /*!< BCLK */
N/* WDT_A_CTL[HOLD] Bits */
N#define WDT_A_CTL_HOLD_OFS                       ( 7)                            /*!< WDTHOLD Bit Offset */
N#define WDT_A_CTL_HOLD                           ((uint16_t)0x0080)              /*!< Watchdog timer hold */
N/* WDT_A_CTL[PW] Bits */
N#define WDT_A_CTL_PW_OFS                         ( 8)                            /*!< WDTPW Bit Offset */
N#define WDT_A_CTL_PW_MASK                        ((uint16_t)0xFF00)              /*!< WDTPW Bit Mask */
N/* Pre-defined bitfield values */
N#define WDT_A_CTL_PW                              ((uint16_t)0x5A00)              /*!< WDT Key Value for WDT write access */
N
N
N/******************************************************************************
N* BSL                                                                         *
N******************************************************************************/
N#define BSL_DEFAULT_PARAM                        ((uint32_t)0xFC48FFFF)          /*!< I2C slave address = 0x48, Interface selection = Auto */
N#define BSL_API_TABLE_ADDR                       ((uint32_t)0x00202000)          /*!< Address of BSL API table */
N#define BSL_ENTRY_FUNCTION                       (*((uint32_t *)BSL_API_TABLE_ADDR))
N
N#define BSL_AUTO_INTERFACE                       ((uint32_t)0x0000E0000)         /*!< Auto detect interface */
N#define BSL_UART_INTERFACE                       ((uint32_t)0x0000C0000)         /*!< UART interface */
N#define BSL_SPI_INTERFACE                        ((uint32_t)0x0000A0000)         /*!< SPI interface */
N#define BSL_I2C_INTERFACE                        ((uint32_t)0x000080000)         /*!< I2C interface */
N
N#define BSL_INVOKE(x)                            ((void (*)())BSL_ENTRY_FUNCTION)((uint32_t) x) /*!< Invoke the BSL with parameters */
N
N
N/******************************************************************************
N* Mailbox struct legacy definition                                            *
N******************************************************************************/
N#define FLASH_MAILBOX_Type                    FL_BOOTOVER_MAILBOX_Type
N
N/******************************************************************************
N* Device Unlock Support                                                       *
N******************************************************************************/
N/* unlock the device by:
N *   Load SYSCTL_SECDATA_UNLOCK register address into R0
N *   Load SYSCTL_SECDATA_UNLOCK unlock key into R1
N *   Write the unlock key to the SYSCTL_SECDATA_UNLOCK register
N */
N#define UNLOCK_DEVICE\
N    __asm("  MOVW.W          R0, #0x3040");\
N    __asm("  MOVT.W          R0, #0xE004");\
N    __asm("  MOVW.W          R1, #0x695A");\
N    __asm("  MOVT.W          R1, #0x0000");\
N    __asm("  STR             R1, [R0]");
X#define UNLOCK_DEVICE    __asm("  MOVW.W          R0, #0x3040");    __asm("  MOVT.W          R0, #0xE004");    __asm("  MOVW.W          R1, #0x695A");    __asm("  MOVT.W          R1, #0x0000");    __asm("  STR             R1, [R0]");
N
N/******************************************************************************
N*
N* The following are values that can be used to choose the command that will be
N* run by the boot code. Perform a logical OR of these settings to create your
N* general parameter command.
N*
N******************************************************************************/
N#define COMMAND_FACTORY_RESET                    ((uint32_t)0x00010000)
N#define COMMAND_BSL_CONFIG                       ((uint32_t)0x00020000)
N#define COMMAND_JTAG_SWD_LOCK_SECEN              ((uint32_t)0x00080000)
N#define COMMAND_SEC_ZONE0_EN                     ((uint32_t)0x00100000)
N#define COMMAND_SEC_ZONE1_EN                     ((uint32_t)0x00200000)
N#define COMMAND_SEC_ZONE2_EN                     ((uint32_t)0x00400000)
N#define COMMAND_SEC_ZONE3_EN                     ((uint32_t)0x00800000)
N#define COMMAND_SEC_ZONE0_UPDATE                 ((uint32_t)0x01000000)
N#define COMMAND_SEC_ZONE1_UPDATE                 ((uint32_t)0x02000000)
N#define COMMAND_SEC_ZONE2_UPDATE                 ((uint32_t)0x04000000)
N#define COMMAND_SEC_ZONE3_UPDATE                 ((uint32_t)0x08000000)
N#define COMMAND_JTAG_SWD_LOCK_ENC_UPDATE         ((uint32_t)0x10000000)
N#define COMMAND_NONE                             ((uint32_t)0xFFFFFFFF)
N
N/******************************************************************************
N*
N* The following are values that can be used to configure the BSL. Perform a
N* logical OR of these settings to create your BSL parameter.
N*
N******************************************************************************/
N#define BSL_CONFIG_HW_INVOKE                     ((uint32_t)0x70000000)
N
N#define BSL_CONFIG_HW_INVOKE_PORT1               ((uint32_t)0x00000000)
N#define BSL_CONFIG_HW_INVOKE_PORT2               ((uint32_t)0x00000001)
N#define BSL_CONFIG_HW_INVOKE_PORT3               ((uint32_t)0x00000002)
N
N#define BSL_CONFIG_HW_INVOKE_PIN0                ((uint32_t)0x00000000)
N#define BSL_CONFIG_HW_INVOKE_PIN1                ((uint32_t)0x00000010)
N#define BSL_CONFIG_HW_INVOKE_PIN2                ((uint32_t)0x00000020)
N#define BSL_CONFIG_HW_INVOKE_PIN3                ((uint32_t)0x00000030)
N#define BSL_CONFIG_HW_INVOKE_PIN4                ((uint32_t)0x00000040)
N#define BSL_CONFIG_HW_INVOKE_PIN5                ((uint32_t)0x00000050)
N#define BSL_CONFIG_HW_INVOKE_PIN6                ((uint32_t)0x00000060)
N#define BSL_CONFIG_HW_INVOKE_PIN7                ((uint32_t)0x00000070)
N
N#define BSL_CONFIG_HW_INVOKE_PIN_LOW             ((uint32_t)0x00000000)
N#define BSL_CONFIG_HW_INVOKE_PIN_HIGH            ((uint32_t)0x00001000)
N
N#define BSL_CONFIG_INTERFACE_I2C                 ((uint32_t)0x00008000)
N#define BSL_CONFIG_INTERFACE_SPI                 ((uint32_t)0x0000A000)
N#define BSL_CONFIG_INTERFACE_UART                ((uint32_t)0x0000C000)
N#define BSL_CONFIG_INTERFACE_AUTO                ((uint32_t)0x0000E000)
N
N#define BSL_CONFIG_I2C_ADD_OFFSET                (16)
N
N
N/******************************************************************************
N* ULP Advisor                                                                 *
N******************************************************************************/
N#ifdef __TI_ARM__
N#pragma ULP_PORT_CONFIG(1,DIR={0x40004C04,8},OUT={0x40004C02,8},SEL1={0x40004C0A,8},SEL2={0x40004C0C,8})
N#pragma ULP_PORT_CONFIG(2,DIR={0x40004C05,8},OUT={0x40004C03,8},SEL1={0x40004C0B,8},SEL2={0x40004C0D,8})
N#pragma ULP_PORT_CONFIG(3,DIR={0x40004C24,8},OUT={0x40004C22,8},SEL1={0x40004C2A,8},SEL2={0x40004C2C,8})
N#pragma ULP_PORT_CONFIG(4,DIR={0x40004C25,8},OUT={0x40004C23,8},SEL1={0x40004C2B,8},SEL2={0x40004C2D,8})
N#pragma ULP_PORT_CONFIG(5,DIR={0x40004C44,8},OUT={0x40004C42,8},SEL1={0x40004C4A,8},SEL2={0x40004C4C,8})
N#pragma ULP_PORT_CONFIG(6,DIR={0x40004C45,8},OUT={0x40004C43,8},SEL1={0x40004C4B,8},SEL2={0x40004C4D,8})
N#pragma ULP_PORT_CONFIG(7,DIR={0x40004C64,8},OUT={0x40004C62,8},SEL1={0x40004C6A,8},SEL2={0x40004C6C,8})
N#pragma ULP_PORT_CONFIG(8,DIR={0x40004C65,8},OUT={0x40004C63,8},SEL1={0x40004C6B,8},SEL2={0x40004C6D,8})
N#pragma ULP_PORT_CONFIG(9,DIR={0x40004C84,8},OUT={0x40004C82,8},SEL1={0x40004C8A,8},SEL2={0x40004C8C,8})
N#pragma ULP_PORT_CONFIG(10,DIR={0x40004C85,8},OUT={0x40004C83,8},SEL1={0x40004C8B,8},SEL2={0x40004C8D,8})
N#endif
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MSP432P401R_H__ */
N
L 47 "C:/ti/ccs930/ccs/ccs_base/arm/include/msp.h" 2
N
N#elif defined (__MSP432P401M__)
S#include "msp432p401m.h"
S
S#elif defined (__MSP432P401Y__)
S#include "msp432p401y.h"
S
S#elif defined (__MSP432P401V__)
S#include "msp432p401v.h"
S
S#elif defined (__MSP432P411V__)
S#include "msp432p411v.h"
S
S#elif defined (__MSP432P4011__)
S#include "msp432p4011.h"
S
S#elif defined (__MSP432P4111__)
S#include "msp432p4111.h"
S
S#elif defined (__MSP432P411Y__)
S#include "msp432p411y.h"
S
S#elif defined (__MSP432E411Y__)
S#include "msp432e411y.h"
S
S#elif defined (__MSP432E401Y__)
S#include "msp432e401y.h"
S
S/******************************************************************************
S* Failed to match a default include file                                      *
S******************************************************************************/
S#else
S#error "Failed to match a default include file"
N#endif
N
N#endif /* __MSP432_H__ */
N
L 47 "../system_msp432p401r.c" 2
N
N/*--------------------- Configuration Instructions ----------------------------
N   1. If you prefer to halt the Watchdog Timer, set __HALT_WDT to 1:
N   #define __HALT_WDT       1
N   2. Insert your desired CPU frequency in Hz at:
N   #define __SYSTEM_CLOCK   12000000
N   3. If you prefer the DC-DC power regulator (more efficient at higher
N       frequencies), set the __REGULATOR to 1:
N   #define __REGULATOR      1
N *---------------------------------------------------------------------------*/
N
N/*--------------------- Watchdog Timer Configuration ------------------------*/
N//  Halt the Watchdog Timer
N//     <0> Do not halt the WDT
N//     <1> Halt the WDT
N#define __HALT_WDT         1
N
N/*--------------------- CPU Frequency Configuration -------------------------*/
N//  CPU Frequency
N//     <1500000> 1.5 MHz
N//     <3000000> 3 MHz
N//     <12000000> 12 MHz
N//     <24000000> 24 MHz
N//     <48000000> 48 MHz
N#define  __SYSTEM_CLOCK    3000000
N
N/*--------------------- Power Regulator Configuration -----------------------*/
N//  Power Regulator Mode
N//     <0> LDO
N//     <1> DC-DC
N#define __REGULATOR        0
N
N/*----------------------------------------------------------------------------
N   Define clocks, used for SystemCoreClockUpdate()
N *---------------------------------------------------------------------------*/
N#define __VLOCLK           10000
N#define __MODCLK           24000000
N#define __LFXT             32768
N#define __HFXT             48000000
N
N/*----------------------------------------------------------------------------
N   Clock Variable definitions
N *---------------------------------------------------------------------------*/
Nuint32_t SystemCoreClock = __SYSTEM_CLOCK;  /*!< System Clock Frequency (Core Clock)*/
Xuint32_t SystemCoreClock = 3000000;   
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock
N *         retrieved from cpu registers.
N */
Nvoid SystemCoreClockUpdate(void)
N{
N    uint32_t source = 0, divider = 0, dividerValue = 0, centeredFreq = 0, calVal = 0;
N    int16_t dcoTune = 0;
N    float dcoConst = 0.0;
N
N    divider = (CS->CTL1 & CS_CTL1_DIVM_MASK) >> CS_CTL1_DIVM_OFS;
X    divider = (((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL1 & ((uint32_t)0x00070000)) >> (16);
N    dividerValue = 1 << divider;
N    source = CS->CTL1 & CS_CTL1_SELM_MASK;
X    source = ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL1 & ((uint32_t)0x00000007);
N
N    switch(source)
N    {
N    case CS_CTL1_SELM__LFXTCLK:
X    case ((uint32_t)0x00000000):
N        if(BITBAND_PERI(CS->IFG, CS_IFG_LFXTIFG_OFS))
X        if((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->IFG)) - ((uint32_t)0x40000000))*32 + (( 0))*4))))
N        {
N            // Clear interrupt flag
N            CS->KEY = CS_KEY_VAL;
X            ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->KEY = ((uint32_t)0x0000695A);
N            CS->CLRIFG |= CS_CLRIFG_CLR_LFXTIFG;
X            ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CLRIFG |= ((uint32_t)0x00000001);
N            CS->KEY = 1;
X            ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->KEY = 1;
N
N            if(BITBAND_PERI(CS->IFG, CS_IFG_LFXTIFG_OFS))
X            if((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->IFG)) - ((uint32_t)0x40000000))*32 + (( 0))*4))))
N            {
N                if(BITBAND_PERI(CS->CLKEN, CS_CLKEN_REFOFSEL_OFS))
X                if((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CLKEN)) - ((uint32_t)0x40000000))*32 + ((15))*4))))
N                {
N                    SystemCoreClock = (128000 / dividerValue);
N                }
N                else
N                {
N                    SystemCoreClock = (32000 / dividerValue);
N                }
N            }
N            else
N            {
N                SystemCoreClock = __LFXT / dividerValue;
X                SystemCoreClock = 32768 / dividerValue;
N            }
N        }
N        else
N        {
N            SystemCoreClock = __LFXT / dividerValue;
X            SystemCoreClock = 32768 / dividerValue;
N        }
N        break;
N    case CS_CTL1_SELM__VLOCLK:
X    case ((uint32_t)0x00000001):
N        SystemCoreClock = __VLOCLK / dividerValue;
X        SystemCoreClock = 10000 / dividerValue;
N        break;
N    case CS_CTL1_SELM__REFOCLK:
X    case ((uint32_t)0x00000002):
N        if (BITBAND_PERI(CS->CLKEN, CS_CLKEN_REFOFSEL_OFS))
X        if ((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CLKEN)) - ((uint32_t)0x40000000))*32 + ((15))*4))))
N        {
N            SystemCoreClock = (128000 / dividerValue);
N        }
N        else
N        {
N            SystemCoreClock = (32000 / dividerValue);
N        }
N        break;
N    case CS_CTL1_SELM__DCOCLK:
X    case ((uint32_t)0x00000003):
N        dcoTune = (CS->CTL0 & CS_CTL0_DCOTUNE_MASK) >> CS_CTL0_DCOTUNE_OFS;
X        dcoTune = (((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL0 & ((uint32_t)0x000003FF)) >> ( 0);
N
N        switch(CS->CTL0 & CS_CTL0_DCORSEL_MASK)
X        switch(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL0 & ((uint32_t)0x00070000))
N        {
N        case CS_CTL0_DCORSEL_0:
X        case ((uint32_t)0x00000000):
N            centeredFreq = 1500000;
N            break;
N        case CS_CTL0_DCORSEL_1:
X        case ((uint32_t)0x00010000):
N            centeredFreq = 3000000;
N            break;
N        case CS_CTL0_DCORSEL_2:
X        case ((uint32_t)0x00020000):
N            centeredFreq = 6000000;
N            break;
N        case CS_CTL0_DCORSEL_3:
X        case ((uint32_t)0x00030000):
N            centeredFreq = 12000000;
N            break;
N        case CS_CTL0_DCORSEL_4:
X        case ((uint32_t)0x00040000):
N            centeredFreq = 24000000;
N            break;
N        case CS_CTL0_DCORSEL_5:
X        case ((uint32_t)0x00050000):
N            centeredFreq = 48000000;
N            break;
N        }
N
N        if(dcoTune == 0)
N        {
N            SystemCoreClock = centeredFreq;
N        }
N        else
N        {
N
N            if(dcoTune & 0x1000)
N            {
N                dcoTune = dcoTune | 0xF000;
N            }
N
N            if (BITBAND_PERI(CS->CTL0, CS_CTL0_DCORES_OFS))
X            if ((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL0)) - ((uint32_t)0x40000000))*32 + ((22))*4))))
N            {
N                dcoConst = *((volatile const float *) &TLV->DCOER_CONSTK_RSEL04);
X                dcoConst = *((volatile const float *) &((TLV_Type *) ((uint32_t)0x00201000))->DCOER_CONSTK_RSEL04);
N                calVal = TLV->DCOER_FCAL_RSEL04;
X                calVal = ((TLV_Type *) ((uint32_t)0x00201000))->DCOER_FCAL_RSEL04;
N            }
N            /* Internal Resistor */
N            else
N            {
N                dcoConst = *((volatile const float *) &TLV->DCOIR_CONSTK_RSEL04);
X                dcoConst = *((volatile const float *) &((TLV_Type *) ((uint32_t)0x00201000))->DCOIR_CONSTK_RSEL04);
N                calVal = TLV->DCOIR_FCAL_RSEL04;
X                calVal = ((TLV_Type *) ((uint32_t)0x00201000))->DCOIR_FCAL_RSEL04;
N            }
N
N            SystemCoreClock = (uint32_t) ((centeredFreq)
N                               / (1
N                                    - ((dcoConst * dcoTune)
N                                            / (8 * (1 + dcoConst * (768 - calVal))))));
N        }
N        break;
N    case CS_CTL1_SELM__MODOSC:
X    case ((uint32_t)0x00000004):
N        SystemCoreClock = __MODCLK / dividerValue;
X        SystemCoreClock = 24000000 / dividerValue;
N        break;
N    case CS_CTL1_SELM__HFXTCLK:
X    case ((uint32_t)0x00000005):
N        if(BITBAND_PERI(CS->IFG, CS_IFG_HFXTIFG_OFS))
X        if((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->IFG)) - ((uint32_t)0x40000000))*32 + (( 1))*4))))
N        {
N            // Clear interrupt flag
N            CS->KEY = CS_KEY_VAL;
X            ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->KEY = ((uint32_t)0x0000695A);
N            CS->CLRIFG |= CS_CLRIFG_CLR_HFXTIFG;
X            ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CLRIFG |= ((uint32_t)0x00000002);
N            CS->KEY = 1;
X            ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->KEY = 1;
N
N            if(BITBAND_PERI(CS->IFG, CS_IFG_HFXTIFG_OFS))
X            if((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->IFG)) - ((uint32_t)0x40000000))*32 + (( 1))*4))))
N            {
N                if(BITBAND_PERI(CS->CLKEN, CS_CLKEN_REFOFSEL_OFS))
X                if((*((volatile uint8_t *) (((uint32_t)(0x42000000)) + (((uint32_t)(volatile const uint32_t *)&(((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CLKEN)) - ((uint32_t)0x40000000))*32 + ((15))*4))))
N                {
N                    SystemCoreClock = (128000 / dividerValue);
N                }
N                else
N                {
N                    SystemCoreClock = (32000 / dividerValue);
N                }
N            }
N            else
N            {
N                SystemCoreClock = __HFXT / dividerValue;
X                SystemCoreClock = 48000000 / dividerValue;
N            }
N        }
N        else
N        {
N            SystemCoreClock = __HFXT / dividerValue;
X            SystemCoreClock = 48000000 / dividerValue;
N        }
N        break;
N    }
R "../system_msp432p401r.c" 156 17 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
R "../system_msp432p401r.c" 189 25 (ULP 5.4) Detected an assignment to a type with size less than int. To avoid unnecessary sign extension, use int-sized types for local varaibles and convert to smaller types for static storage.
N}
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *
N * Performs the following initialization steps:
N *     1. Enables the FPU
N *     2. Halts the WDT if requested
N *     3. Enables all SRAM banks
N *     4. Sets up power regulator and VCORE
N *     5. Enable Flash wait states if needed
N *     6. Change MCLK to desired frequency
N *     7. Enable Flash read buffering
N */
Nvoid SystemInit(void)
N{
N    // Enable FPU if used
N    #if (__FPU_USED == 1)                                  // __FPU_USED is defined in core_cm4.h
X    #if (1U == 1)                                  
N    SCB->CPACR |= ((3UL << 10 * 2) |                       // Set CP10 Full Access
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CPACR |= ((3UL << 10 * 2) |                       
N                   (3UL << 11 * 2));                       // Set CP11 Full Access
N    #endif
N
N    #if (__HALT_WDT == 1)
X    #if (1 == 1)
N    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;            // Halt the WDT
X    ((WDT_A_Type *) (((uint32_t)0x40000000) +0x00004800))->CTL = ((uint16_t)0x5A00) | ((uint16_t)0x0080);            
N    #endif
N
N    SYSCTL->SRAM_BANKEN = SYSCTL_SRAM_BANKEN_BNK7_EN;      // Enable all SRAM banks
X    ((SYSCTL_Type *) (((uint32_t)0xE0000000)+0x00043000))->SRAM_BANKEN = ((uint32_t)0x00000080);      
N
N    #if (__SYSTEM_CLOCK == 1500000)                        // 1.5 MHz
X    #if (3000000 == 1500000)                        
S    // Default VCORE is LDO VCORE0 so no change necessary
S
S    // Switches LDO VCORE0 to DCDC VCORE0 if requested
S    #if __REGULATOR
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    PCM->CTL0 = PCM_CTL0_KEY_VAL | PCM_CTL0_AMR_4;
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    #endif
S
S    // No flash wait states necessary
S
S    // DCO = 1.5 MHz; MCLK = source
S    CS->KEY = CS_KEY_VAL;                                  // Unlock CS module for register access
S    CS->CTL0 = CS_CTL0_DCORSEL_0;                          // Set DCO to 1.5MHz
S    CS->CTL1 = (CS->CTL1 & ~(CS_CTL1_SELM_MASK | CS_CTL1_DIVM_MASK)) | CS_CTL1_SELM__DCOCLK;
S	                                                       // Select MCLK as DCO source
S    CS->KEY = 0;
S
S    // Set Flash Bank read buffering
S    FLCTL->BANK0_RDCTL = FLCTL->BANK0_RDCTL & ~(FLCTL_BANK0_RDCTL_BUFD | FLCTL_BANK0_RDCTL_BUFI);
S    FLCTL->BANK1_RDCTL = FLCTL->BANK1_RDCTL & ~(FLCTL_BANK1_RDCTL_BUFD | FLCTL_BANK1_RDCTL_BUFI);
S
N    #elif (__SYSTEM_CLOCK == 3000000)                      // 3 MHz
X    #elif (3000000 == 3000000)                      
N    // Default VCORE is LDO VCORE0 so no change necessary
N
N    // Switches LDO VCORE0 to DCDC VCORE0 if requested
N    #if __REGULATOR
X    #if 0
S    while(PCM->CTL1 & PCM_CTL1_PMR_BUSY);
S    PCM->CTL0 = PCM_CTL0_KEY_VAL | PCM_CTL0_AMR_4;
S    while(PCM->CTL1 & PCM_CTL1_PMR_BUSY);
N    #endif
N
N    // No flash wait states necessary
N
N    // DCO = 3 MHz; MCLK = source
N    CS->KEY = CS_KEY_VAL;                                  // Unlock CS module for register access
X    ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->KEY = ((uint32_t)0x0000695A);                                  
N    CS->CTL0 = CS_CTL0_DCORSEL_1;                          // Set DCO to 1.5MHz
X    ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL0 = ((uint32_t)0x00010000);                          
N    CS->CTL1 = (CS->CTL1 & ~(CS_CTL1_SELM_MASK | CS_CTL1_DIVM_MASK)) | CS_CTL1_SELM__DCOCLK;
X    ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL1 = (((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->CTL1 & ~(((uint32_t)0x00000007) | ((uint32_t)0x00070000))) | ((uint32_t)0x00000003);
N	                                                       // Select MCLK as DCO source
N    CS->KEY = 0;
X    ((CS_Type *) (((uint32_t)0x40000000) +0x00010400))->KEY = 0;
N
N    // Set Flash Bank read buffering
N    FLCTL->BANK0_RDCTL = FLCTL->BANK0_RDCTL & ~(FLCTL_BANK0_RDCTL_BUFD | FLCTL_BANK0_RDCTL_BUFI);
X    ((FLCTL_Type *) (((uint32_t)0x40000000) +0x00011000))->BANK0_RDCTL = ((FLCTL_Type *) (((uint32_t)0x40000000) +0x00011000))->BANK0_RDCTL & ~(((uint32_t)0x00000020) | ((uint32_t)0x00000010));
N    FLCTL->BANK1_RDCTL = FLCTL->BANK1_RDCTL & ~(FLCTL_BANK1_RDCTL_BUFD | FLCTL_BANK1_RDCTL_BUFI);
X    ((FLCTL_Type *) (((uint32_t)0x40000000) +0x00011000))->BANK1_RDCTL = ((FLCTL_Type *) (((uint32_t)0x40000000) +0x00011000))->BANK1_RDCTL & ~(((uint32_t)0x00000020) | ((uint32_t)0x00000010));
N
N    #elif (__SYSTEM_CLOCK == 12000000)                     // 12 MHz
S    // Default VCORE is LDO VCORE0 so no change necessary
S
S    // Switches LDO VCORE0 to DCDC VCORE0 if requested
S    #if __REGULATOR
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    PCM->CTL0 = PCM_CTL0_KEY_VAL | PCM_CTL0_AMR_4;
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    #endif
S
S    // No flash wait states necessary
S
S    // DCO = 12 MHz; MCLK = source
S    CS->KEY = CS_KEY_VAL;                                  // Unlock CS module for register access
S    CS->CTL0 = CS_CTL0_DCORSEL_3;                          // Set DCO to 12MHz
S    CS->CTL1 = (CS->CTL1 & ~(CS_CTL1_SELM_MASK | CS_CTL1_DIVM_MASK)) | CS_CTL1_SELM__DCOCLK;
S	                                                       // Select MCLK as DCO source
S    CS->KEY = 0;
S
S    // Set Flash Bank read buffering
S    FLCTL->BANK0_RDCTL = FLCTL->BANK0_RDCTL & ~(FLCTL_BANK0_RDCTL_BUFD | FLCTL_BANK0_RDCTL_BUFI);
S    FLCTL->BANK1_RDCTL = FLCTL->BANK1_RDCTL & ~(FLCTL_BANK1_RDCTL_BUFD | FLCTL_BANK1_RDCTL_BUFI);
S
S    #elif (__SYSTEM_CLOCK == 24000000)                     // 24 MHz
S    // Default VCORE is LDO VCORE0 so no change necessary
S
S    // Switches LDO VCORE0 to DCDC VCORE0 if requested
S    #if __REGULATOR
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    PCM->CTL0 = PCM_CTL0_KEY_VAL | PCM_CTL0_AMR_4;
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    #endif
S
S    // 1 flash wait state (BANK0 VCORE0 max is 12 MHz)
S    FLCTL->BANK0_RDCTL = (FLCTL->BANK0_RDCTL & ~FLCTL_BANK0_RDCTL_WAIT_MASK) | FLCTL_BANK0_RDCTL_WAIT_1;
S    FLCTL->BANK1_RDCTL = (FLCTL->BANK1_RDCTL & ~FLCTL_BANK1_RDCTL_WAIT_MASK) | FLCTL_BANK1_RDCTL_WAIT_1;
S
S    // DCO = 24 MHz; MCLK = source
S    CS->KEY = CS_KEY_VAL;                                  // Unlock CS module for register access
S    CS->CTL0 = CS_CTL0_DCORSEL_4;                          // Set DCO to 24MHz
S    CS->CTL1 = (CS->CTL1 & ~(CS_CTL1_SELM_MASK | CS_CTL1_DIVM_MASK)) | CS_CTL1_SELM__DCOCLK;
S	                                                       // Select MCLK as DCO source
S    CS->KEY = 0;
S
S    // Set Flash Bank read buffering
S    FLCTL->BANK0_RDCTL = FLCTL->BANK0_RDCTL | (FLCTL_BANK0_RDCTL_BUFD | FLCTL_BANK0_RDCTL_BUFI);
S    FLCTL->BANK1_RDCTL = FLCTL->BANK1_RDCTL & ~(FLCTL_BANK1_RDCTL_BUFD | FLCTL_BANK1_RDCTL_BUFI);
S
S    #elif (__SYSTEM_CLOCK == 48000000)                     // 48 MHz
S    // Switches LDO VCORE0 to LDO VCORE1; mandatory for 48 MHz setting
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    PCM->CTL0 = PCM_CTL0_KEY_VAL | PCM_CTL0_AMR_1;
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S
S    // Switches LDO VCORE1 to DCDC VCORE1 if requested
S    #if __REGULATOR
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    PCM->CTL0 = PCM_CTL0_KEY_VAL | PCM_CTL0_AMR_5;
S    while((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
S    #endif
S
S    // 1 flash wait states (BANK0 VCORE1 max is 16 MHz, BANK1 VCORE1 max is 32 MHz)
S    FLCTL->BANK0_RDCTL = (FLCTL->BANK0_RDCTL & ~FLCTL_BANK0_RDCTL_WAIT_MASK) | FLCTL_BANK0_RDCTL_WAIT_1;
S    FLCTL->BANK1_RDCTL = (FLCTL->BANK1_RDCTL & ~FLCTL_BANK1_RDCTL_WAIT_MASK) | FLCTL_BANK1_RDCTL_WAIT_1;
S
S    // DCO = 48 MHz; MCLK = source
S    CS->KEY = CS_KEY_VAL;                                  // Unlock CS module for register access
S    CS->CTL0 = CS_CTL0_DCORSEL_5;                          // Set DCO to 48MHz
S    CS->CTL1 = (CS->CTL1 & ~(CS_CTL1_SELM_MASK | CS_CTL1_DIVM_MASK)) | CS_CTL1_SELM__DCOCLK;
S	                                                       // Select MCLK as DCO source
S    CS->KEY = 0;
S
S    // Set Flash Bank read buffering
S    FLCTL->BANK0_RDCTL = FLCTL->BANK0_RDCTL | (FLCTL_BANK0_RDCTL_BUFD | FLCTL_BANK0_RDCTL_BUFI);
S    FLCTL->BANK1_RDCTL = FLCTL->BANK1_RDCTL | (FLCTL_BANK1_RDCTL_BUFD | FLCTL_BANK1_RDCTL_BUFI);
N    #endif
N
N}
N
N
